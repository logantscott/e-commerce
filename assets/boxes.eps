%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1701.i207.022.P.m008.c20.isometric box set.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: AKSANA
%%CreationDate: 1/21/2017
%%BoundingBox: 0 0 376 382
%%HiResBoundingBox: 0 0 375.2515 381.4122
%%CropBox: 0 0 375.2515 381.4122
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Macrovector</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2017-01-21T15:53:03+04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2017-01-21T15:53:03+04:00</xmp:ModifyDate>
         <xmp:CreateDate>2017-01-21T15:53:03+04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>252</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYqleoeYbO1qkf7+YbFVPwj5t/TMTNrIw2G5cjHp5S8gxu81S9u3DSyEBTVEX4VUjuB/HNXl1E5&#xA;ncudDFGPJkmiasL2L05SBcxj4v8AKH839c2ml1HGKP1Bwc+HhNjkmmZbjuxV2KuxV2KuxVp5EjQv&#xA;IwRF3ZmNAB7k4CQNykC0qPmWx+tpCtTETRpz8Kg9tjvT3zE/Ow4q6d7kflpVabVFK128czHGSlvM&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:0FAE6BE9CDDFE6119B92A1B4D9AB1CDC</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:0FAE6BE9CDDFE6119B92A1B4D9AB1CDC</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:04801174072068118083B3087294E986</stRef:instanceID>
            <stRef:documentID>xmp.did:04801174072068118083B3087294E986</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:03801174072068118083B3087294E986</stEvt:instanceID>
                  <stEvt:when>2017-01-20T17:37:59+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:04801174072068118083B3087294E986</stEvt:instanceID>
                  <stEvt:when>2017-01-20T21:40:52+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0FAE6BE9CDDFE6119B92A1B4D9AB1CDC</stEvt:instanceID>
                  <stEvt:when>2017-01-21T15:53:03+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -381.412 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 381.412 li
375.251 381.412 li
375.251 0 li
cp
clp
50.623 71.2348 mo
7.07812 46.0928 li
37.0464 28.7906 li
80.5913 53.9316 li
50.623 71.2348 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.909804 .909804 .909804 rgb
f
67.4502 44.0518 mo
67.2954 44.1406 65.4673 50.7393 65.4673 50.7393 cv
68.7808 54.2925 li
68.7808 54.2925 75.2139 49.582 75.0576 49.6436 cv
74.9038 49.7056 76.7915 41.6191 76.7915 41.6191 cv
67.4502 44.0518 li
cp
.666667 .407843 .219608 rgb
f
72.8286 50.353 mo
66.0049 54.2925 li
50.8765 45.5571 li
57.6982 41.6191 li
72.8286 50.353 li
cp
.776471 .545098 .317647 rgb
f
37.8584 26.4092 mo
31.3447 30.1694 li
30.626 30.5845 30.0444 30.2495 30.0444 29.4214 cv
30.0444 29.0059 30.1895 28.5464 30.4248 28.1392 cv
30.6606 27.7324 30.9839 27.376 31.3447 27.1689 cv
37.8584 23.4077 li
38.5757 22.9932 39.1602 23.3286 39.1602 24.1582 cv
39.1602 24.9873 38.5757 25.9956 37.8584 26.4092 cv
cp
46.3506 13.501 mo
20.3989 28.4844 li
54.6563 48.2656 li
80.5913 33.2896 li
80.6079 33.2793 li
46.3506 13.501 li
cp
1 .866667 .658824 rgb
f
37.8584 26.4092 mo
31.3447 30.1694 li
30.626 30.5845 30.0444 30.2495 30.0444 29.4214 cv
30.0444 29.0059 30.1895 28.5464 30.4248 28.1392 cv
30.6606 27.7324 30.9839 27.376 31.3447 27.1689 cv
37.8584 23.4077 li
38.5757 22.9932 39.1602 23.3286 39.1602 24.1582 cv
39.1602 24.9873 38.5757 25.9956 37.8584 26.4092 cv
cp
46.3506 14.0264 mo
21.3076 28.4844 li
39.5283 39.0034 li
46.3506 35.0659 li
61.478 43.7988 li
79.6992 33.2793 li
46.3506 14.0264 li
cp
.666667 .407843 .219608 rgb
f
37.8584 26.4092 mo
31.3447 30.1694 li
30.626 30.5845 30.0444 30.2495 30.0444 29.4214 cv
30.0444 29.0059 30.1895 28.5464 30.4248 28.1392 cv
30.6606 27.7324 30.9839 27.376 31.3447 27.1689 cv
37.8584 23.4077 li
38.5757 22.9932 39.1602 23.3286 39.1602 24.1582 cv
39.1602 24.9873 38.5757 25.9956 37.8584 26.4092 cv
cp
21.3076 28.4844 mo
39.5283 39.0034 li
46.3506 35.0659 li
46.3506 14.0264 li
21.3076 28.4844 li
cp
.866667 .658824 .4 rgb
f
61.478 43.7988 mo
54.6563 47.7397 li
39.5283 39.0034 li
46.3506 35.0659 li
61.478 43.7988 li
cp
.776471 .545098 .317647 rgb
f
54.6563 68.7788 mo
54.6553 48.2646 li
20.3975 28.4854 li
20.3975 49.1636 li
54.6563 68.7788 li
cp
.737255 .486275 .27451 rgb
f
72.3086 47.2031 mo
65.7925 50.9663 li
65.0767 51.3789 64.4932 51.0435 64.4932 50.2134 cv
64.4932 49.8013 64.6387 49.3398 64.875 48.9321 cv
65.1104 48.5264 65.436 48.1699 65.7925 47.9634 cv
72.3086 44.2017 li
73.0283 43.7866 73.6074 44.1221 73.6074 44.9526 cv
73.6074 45.7822 73.0283 46.79 72.3086 47.2031 cv
cp
54.6563 48.2656 mo
54.6563 68.7788 li
80.5913 53.9282 li
80.5913 33.2896 li
54.6563 48.2656 li
cp
.866667 .658824 .4 rgb
f
73.6074 44.9526 mo
73.6074 45.7822 73.0283 46.79 72.3086 47.2031 cv
65.7925 50.9663 li
65.3267 51.2349 64.9136 51.1855 64.6865 50.8887 cv
64.9023 50.9521 65.1738 50.9087 65.4673 50.7393 cv
71.9824 46.9785 li
72.6982 46.5649 73.2813 45.5566 73.2813 44.7271 cv
73.2813 44.4375 73.2104 44.21 73.0854 44.0518 cv
73.4033 44.1411 73.6074 44.4595 73.6074 44.9526 cv
cp
1 .866667 .658824 rgb
f
39.1602 24.1582 mo
39.1602 24.9873 38.5757 25.9956 37.8584 26.4092 cv
31.3447 30.1694 li
30.8384 30.4624 30.4014 30.3823 30.1875 30.0186 cv
30.416 30.1187 30.7124 30.0854 31.04 29.897 cv
37.5547 26.1343 li
38.2734 25.7207 38.8564 24.7114 38.8564 23.8848 cv
38.8564 23.6392 38.8037 23.436 38.7124 23.2847 cv
38.9883 23.4014 39.1602 23.7051 39.1602 24.1582 cv
cp
f
50.4941 270.802 mo
6.9497 245.66 li
20.2681 237.97 li
20.2681 248.73 li
54.5268 268.346 li
54.526 240.314 li
54.5268 240.314 li
54.5268 268.346 li
80.4607 253.497 li
80.4624 253.498 li
50.4941 270.802 li
.909804 .909804 .909804 rgb
f
67.3218 230.808 mo
67.167 230.895 61.2139 237.896 61.2139 237.896 cv
68.6518 241.049 li
68.6518 241.049 75.084 236.338 74.9282 236.397 cv
74.7739 236.461 76.6621 228.374 76.6621 228.374 cv
67.3218 230.808 li
.666667 .407843 .219608 rgb
f
37.73 213.163 mo
31.2158 216.925 li
30.4976 217.34 29.9155 217.005 29.9155 216.176 cv
29.9155 215.761 30.0606 215.302 30.2964 214.894 cv
30.5323 214.487 30.8555 214.131 31.2158 213.924 cv
37.73 210.163 li
38.4463 209.749 39.0317 210.083 39.0317 210.914 cv
39.0317 211.742 38.4463 212.75 37.73 213.163 cv
46.2217 200.256 mo
20.2695 215.239 li
54.5268 235.021 li
80.4624 220.044 li
80.4785 220.034 li
46.2217 200.256 li
1 .866667 .658824 rgb
f
37.73 213.163 mo
31.2158 216.925 li
30.4976 217.34 29.9155 217.005 29.9155 216.176 cv
29.9155 215.761 30.0606 215.302 30.2964 214.894 cv
30.5323 214.487 30.8555 214.131 31.2158 213.924 cv
37.73 210.163 li
38.4463 209.749 39.0317 210.083 39.0317 210.914 cv
39.0317 211.742 38.4463 212.75 37.73 213.163 cv
46.2217 200.78 mo
21.1782 215.239 li
39.399 225.759 li
46.2217 229.692 li
54.5268 234.352 li
61.3492 230.553 li
79.5703 220.034 li
46.2217 200.78 li
.666667 .407843 .219608 rgb
f
37.73 213.163 mo
31.2158 216.925 li
30.4976 217.34 29.9155 217.005 29.9155 216.176 cv
29.9155 215.761 30.0606 215.302 30.2964 214.894 cv
30.5323 214.487 30.8555 214.131 31.2158 213.924 cv
37.73 210.163 li
38.4463 209.749 39.0317 210.083 39.0317 210.914 cv
39.0317 211.742 38.4463 212.75 37.73 213.163 cv
21.1782 215.239 mo
39.399 225.759 li
46.2217 229.692 li
46.2217 200.78 li
21.1782 215.239 li
.866667 .658824 .4 rgb
f
54.5268 268.346 mo
54.5259 235.019 li
20.2681 215.239 li
20.2681 248.73 li
54.5268 268.346 li
.737255 .486275 .27451 rgb
f
72.1796 233.959 mo
65.6641 237.721 li
64.9478 238.134 64.3643 237.797 64.3643 236.97 cv
64.3643 236.557 64.5103 236.095 64.7466 235.687 cv
64.9804 235.281 65.3071 234.926 65.6641 234.72 cv
72.1796 230.957 li
72.8994 230.542 73.479 230.878 73.479 231.708 cv
73.479 232.537 72.8994 233.546 72.1796 233.959 cv
54.5268 235.021 mo
54.5268 268.346 li
80.4624 253.496 li
80.4624 220.044 li
54.5268 235.021 li
.866667 .658824 .4 rgb
f
73.479 231.708 mo
73.479 232.537 72.8994 233.546 72.1797 233.959 cv
65.6641 237.721 li
65.1978 237.991 64.7852 237.94 64.5576 237.646 cv
64.7725 237.707 65.0439 237.663 65.3374 237.494 cv
71.853 233.733 li
72.5688 233.32 73.1519 232.311 73.1519 231.481 cv
73.1519 231.191 73.0815 230.965 72.9561 230.808 cv
73.2749 230.896 73.479 231.215 73.479 231.708 cv
cp
1 .866667 .658824 rgb
f
39.0317 210.914 mo
39.0317 211.742 38.4463 212.75 37.73 213.163 cv
31.2158 216.925 li
30.709 217.218 30.2729 217.138 30.0586 216.773 cv
30.2866 216.874 30.584 216.841 30.9107 216.652 cv
37.4253 212.888 li
38.1436 212.477 38.7275 211.467 38.7275 210.641 cv
38.7275 210.395 38.6748 210.19 38.5835 210.039 cv
38.8584 210.157 39.0317 210.46 39.0317 210.914 cv
f
54.5268 238.523 mo
54.526 238.523 li
54.5259 235.02 li
54.5268 235.021 li
80.4624 220.044 li
54.5268 235.021 li
54.5268 238.523 li
32.69 222.411 mo
20.2681 215.239 li
32.69 222.411 li
.937255 .937255 .937255 rgb
f
54.5268 240.314 mo
54.526 240.314 li
54.526 238.523 li
54.5268 238.523 li
54.5268 240.314 li
.85098 .85098 .85098 rgb
f
54.5268 235.021 mo
54.5268 235.021 li
54.5259 235.019 li
32.69 222.411 li
20.2695 215.239 li
21.3242 215.324 li
39.399 225.759 li
46.2217 229.692 li
54.5268 234.352 li
61.3492 230.553 li
79.5703 220.034 li
79.4467 219.963 li
80.4624 220.044 li
54.5268 235.021 li
.937255 .811765 .615686 rgb
f
54.5268 234.352 mo
46.2217 229.692 li
46.2217 217.311 li
79.4467 219.963 li
79.5703 220.034 li
61.3492 230.553 li
54.5268 234.352 li
.623529 .380392 .203922 rgb
f
30.4772 217.086 mo
30.1378 217.012 29.9155 216.688 29.9155 216.176 cv
29.9155 216.121 29.9181 216.066 29.923 216.01 cv
31.7677 216.157 li
30.9107 216.652 li
30.7033 216.772 30.5078 216.829 30.3342 216.829 cv
30.2344 216.829 30.1418 216.81 30.0586 216.773 cv
30.1566 216.94 30.3009 217.047 30.4772 217.086 cv
.937255 .937255 .937255 rgb
f
46.2217 229.692 mo
39.399 225.759 li
21.3242 215.324 li
29.923 216.01 li
29.9181 216.066 29.9155 216.121 29.9155 216.176 cv
29.9155 216.176 li
29.9155 216.688 30.1378 217.012 30.4772 217.086 cv
30.5273 217.097 30.5799 217.103 30.6347 217.103 cv
30.8092 217.103 31.0065 217.046 31.2158 216.925 cv
32.4508 216.212 li
46.2217 217.311 li
46.2217 229.692 li
.811765 .615686 .376471 rgb
f
54.526 240.314 mo
20.2788 220.808 li
20.2681 215.239 li
32.69 222.411 li
54.5259 235.019 li
54.5259 235.02 li
54.526 238.523 li
54.526 240.314 li
.690196 .454902 .258824 rgb
f
54.563 240.335 mo
54.5268 240.314 li
54.5268 238.523 li
54.5268 235.021 li
80.4624 220.044 li
80.4624 224.801 li
54.563 240.335 li
.811765 .615686 .376471 rgb
f
30.6347 217.103 mo
30.5799 217.103 30.5273 217.097 30.4772 217.086 cv
30.4772 217.086 li
30.3009 217.047 30.1566 216.94 30.0586 216.773 cv
30.1418 216.81 30.2344 216.829 30.3342 216.829 cv
30.5078 216.829 30.7033 216.772 30.9107 216.652 cv
31.7677 216.157 li
32.4508 216.212 li
31.2158 216.925 li
31.0065 217.046 30.8092 217.103 30.6347 217.103 cv
.937255 .811765 .615686 rgb
f
46.1865 196.553 mo
20.0122 211.665 li
54.563 231.614 li
80.7197 216.51 li
80.7373 216.5 li
46.1865 196.553 li
cp
1 .866667 .658824 rgb
f
46.1865 197.081 mo
20.9287 211.665 li
39.3057 222.273 li
46.1865 226.24 li
54.563 230.94 li
61.4424 227.107 li
79.8208 216.5 li
46.1865 197.081 li
cp
.976471 .788235 .541176 rgb
f
54.563 239.219 mo
54.5615 231.612 li
20.0103 211.665 li
20.0103 219.437 li
54.563 239.219 li
cp
.737255 .486275 .27451 rgb
f
54.563 231.614 mo
54.563 239.219 li
80.7197 224.242 li
80.7197 216.51 li
54.563 231.614 li
cp
.886275 .67451 .443137 rgb
f
58.7188 261.46 mo
58.5352 261.564 li
58.5352 258.374 li
58.7178 258.268 li
58.7188 261.46 li
cp
.309804 .180392 .0862745 rgb
f
59.3774 258.59 mo
59.2427 258.811 li
58.6279 258.403 li
58.0112 259.522 li
57.877 259.455 li
58.6279 258.093 li
59.3774 258.59 li
cp
f
60.5537 260.401 mo
60.3706 260.508 li
60.3706 257.313 li
60.5537 257.209 li
60.5537 260.401 li
cp
f
61.2119 257.529 mo
61.0776 257.753 li
60.4629 257.343 li
59.8472 258.464 li
59.7124 258.398 li
60.4629 257.031 li
61.2119 257.529 li
cp
f
61.2563 260.102 mo
57.833 262.077 li
57.7407 262.024 li
57.833 261.866 li
61.2563 259.89 li
61.3481 259.941 li
61.2563 260.102 li
cp
f
57.8613 257.753 mo
57.6084 257.897 57.4028 258.254 57.4019 258.544 cv
57.4019 262.433 li
57.4019 262.725 57.6084 262.845 57.8613 262.696 cv
61.2275 260.754 li
61.481 260.608 61.687 260.251 61.686 259.961 cv
61.687 256.073 li
61.687 255.779 61.481 255.662 61.2275 255.809 cv
57.8613 257.753 li
cp
61.2275 260.966 mo
57.8613 262.909 li
57.5073 263.114 57.2197 262.948 57.2197 262.539 cv
57.2197 258.651 li
57.2197 258.243 57.5073 257.744 57.8613 257.54 cv
61.2275 255.596 li
61.5815 255.392 61.8696 255.559 61.8696 255.967 cv
61.8696 259.854 li
61.8696 260.263 61.5815 260.761 61.2275 260.966 cv
cp
f
64.5786 258.496 mo
64.4868 258.443 li
64.4868 255.66 li
64.5786 255.502 li
64.6704 255.555 li
64.6704 258.337 li
64.5786 258.496 li
cp
f
62.8955 254.833 mo
62.6421 254.98 62.4375 255.337 62.4365 255.628 cv
62.4365 259.517 li
62.4365 259.807 62.6421 259.927 62.8955 259.781 cv
66.2617 257.836 li
66.5142 257.69 66.7207 257.334 66.7207 257.041 cv
66.7212 253.155 li
66.7207 252.862 66.5142 252.745 66.2617 252.891 cv
62.8955 254.833 li
cp
66.2617 258.05 mo
62.8955 259.992 li
62.542 260.197 62.2534 260.03 62.2539 259.623 cv
62.2534 255.734 li
62.2534 255.326 62.542 254.827 62.8955 254.623 cv
66.2617 252.679 li
66.6162 252.475 66.9043 252.642 66.9043 253.05 cv
66.9043 256.937 li
66.9043 257.345 66.6162 257.844 66.2617 258.05 cv
cp
f
65.9683 255.69 mo
65.8364 255.176 65.2651 255.063 64.5786 255.457 cv
63.8921 255.853 63.3203 256.629 63.189 257.296 cv
65.9683 255.69 li
cp
f
64.0942 255.385 mo
64.0029 255.333 li
64.0029 254.654 li
64.0942 254.495 li
64.186 254.548 li
64.186 255.227 li
64.0942 255.385 li
cp
f
64.5786 255.105 mo
64.4868 255.053 li
64.4868 254.374 li
64.5786 254.215 li
64.6699 254.269 li
64.6699 254.946 li
64.5786 255.105 li
cp
f
65.062 254.826 mo
64.9712 254.771 li
64.9712 254.095 li
65.062 253.937 li
65.1543 253.987 li
65.1543 254.666 li
65.062 254.826 li
cp
f
67.8872 251.962 mo
67.6333 252.109 67.4277 252.465 67.4282 252.756 cv
67.4277 256.646 li
67.4282 256.937 67.6333 257.055 67.8872 256.909 cv
71.2529 254.965 li
71.5063 254.819 71.7114 254.463 71.7114 254.173 cv
71.7114 250.284 li
71.7114 249.992 71.5063 249.872 71.2529 250.02 cv
67.8872 251.962 li
cp
71.2529 255.178 mo
67.8872 257.122 li
67.5327 257.327 67.2437 257.159 67.2446 256.751 cv
67.2437 252.862 li
67.2437 252.455 67.5327 251.957 67.8872 251.751 cv
71.2529 249.807 li
71.6074 249.604 71.895 249.77 71.895 250.178 cv
71.895 254.066 li
71.895 254.475 71.6074 254.974 71.2529 255.178 cv
cp
f
69.5693 255.088 mo
69.4771 255.037 li
69.4771 252.253 li
69.5693 252.096 li
69.6611 252.148 li
69.6611 254.93 li
69.5693 255.088 li
cp
f
69.9863 254.849 mo
69.1519 255.332 li
69.0596 255.277 li
69.1519 255.119 li
69.9863 254.637 li
70.0786 254.69 li
69.9863 254.849 li
cp
f
70.4565 251.326 mo
70.4565 252.625 li
70.4565 252.977 70.2095 253.404 69.9067 253.579 cv
69.2334 253.97 li
68.9282 254.144 68.6826 254.003 68.6826 253.649 cv
68.6826 252.352 li
69.0171 252.16 li
69.0171 253.552 li
69.1079 253.603 li
69.1997 253.444 li
69.1997 252.054 li
70.4565 251.326 li
cp
f
gsave
43.5449 381.412 mo
0 356.27 li
29.9682 338.969 li
73.5122 364.108 li
43.5449 381.412 li
clp
0 338.969 mo
73.5122 338.969 li
73.5122 381.412 li
0 381.412 li
cp
.909804 .909804 .909804 rgb
f
grestore
72.585 313.069 mo
66.4907 309.554 li
52.582 301.523 li
18.231 321.357 li
32.1641 329.405 li
38.2329 332.912 li
53.335 341.632 li
87.6704 321.799 li
87.6865 321.79 li
72.585 313.069 li
cp
1 .866667 .658824 rgb
f
52.582 302.056 mo
19.1606 321.357 li
37.8335 332.138 li
44.8257 336.169 li
53.3374 340.944 li
60.3281 337.052 li
86.7583 321.789 li
52.582 302.056 li
cp
.976471 .788235 .541176 rgb
f
53.335 341.624 mo
53.335 375.783 li
38.2651 367.15 li
32.1641 363.659 li
18.231 355.676 li
18.231 321.357 li
32.1641 329.405 li
38.2651 332.919 li
53.335 341.624 li
cp
.737255 .486275 .27451 rgb
f
53.3374 341.63 mo
53.3374 375.781 li
87.6719 356.078 li
87.6719 321.799 li
53.3374 341.63 li
cp
.866667 .658824 .4 rgb
f
72.0049 339.817 mo
71.8218 339.925 li
71.8218 336.732 li
72.0049 336.627 li
72.0049 339.817 li
cp
.309804 .180392 .0862745 rgb
f
72.6631 336.947 mo
72.5283 337.17 li
71.9136 336.761 li
71.2983 337.882 li
71.1626 337.814 li
71.9136 336.449 li
72.6631 336.947 li
cp
f
73.8389 338.759 mo
73.6558 338.865 li
73.6558 335.674 li
73.8389 335.568 li
73.8389 338.759 li
cp
f
74.498 335.888 mo
74.3638 336.11 li
73.7485 335.702 li
73.1318 336.822 li
72.9976 336.756 li
73.7485 335.391 li
74.498 335.888 li
cp
f
74.5435 338.459 mo
71.1187 340.436 li
71.0273 340.381 li
71.1187 340.225 li
74.5435 338.248 li
74.6338 338.301 li
74.5435 338.459 li
cp
f
71.147 336.11 mo
70.8945 336.258 70.689 336.611 70.688 336.903 cv
70.688 340.79 li
70.688 341.083 70.8945 341.201 71.1479 341.056 cv
74.5137 339.112 li
74.7666 338.965 74.9722 338.61 74.9722 338.318 cv
74.9731 334.432 li
74.9722 334.14 74.7666 334.021 74.5137 334.166 cv
71.147 336.11 li
cp
74.5137 339.323 mo
71.1479 341.268 li
70.7925 341.472 70.5049 341.307 70.5049 340.896 cv
70.5049 337.011 li
70.5049 336.601 70.7925 336.102 71.1479 335.896 cv
74.5137 333.953 li
74.8677 333.75 75.1563 333.915 75.1563 334.324 cv
75.1563 338.214 li
75.1563 338.622 74.8677 339.12 74.5137 339.323 cv
cp
f
77.8647 336.854 mo
77.7725 336.801 li
77.7725 334.019 li
77.8647 333.859 li
77.9565 333.912 li
77.957 336.696 li
77.8647 336.854 li
cp
f
76.1816 333.192 mo
75.9287 333.338 75.7231 333.695 75.7222 333.985 cv
75.7222 337.874 li
75.7222 338.166 75.9287 338.285 76.1826 338.138 cv
79.5479 336.196 li
79.8013 336.049 80.0054 335.693 80.0054 335.401 cv
80.0063 331.514 li
80.0054 331.221 79.8013 331.104 79.5479 331.249 cv
76.1816 333.192 li
cp
79.5479 336.407 mo
76.1826 338.352 li
75.8267 338.556 75.5386 338.389 75.5386 337.98 cv
75.5386 334.093 li
75.5386 333.685 75.8267 333.187 76.1826 332.979 cv
79.5479 331.035 li
79.9019 330.831 80.1899 330.998 80.1899 331.408 cv
80.1899 335.296 li
80.1899 335.705 79.9019 336.203 79.5479 336.407 cv
cp
f
79.2544 334.047 mo
79.1226 333.534 78.5508 333.419 77.8647 333.815 cv
77.1777 334.213 76.606 334.987 76.4746 335.653 cv
79.2544 334.047 li
cp
f
77.3799 333.743 mo
77.2886 333.689 li
77.2886 333.012 li
77.3799 332.854 li
77.4712 332.905 li
77.4712 333.584 li
77.3799 333.743 li
cp
f
77.8647 333.463 mo
77.7725 333.41 li
77.7725 332.731 li
77.8647 332.573 li
77.9556 332.626 li
77.9556 333.305 li
77.8647 333.463 li
cp
f
78.3477 333.185 mo
78.2573 333.132 li
78.2573 332.452 li
78.3477 332.293 li
78.4399 332.346 li
78.4399 333.026 li
78.3477 333.185 li
cp
f
81.1724 330.321 mo
80.9194 330.467 80.7139 330.823 80.7139 331.117 cv
80.7139 335.003 li
80.7139 335.296 80.9194 335.413 81.1724 335.269 cv
84.5391 333.325 li
84.7915 333.18 84.9976 332.822 84.9966 332.529 cv
84.9976 328.643 li
84.9976 328.351 84.7915 328.23 84.5391 328.377 cv
81.1724 330.321 li
cp
84.5396 333.536 mo
81.1724 335.479 li
80.8184 335.684 80.5293 335.517 80.5303 335.108 cv
80.5293 331.221 li
80.5293 330.813 80.8184 330.313 81.1724 330.108 cv
84.5391 328.166 li
84.8926 327.961 85.1812 328.128 85.1812 328.535 cv
85.1812 332.424 li
85.1812 332.831 84.8926 333.331 84.5396 333.536 cv
cp
f
82.8555 333.448 mo
82.7632 333.396 li
82.7632 330.612 li
82.8555 330.452 li
82.9473 330.506 li
82.9478 333.29 li
82.8555 333.448 li
cp
f
83.2729 333.207 mo
82.4375 333.688 li
82.3452 333.638 li
82.4375 333.478 li
83.2729 332.995 li
83.3643 333.048 li
83.2729 333.207 li
cp
f
83.7427 329.685 mo
83.7427 330.985 li
83.7437 331.337 83.4951 331.763 83.1924 331.938 cv
82.519 332.327 li
82.2144 332.504 81.9683 332.359 81.9683 332.009 cv
81.9683 330.71 li
82.3022 330.517 li
82.3022 331.909 li
82.3936 331.963 li
82.4858 331.802 li
82.4858 330.41 li
83.7427 329.685 li
cp
f
38.2651 325.849 mo
38.2651 367.15 li
32.1641 363.659 li
32.1641 329.372 li
38.2651 325.849 li
cp
.607843 .454902 .317647 rgb
f
72.585 313.069 mo
38.2651 332.888 li
38.2329 332.912 li
32.1641 329.405 li
32.1641 329.372 li
38.2651 325.849 li
66.4907 309.554 li
72.585 313.069 li
cp
.792157 .686275 .560784 rgb
f
43.5449 165.831 mo
0 140.688 li
29.9682 123.387 li
73.5122 148.528 li
43.5449 165.831 li
.909804 .909804 .909804 rgb
f
52.582 101.957 mo
18.231 121.79 li
53.335 142.065 li
87.6704 122.23 li
87.6865 122.224 li
52.582 101.957 li
cp
1 .866667 .658824 rgb
f
52.582 102.49 mo
19.1606 121.79 li
53.3374 141.376 li
86.7583 122.222 li
52.582 102.49 li
cp
.976471 .788235 .541176 rgb
f
53.335 142.057 mo
53.335 160.202 li
38.2651 151.57 li
32.1641 148.079 li
18.231 140.095 li
18.231 121.79 li
53.335 142.057 li
cp
.737255 .486275 .27451 rgb
f
53.3374 142.062 mo
53.3374 160.2 li
87.6719 140.497 li
87.6719 122.231 li
53.3374 142.062 li
cp
.866667 .658824 .4 rgb
f
57.9165 153.223 mo
57.7334 153.329 li
57.7334 150.138 li
57.9165 150.031 li
57.9165 153.223 li
cp
.309804 .180392 .0862745 rgb
f
58.5747 150.354 mo
58.4399 150.575 li
57.8247 150.166 li
57.209 151.287 li
57.0742 151.22 li
57.8247 149.854 li
58.5747 150.354 li
cp
f
59.7505 152.164 mo
59.5679 152.271 li
59.5679 149.079 li
59.7505 148.972 li
59.7505 152.164 li
cp
f
60.4087 149.294 mo
60.2744 149.517 li
59.6602 149.107 li
59.0435 150.227 li
58.9087 150.161 li
59.6602 148.795 li
60.4087 149.294 li
cp
f
60.4546 151.865 mo
57.0303 153.841 li
56.9385 153.788 li
57.0303 153.63 li
60.4546 151.653 li
60.5449 151.707 li
60.4546 151.865 li
cp
f
57.0581 149.515 mo
56.8057 149.663 56.5996 150.017 56.5986 150.309 cv
56.5986 154.196 li
56.5986 154.488 56.8057 154.608 57.0591 154.461 cv
60.4248 152.519 li
60.6777 152.371 60.8833 152.016 60.8828 151.723 cv
60.8838 147.837 li
60.8833 147.544 60.6777 147.425 60.4248 147.571 cv
57.0581 149.515 li
cp
60.4248 152.729 mo
57.0591 154.673 li
56.7036 154.878 56.416 154.712 56.416 154.302 cv
56.416 150.416 li
56.416 150.006 56.7036 149.508 57.0591 149.303 cv
60.4248 147.358 li
60.7783 147.155 61.0669 147.321 61.0669 147.731 cv
61.0669 151.619 li
61.0669 152.026 60.7783 152.526 60.4248 152.729 cv
cp
f
63.7764 150.259 mo
63.6841 150.206 li
63.6841 147.424 li
63.7764 147.265 li
63.8682 147.318 li
63.8691 150.102 li
63.7764 150.259 li
cp
f
62.0928 146.599 mo
61.8398 146.743 61.6343 147.101 61.6333 147.392 cv
61.6333 151.279 li
61.6333 151.572 61.8398 151.69 62.0938 151.544 cv
65.4585 149.601 li
65.7124 149.455 65.917 149.099 65.917 148.807 cv
65.9175 144.918 li
65.917 144.626 65.7124 144.509 65.4585 144.654 cv
62.0928 146.599 li
cp
65.4585 149.813 mo
62.0938 151.756 li
61.7383 151.961 61.4507 151.793 61.4507 151.386 cv
61.4507 147.5 li
61.4507 147.089 61.7383 146.59 62.0938 146.385 cv
65.4585 144.441 li
65.813 144.237 66.1016 144.405 66.1016 144.814 cv
66.1016 148.7 li
66.1016 149.11 65.813 149.609 65.4585 149.813 cv
cp
f
65.1655 147.454 mo
65.0337 146.939 64.4629 146.825 63.7764 147.221 cv
63.0894 147.618 62.5176 148.392 62.3862 149.059 cv
65.1655 147.454 li
cp
f
63.291 147.148 mo
63.1997 147.096 li
63.1997 146.417 li
63.291 146.259 li
63.3828 146.311 li
63.3828 146.99 li
63.291 147.148 li
cp
f
63.7764 146.869 mo
63.6841 146.816 li
63.6841 146.137 li
63.7764 145.979 li
63.8672 146.032 li
63.8672 146.711 li
63.7764 146.869 li
cp
f
64.2593 146.589 mo
64.1685 146.538 li
64.1685 145.859 li
64.2593 145.7 li
64.3511 145.752 li
64.3511 146.431 li
64.2593 146.589 li
cp
f
67.0845 143.727 mo
66.8306 143.873 66.6255 144.229 66.6255 144.521 cv
66.6255 148.409 li
66.6255 148.7 66.8306 148.819 67.0845 148.674 cv
70.4507 146.73 li
70.7026 146.584 70.9092 146.228 70.9082 145.935 cv
70.9092 142.047 li
70.9092 141.756 70.7026 141.636 70.4507 141.783 cv
67.0845 143.727 li
cp
70.4517 146.941 mo
67.0845 148.884 li
66.729 149.09 66.4404 148.923 66.4414 148.514 cv
66.4404 144.626 li
66.4404 144.218 66.729 143.719 67.0845 143.514 cv
70.4507 141.572 li
70.8042 141.367 71.0918 141.533 71.0918 141.941 cv
71.0918 145.829 li
71.0918 146.237 70.8042 146.736 70.4517 146.941 cv
cp
f
68.7666 146.854 mo
68.6743 146.8 li
68.6743 144.018 li
68.7666 143.858 li
68.8584 143.912 li
68.8589 146.695 li
68.7666 146.854 li
cp
f
69.1846 146.612 mo
68.3486 147.094 li
68.2568 147.042 li
68.3486 146.883 li
69.1846 146.401 li
69.2759 146.453 li
69.1846 146.612 li
cp
f
69.6538 143.09 mo
69.6538 144.39 li
69.6548 144.742 69.4063 145.169 69.104 145.344 cv
68.4302 145.732 li
68.1255 145.909 67.8799 145.765 67.8799 145.415 cv
67.8799 144.115 li
68.2134 143.922 li
68.2134 145.314 li
68.3052 145.368 li
68.397 145.208 li
68.397 143.816 li
69.6538 143.09 li
cp
f
38.2651 133.321 mo
38.2651 151.57 li
32.1641 148.079 li
32.1641 129.806 li
38.2651 133.321 li
cp
.607843 .454902 .317647 rgb
f
72.585 113.503 mo
38.2651 133.321 li
38.2329 133.345 li
32.1641 129.838 li
32.1641 129.806 li
38.2651 126.282 li
66.4907 109.987 li
72.585 113.503 li
cp
.792157 .686275 .560784 rgb
f
85.1025 132.325 mo
78.3589 136.218 li
78.3589 130.42 li
85.1025 126.527 li
85.1025 132.325 li
cp
.898039 .878431 .862745 rgb
f
84.4609 128.265 mo
78.999 131.418 li
78.999 130.77 li
84.4609 127.618 li
84.4609 128.265 li
cp
.309804 .180392 .0862745 rgb
f
84.4609 129.432 mo
78.999 132.585 li
78.999 132.299 li
84.4609 129.146 li
84.4609 129.432 li
cp
.698039 .682353 .670588 rgb
f
84.4609 130.194 mo
78.999 133.347 li
78.999 133.061 li
84.4609 129.908 li
84.4609 130.194 li
cp
f
84.4609 131.013 mo
78.999 134.167 li
78.999 133.88 li
84.4609 130.728 li
84.4609 131.013 li
cp
f
84.4609 131.775 mo
78.999 134.928 li
78.999 134.643 li
84.4609 131.489 li
84.4609 131.775 li
cp
f
241.561 377.654 mo
194.678 350.583 li
201.011 346.927 li
201.011 351.048 li
218.28 360.941 li
225.841 365.27 li
244.5 375.957 li
241.561 377.654 li
244.515 375.949 mo
244.515 374.398 li
244.516 374.398 li
244.519 374.397 li
244.519 375.946 li
244.515 375.949 li
.909804 .909804 .909804 rgb
f
243.583 322.334 mo
201.011 346.913 li
244.515 372.039 li
287.068 347.46 li
287.087 347.449 li
243.583 322.334 li
1 .866667 .658824 rgb
f
243.583 322.994 mo
202.166 346.913 li
244.519 371.187 li
285.937 347.448 li
243.583 322.994 li
.976471 .788235 .541176 rgb
f
244.515 372.03 mo
244.515 375.966 li
225.841 365.27 li
218.28 360.941 li
201.011 351.048 li
201.011 346.913 li
244.515 372.03 li
.737255 .486275 .27451 rgb
f
244.519 372.036 mo
244.519 375.964 li
287.069 351.546 li
287.069 347.461 li
244.519 372.036 li
.866667 .658824 .4 rgb
f
270.438 357.066 mo
270.438 357.066 li
287.068 347.46 li
287.08 347.453 li
287.069 349.979 li
287.069 347.461 li
270.438 357.066 li
287.08 347.445 mo
284.424 345.911 li
287.087 345.933 li
287.08 347.445 li
201.011 346.913 mo
201.011 345.248 li
203.856 345.271 li
201.011 346.913 li
.937255 .937255 .937255 rgb
f
244.516 374.398 mo
244.515 374.398 li
244.515 372.039 li
244.519 372.037 li
244.519 374.397 li
244.516 374.398 li
256.686 365.009 mo
270.438 357.066 li
270.438 357.066 li
256.686 365.009 li
.85098 .85098 .85098 rgb
f
244.515 372.039 mo
244.515 372.03 li
201.011 346.913 li
203.856 345.271 li
204.994 345.28 li
202.166 346.913 li
244.519 371.187 li
285.937 347.448 li
283.259 345.902 li
284.424 345.911 li
287.08 347.445 li
287.08 347.453 li
287.068 347.46 li
270.438 357.066 li
256.686 365.009 li
244.519 372.036 li
244.519 372.037 li
244.515 372.039 li
.937255 .811765 .615686 rgb
f
244.519 371.187 mo
202.166 346.913 li
204.994 345.28 li
283.259 345.902 li
285.937 347.448 li
244.519 371.187 li
.913725 .737255 .505882 rgb
f
244.515 374.398 mo
225.781 363.665 li
218.192 359.322 li
201.011 349.396 li
201.011 346.913 li
244.515 372.03 li
244.515 372.039 li
244.515 374.398 li
.690196 .454902 .258824 rgb
f
244.519 374.397 mo
244.519 372.037 li
244.519 372.036 li
256.686 365.009 li
270.438 357.066 li
287.069 347.461 li
287.069 349.979 li
244.52 374.396 li
244.519 374.397 li
.811765 .615686 .376471 rgb
f
243.583 319.925 mo
200.868 344.587 li
244.516 369.797 li
287.212 345.136 li
287.233 345.126 li
243.583 319.925 li
cp
1 .866667 .658824 rgb
f
243.583 320.588 mo
202.025 344.587 li
244.52 368.942 li
286.079 345.125 li
243.583 320.588 li
cp
.976471 .788235 .541176 rgb
f
244.516 369.788 mo
244.516 373.737 li
225.781 363.004 li
218.192 358.662 li
200.868 348.737 li
200.868 344.587 li
244.516 369.788 li
cp
.737255 .486275 .27451 rgb
f
244.52 369.794 mo
244.52 373.735 li
287.214 349.234 li
287.214 345.137 li
244.52 369.794 li
cp
.886275 .67451 .443137 rgb
f
235.96 306.793 mo
191.012 280.838 li
221.948 262.98 li
266.894 288.932 li
235.96 306.793 li
.909804 .909804 .909804 rgb
f
259.734 199.946 mo
259.723 199.946 li
256.894 198.314 li
244.937 191.399 li
232.975 198.306 li
230.133 199.946 li
218.15 206.862 li
230.106 213.774 li
232.945 215.417 li
244.909 222.342 li
256.914 215.405 li
259.762 213.767 li
271.688 206.88 li
271.696 206.869 li
259.734 199.946 li
cp
1 .866667 .658824 rgb
f
218.728 206.863 mo
244.937 191.73 li
271.119 206.871 li
244.912 222.007 li
218.728 206.863 li
cp
.976471 .788235 .541176 rgb
f
259.734 213.774 mo
256.894 215.405 li
244.926 222.321 li
244.926 301.44 li
256.894 294.585 li
259.734 292.962 li
271.696 286.105 li
271.696 206.862 li
259.734 213.774 li
cp
.866667 .658824 .4 rgb
f
232.963 215.405 mo
230.123 213.774 li
218.161 206.862 li
218.161 286.105 li
230.123 292.962 li
232.963 294.585 li
244.926 301.44 li
244.926 222.321 li
232.963 215.405 li
cp
.737255 .486275 .27451 rgb
f
263.625 218.369 mo
263.483 218.451 li
263.483 216.021 li
263.625 215.941 li
263.625 218.369 li
cp
.309804 .180392 .0862745 rgb
f
264.123 216.186 mo
264.021 216.354 li
263.552 216.044 li
263.085 216.897 li
262.982 216.845 li
263.552 215.806 li
264.123 216.186 li
cp
f
265.018 217.563 mo
264.879 217.646 li
264.879 215.217 li
265.018 215.135 li
265.018 217.563 li
cp
f
265.52 215.379 mo
265.417 215.549 li
264.951 215.236 li
264.482 216.089 li
264.378 216.04 li
264.951 215 li
265.52 215.379 li
cp
f
265.555 217.336 mo
262.949 218.841 li
262.878 218.801 li
262.949 218.681 li
265.555 217.174 li
265.623 217.216 li
265.555 217.336 li
cp
f
262.971 215.547 mo
262.779 215.66 262.62 215.93 262.62 216.152 cv
262.62 219.11 li
262.62 219.332 262.779 219.422 262.971 219.313 cv
265.532 217.832 li
265.724 217.723 265.881 217.45 265.88 217.229 cv
265.881 214.272 li
265.881 214.047 265.724 213.957 265.532 214.067 cv
262.971 215.547 li
cp
265.532 217.994 mo
262.971 219.475 li
262.7 219.629 262.481 219.503 262.481 219.19 cv
262.481 216.232 li
262.481 215.921 262.7 215.541 262.971 215.387 cv
265.532 213.907 li
265.802 213.752 266.021 213.878 266.021 214.188 cv
266.021 217.148 li
266.021 217.46 265.802 217.839 265.532 217.994 cv
cp
f
267.065 213.172 mo
266.871 213.284 266.716 213.555 266.716 213.778 cv
266.716 216.737 li
266.716 216.957 266.871 217.049 267.065 216.937 cv
269.626 215.459 li
269.819 215.348 269.978 215.077 269.978 214.854 cv
269.978 211.895 li
269.978 211.672 269.819 211.581 269.626 211.694 cv
267.065 213.172 li
cp
269.626 215.62 mo
267.065 217.099 li
266.794 217.254 266.578 217.126 266.578 216.815 cv
266.578 213.858 li
266.578 213.548 266.794 213.167 267.065 213.01 cv
269.626 211.532 li
269.896 211.377 270.115 211.502 270.115 211.813 cv
270.115 214.772 li
270.115 215.084 269.896 215.463 269.626 215.62 cv
cp
f
268.346 215.553 mo
268.274 215.511 li
268.274 213.396 li
268.346 213.273 li
268.415 213.313 li
268.415 215.434 li
268.346 215.553 li
cp
f
268.664 215.369 mo
268.028 215.736 li
267.957 215.695 li
268.028 215.574 li
268.664 215.207 li
268.731 215.249 li
268.664 215.369 li
cp
f
269.02 212.688 mo
269.02 213.678 li
269.023 213.943 268.833 214.271 268.603 214.405 cv
268.089 214.697 li
267.858 214.833 267.671 214.725 267.671 214.458 cv
267.671 213.467 li
267.924 213.321 li
267.924 214.381 li
267.994 214.421 li
268.066 214.301 li
268.066 213.242 li
269.02 212.688 li
cp
f
269.804 225.798 mo
263.346 229.526 li
263.346 223.976 li
269.804 220.246 li
269.804 225.798 li
cp
.898039 .878431 .862745 rgb
f
269.192 221.911 mo
263.96 224.93 li
263.96 224.31 li
269.192 221.289 li
269.192 221.911 li
cp
.309804 .180392 .0862745 rgb
f
269.192 223.026 mo
263.96 226.048 li
263.96 225.776 li
269.192 222.754 li
269.192 223.026 li
cp
.698039 .682353 .670588 rgb
f
269.192 223.758 mo
263.96 226.777 li
263.96 226.501 li
269.192 223.483 li
269.192 223.758 li
cp
f
269.192 224.543 mo
263.96 227.563 li
263.96 227.288 li
269.192 224.268 li
269.192 224.543 li
cp
f
269.192 225.271 mo
263.96 228.292 li
263.96 228.019 li
269.192 224.998 li
269.192 225.271 li
cp
f
232.963 215.405 mo
232.963 294.585 li
230.123 292.962 li
230.123 213.774 li
232.963 215.405 li
cp
.607843 .454902 .317647 rgb
f
259.734 213.774 mo
259.734 292.962 li
256.894 294.585 li
256.894 215.405 li
259.734 213.774 li
cp
.65098 .498039 .345098 rgb
f
259.762 213.767 mo
256.914 215.405 li
244.937 208.492 li
242.1 206.852 li
230.133 199.946 li
232.975 198.306 li
244.937 205.209 li
247.779 206.852 li
259.762 213.767 li
cp
.792157 .686275 .560784 rgb
f
259.723 199.946 mo
247.779 206.852 li
244.937 208.492 li
232.945 215.417 li
230.106 213.774 li
242.1 206.852 li
244.937 205.209 li
256.894 198.314 li
259.723 199.946 li
cp
f
136.192 266.509 mo
105.918 248.986 li
135.916 231.683 li
166.19 249.206 li
136.192 266.509 li
.909804 .909804 .909804 rgb
f
157.507 207.944 mo
154.27 206.083 li
144.185 200.255 li
118.233 215.241 li
128.318 221.062 li
131.564 222.932 li
142.697 229.359 li
168.603 214.381 li
168.621 214.371 li
157.507 207.944 li
cp
1 .866667 .658824 rgb
f
144.185 200.777 mo
119.141 215.241 li
142.697 228.686 li
167.714 214.371 li
144.185 200.777 li
cp
.976471 .788235 .541176 rgb
f
142.697 229.359 mo
142.669 262.683 li
131.49 256.302 li
128.243 254.45 li
118.233 248.735 li
118.233 215.241 li
142.697 229.359 li
cp
.737255 .486275 .27451 rgb
f
142.694 229.357 mo
142.666 262.684 li
168.629 247.833 li
168.629 214.382 li
142.694 229.357 li
cp
.866667 .658824 .4 rgb
f
131.49 222.979 mo
131.49 256.302 li
128.243 254.45 li
128.243 221.117 li
131.49 222.979 li
cp
.607843 .454902 .317647 rgb
f
157.507 207.944 mo
148.441 213.193 li
145.195 215.073 li
131.564 222.932 li
131.471 222.988 li
128.226 221.117 li
128.318 221.062 li
141.95 213.193 li
145.195 211.313 li
154.27 206.083 li
157.507 207.944 li
cp
.792157 .686275 .560784 rgb
f
158.019 227.904 mo
157.835 228.01 li
157.835 224.82 li
158.018 224.713 li
158.019 227.904 li
cp
.309804 .180392 .0862745 rgb
f
158.677 225.035 mo
158.542 225.256 li
157.927 224.848 li
157.311 225.967 li
157.176 225.9 li
157.927 224.536 li
158.677 225.035 li
cp
f
159.853 226.846 mo
159.67 226.952 li
159.67 223.759 li
159.853 223.655 li
159.853 226.846 li
cp
f
160.512 223.976 mo
160.377 224.197 li
159.763 223.787 li
159.146 224.908 li
159.011 224.842 li
159.763 223.476 li
160.512 223.976 li
cp
f
160.556 226.546 mo
157.132 228.523 li
157.04 228.47 li
157.132 228.311 li
160.556 226.333 li
160.647 226.387 li
160.556 226.546 li
cp
f
157.161 224.197 mo
156.909 224.343 156.702 224.699 156.702 224.99 cv
156.702 228.878 li
156.702 229.17 156.909 229.288 157.161 229.143 cv
160.527 227.2 li
160.78 227.053 160.986 226.696 160.985 226.406 cv
160.986 222.517 li
160.986 222.226 160.78 222.105 160.527 222.253 cv
157.161 224.197 li
cp
160.527 227.411 mo
157.161 229.354 li
156.807 229.558 156.519 229.392 156.519 228.983 cv
156.519 225.098 li
156.519 224.688 156.807 224.189 157.161 223.985 cv
160.527 222.04 li
160.881 221.835 161.169 222.003 161.169 222.411 cv
161.169 226.299 li
161.169 226.707 160.881 227.207 160.527 227.411 cv
cp
f
163.772 224.939 mo
163.681 224.888 li
163.681 222.104 li
163.772 221.946 li
163.864 222 li
163.864 224.782 li
163.772 224.939 li
cp
f
162.088 221.279 mo
161.835 221.426 161.631 221.781 161.63 222.073 cv
161.63 225.961 li
161.63 226.253 161.835 226.37 162.088 226.226 cv
165.456 224.282 li
165.708 224.137 165.914 223.778 165.914 223.487 cv
165.914 219.6 li
165.914 219.309 165.708 219.188 165.456 219.336 cv
162.088 221.279 li
cp
165.456 224.494 mo
162.088 226.437 li
161.735 226.641 161.446 226.476 161.447 226.067 cv
161.446 222.18 li
161.446 221.771 161.735 221.272 162.088 221.067 cv
165.456 219.123 li
165.81 218.918 166.098 219.086 166.098 219.493 cv
166.098 223.383 li
166.098 223.79 165.81 224.289 165.456 224.494 cv
cp
f
165.163 222.137 mo
165.03 221.621 164.458 221.507 163.772 221.902 cv
163.085 222.298 162.514 223.074 162.382 223.74 cv
165.163 222.137 li
cp
f
163.288 221.829 mo
163.196 221.777 li
163.196 221.099 li
163.288 220.939 li
163.38 220.992 li
163.38 221.671 li
163.288 221.829 li
cp
f
163.772 221.552 mo
163.681 221.498 li
163.681 220.818 li
163.772 220.659 li
163.863 220.712 li
163.863 221.391 li
163.772 221.552 li
cp
f
164.256 221.271 mo
164.164 221.218 li
164.164 220.54 li
164.256 220.382 li
164.348 220.434 li
164.348 221.111 li
164.256 221.271 li
cp
f
162.074 227.493 mo
161.821 227.641 161.616 227.996 161.617 228.289 cv
161.616 232.177 li
161.617 232.47 161.821 232.586 162.074 232.441 cv
165.44 230.497 li
165.693 230.352 165.898 229.996 165.898 229.703 cv
165.928 225.816 li
165.928 225.522 165.723 225.405 165.469 225.552 cv
162.074 227.493 li
cp
165.44 230.71 mo
162.074 232.654 li
161.72 232.858 161.432 232.691 161.432 232.283 cv
161.432 228.395 li
161.432 227.987 161.72 227.488 162.074 227.282 cv
165.469 225.338 li
165.824 225.136 166.111 225.302 166.111 225.71 cv
166.083 229.598 li
166.083 230.007 165.795 230.505 165.44 230.71 cv
cp
f
163.757 230.62 mo
163.665 230.569 li
163.665 227.786 li
163.757 227.627 li
163.848 227.681 li
163.848 230.462 li
163.757 230.62 li
cp
f
164.174 230.38 mo
163.34 230.862 li
163.247 230.81 li
163.34 230.65 li
164.174 230.169 li
164.266 230.223 li
164.174 230.38 li
cp
f
164.644 226.859 mo
164.644 228.158 li
164.644 228.509 164.397 228.937 164.094 229.111 cv
163.421 229.501 li
163.116 229.676 162.87 229.534 162.87 229.181 cv
162.87 227.885 li
163.205 227.69 li
163.205 229.083 li
163.295 229.135 li
163.387 228.976 li
163.387 227.584 li
164.644 226.859 li
cp
f
157.948 231.616 mo
158.61 231.998 li
157.949 233.146 li
157.948 231.616 li
cp
f
159.489 230.477 mo
158.843 231.596 li
158.199 231.222 li
159.489 230.477 li
cp
f
158.843 232.132 mo
159.551 232.543 li
158.136 233.359 li
158.843 232.132 li
cp
f
159.768 230.533 mo
159.768 232.13 li
159.076 231.73 li
159.768 230.533 li
cp
f
160.042 232.69 mo
157.529 231.24 li
157.647 231.038 li
160.158 232.488 li
160.042 232.69 li
cp
f
157.646 234.075 mo
157.529 234.007 li
160.042 229.655 li
160.158 229.724 li
157.646 234.075 li
cp
f
160.182 232.178 mo
160.018 232.273 li
160.018 230.173 li
160.182 230.077 li
160.182 232.178 li
cp
f
157.67 233.628 mo
157.504 233.724 li
157.504 231.623 li
157.67 231.528 li
157.67 233.628 li
cp
f
161.078 230.682 mo
160.671 230.916 li
160.671 230.773 li
161.078 230.54 li
161.078 230.682 li
cp
f
160.761 230.438 mo
160.228 231.103 li
160.761 231.149 li
160.761 230.438 li
cp
f
157.048 233.01 mo
156.64 233.243 li
156.64 233.102 li
157.048 232.866 li
157.048 233.01 li
cp
f
156.957 233.346 mo
157.491 232.682 li
156.957 232.634 li
156.957 233.346 li
cp
f
157.104 230.419 mo
156.876 230.551 156.691 230.871 156.691 231.133 cv
156.692 235.151 li
156.692 235.413 156.876 235.521 157.104 235.39 cv
160.584 233.381 li
160.811 233.248 160.996 232.929 160.996 232.667 cv
160.996 228.648 li
160.996 228.386 160.811 228.279 160.583 228.411 cv
157.104 230.419 li
cp
160.583 233.57 mo
157.104 235.579 li
156.786 235.764 156.527 235.614 156.527 235.247 cv
156.527 231.229 li
156.527 230.86 156.786 230.413 157.104 230.229 cv
160.584 228.221 li
160.901 228.036 161.161 228.188 161.161 228.554 cv
161.161 232.572 li
161.161 232.938 160.902 233.387 160.583 233.57 cv
cp
f
326.349 380.041 mo
296.076 362.518 li
326.073 345.214 li
372.812 353.333 li
326.349 380.041 li
.909804 .909804 .909804 rgb
f
364.128 284.007 mo
360.892 282.144 li
350.807 276.316 li
308.39 300.707 li
318.475 306.527 li
321.721 308.397 li
332.854 314.825 li
375.225 290.442 li
375.244 290.434 li
364.128 284.007 li
cp
1 .866667 .658824 rgb
f
350.807 276.839 mo
309.298 300.707 li
332.854 314.15 li
374.335 290.434 li
350.807 276.839 li
cp
.976471 .788235 .541176 rgb
f
332.854 314.825 mo
332.827 376.214 li
321.647 369.834 li
318.401 367.981 li
308.39 362.267 li
308.39 300.707 li
332.854 314.825 li
cp
.737255 .486275 .27451 rgb
f
332.851 314.823 mo
332.823 376.215 li
375.251 351.961 li
375.251 290.443 li
332.851 314.823 li
cp
.866667 .658824 .4 rgb
f
321.647 308.443 mo
321.647 369.834 li
318.401 367.981 li
318.401 306.583 li
321.647 308.443 li
cp
.607843 .454902 .317647 rgb
f
364.128 284.007 mo
338.599 298.658 li
335.352 300.539 li
321.721 308.397 li
321.628 308.453 li
318.381 306.583 li
318.475 306.527 li
332.106 298.658 li
335.352 296.778 li
360.892 282.144 li
364.128 284.007 li
cp
.792157 .686275 .560784 rgb
f
338.218 321.997 mo
337.982 322.132 li
337.982 318.034 li
338.217 317.896 li
338.218 321.997 li
cp
.309804 .180392 .0862745 rgb
f
339.064 318.312 mo
338.89 318.593 li
338.102 318.069 li
337.309 319.508 li
337.136 319.422 li
338.102 317.67 li
339.064 318.312 li
cp
f
340.575 320.637 mo
340.34 320.773 li
340.34 316.672 li
340.575 316.537 li
340.575 320.637 li
cp
f
341.42 316.949 mo
341.248 317.235 li
340.458 316.707 li
339.667 318.147 li
339.495 318.063 li
340.458 316.308 li
341.42 316.949 li
cp
f
341.476 320.251 mo
337.08 322.789 li
336.962 322.72 li
337.08 322.517 li
341.476 319.978 li
341.594 320.046 li
341.476 320.251 li
cp
f
337.118 317.235 mo
336.793 317.421 336.528 317.879 336.528 318.252 cv
336.528 323.246 li
336.528 323.62 336.793 323.774 337.118 323.584 cv
341.44 321.09 li
341.765 320.901 342.029 320.443 342.028 320.07 cv
342.029 315.077 li
342.029 314.701 341.765 314.549 341.44 314.737 cv
337.118 317.235 li
cp
341.44 321.361 mo
337.118 323.858 li
336.662 324.119 336.292 323.906 336.292 323.382 cv
336.292 318.39 li
336.292 317.864 336.662 317.224 337.118 316.962 cv
341.44 314.465 li
341.894 314.202 342.263 314.416 342.263 314.941 cv
342.263 319.933 li
342.263 320.458 341.894 321.099 341.44 321.361 cv
cp
f
345.607 318.188 mo
345.489 318.122 li
345.489 314.547 li
345.607 314.345 li
345.725 314.412 li
345.725 317.986 li
345.607 318.188 li
cp
f
343.446 313.486 mo
343.121 313.676 342.858 314.132 342.857 314.507 cv
342.857 319.499 li
342.857 319.873 343.121 320.025 343.446 319.84 cv
347.769 317.343 li
348.092 317.156 348.358 316.697 348.358 316.322 cv
348.358 311.331 li
348.358 310.955 348.092 310.804 347.769 310.99 cv
343.446 313.486 li
cp
347.769 317.616 mo
343.446 320.111 li
342.992 320.373 342.622 320.161 342.623 319.637 cv
342.622 314.643 li
342.622 314.118 342.992 313.478 343.446 313.215 cv
347.769 310.718 li
348.224 310.455 348.594 310.671 348.594 311.194 cv
348.594 316.188 li
348.594 316.711 348.224 317.352 347.769 317.616 cv
cp
f
347.392 314.586 mo
347.222 313.926 346.489 313.779 345.607 314.287 cv
344.726 314.795 343.992 315.791 343.822 316.648 cv
347.392 314.586 li
cp
f
344.984 314.193 mo
344.868 314.127 li
344.868 313.255 li
344.984 313.051 li
345.104 313.119 li
345.104 313.991 li
344.984 314.193 li
cp
f
345.607 313.835 mo
345.489 313.769 li
345.489 312.896 li
345.607 312.69 li
345.723 312.76 li
345.723 313.631 li
345.607 313.835 li
cp
f
346.229 313.477 mo
346.111 313.408 li
346.111 312.537 li
346.229 312.335 li
346.346 312.4 li
346.346 313.271 li
346.229 313.477 li
cp
f
343.426 321.468 mo
343.101 321.657 342.837 322.113 342.837 322.489 cv
342.837 327.481 li
342.837 327.857 343.101 328.008 343.426 327.822 cv
347.75 325.325 li
348.074 325.139 348.338 324.681 348.338 324.307 cv
348.376 319.314 li
348.376 318.938 348.112 318.785 347.787 318.974 cv
343.426 321.468 li
cp
347.75 325.598 mo
343.426 328.096 li
342.971 328.358 342.601 328.144 342.601 327.618 cv
342.601 322.625 li
342.601 322.102 342.971 321.461 343.426 321.196 cv
347.787 318.7 li
348.241 318.439 348.612 318.651 348.612 319.176 cv
348.576 324.17 li
348.576 324.694 348.207 325.336 347.75 325.598 cv
cp
f
345.587 325.482 mo
345.47 325.417 li
345.47 321.842 li
345.587 321.64 li
345.705 321.708 li
345.705 325.28 li
345.587 325.482 li
cp
f
346.123 325.175 mo
345.052 325.795 li
344.934 325.727 li
345.052 325.522 li
346.123 324.903 li
346.242 324.971 li
346.123 325.175 li
cp
f
346.728 320.652 mo
346.728 322.319 li
346.728 322.771 346.409 323.32 346.02 323.545 cv
345.157 324.046 li
344.764 324.27 344.448 324.088 344.448 323.636 cv
344.448 321.97 li
344.878 321.722 li
344.878 323.51 li
344.996 323.574 li
345.112 323.372 li
345.112 321.586 li
346.728 320.652 li
cp
f
338.127 326.763 mo
338.978 327.253 li
338.129 328.727 li
338.127 326.763 li
cp
f
340.108 325.3 mo
339.277 326.736 li
338.449 326.258 li
340.108 325.3 li
cp
f
339.277 327.425 mo
340.186 327.952 li
338.371 329.002 li
339.277 327.425 li
cp
f
340.463 325.37 mo
340.463 327.422 li
339.576 326.909 li
340.463 325.37 li
cp
f
340.816 328.143 mo
337.591 326.279 li
337.741 326.019 li
340.966 327.884 li
340.816 328.143 li
cp
f
337.74 329.919 mo
337.591 329.831 li
340.816 324.245 li
340.966 324.331 li
337.74 329.919 li
cp
f
340.996 327.483 mo
340.786 327.606 li
340.786 324.908 li
340.996 324.786 li
340.996 327.483 li
cp
f
337.771 329.346 mo
337.558 329.469 li
337.558 326.77 li
337.771 326.649 li
337.771 329.346 li
cp
f
342.148 325.563 mo
341.624 325.864 li
341.624 325.68 li
342.148 325.378 li
342.148 325.563 li
cp
f
341.74 325.248 mo
341.055 326.103 li
341.74 326.162 li
341.74 325.248 li
cp
f
336.971 328.552 mo
336.447 328.853 li
336.447 328.67 li
336.971 328.367 li
336.971 328.552 li
cp
f
336.855 328.982 mo
337.541 328.13 li
336.855 328.068 li
336.855 328.982 li
cp
f
337.043 325.226 mo
336.752 325.396 336.513 325.807 336.513 326.143 cv
336.514 331.302 li
336.514 331.64 336.752 331.776 337.043 331.607 cv
341.513 329.028 li
341.804 328.858 342.042 328.449 342.042 328.112 cv
342.042 322.951 li
342.042 322.613 341.804 322.478 341.512 322.646 cv
337.043 325.226 li
cp
341.512 329.274 mo
337.043 331.854 li
336.634 332.089 336.302 331.896 336.303 331.426 cv
336.302 326.265 li
336.302 325.792 336.634 325.218 337.043 324.981 cv
341.513 322.403 li
341.92 322.165 342.254 322.358 342.254 322.828 cv
342.254 327.991 li
342.254 328.462 341.921 329.036 341.512 329.274 cv
cp
f
124.113 376.256 mo
100.117 362.401 li
116.631 352.866 li
140.627 366.719 li
124.113 376.256 li
.909804 .909804 .909804 rgb
f
166.189 297.828 mo
163.037 296.009 li
155.096 291.423 li
110.163 317.387 li
118.071 321.956 li
121.24 323.785 li
129.51 328.558 li
174.425 302.592 li
166.189 297.828 li
cp
1 .866667 .658824 rgb
f
165.936 297.98 mo
162.784 296.152 li
155.096 291.718 li
110.677 317.387 li
118.357 321.787 li
121.535 323.608 li
129.51 328.177 li
173.929 302.592 li
165.936 297.98 li
cp
.976471 .788235 .541176 rgb
f
129.51 328.549 mo
129.51 373.152 li
121.223 368.406 li
121.206 368.398 li
118.062 366.602 li
117.843 366.476 li
110.163 362.075 li
110.163 317.387 li
129.51 328.549 li
cp
.737255 .486275 .27451 rgb
f
129.509 328.556 mo
129.509 373.152 li
174.43 347.263 li
174.43 302.596 li
129.509 328.556 li
cp
.866667 .658824 .4 rgb
f
121.223 323.794 mo
121.223 368.406 li
121.206 368.398 li
118.062 366.602 li
118.062 321.973 li
121.223 323.794 li
cp
.607843 .454902 .317647 rgb
f
166.189 297.828 mo
165.936 297.98 li
137.738 314.252 li
134.568 316.089 li
121.535 323.608 li
121.24 323.785 li
121.206 323.803 li
118.037 321.973 li
118.071 321.956 li
118.357 321.787 li
131.407 314.252 li
134.568 312.422 li
162.784 296.152 li
163.037 296.009 li
166.189 297.828 li
cp
.792157 .686275 .560784 rgb
f
160.62 322.715 mo
160.418 322.828 li
160.418 319.335 li
160.62 319.217 li
160.62 322.715 li
cp
.309804 .180392 .0862745 rgb
f
161.342 319.572 mo
161.193 319.813 li
160.52 319.366 li
159.844 320.592 li
159.697 320.519 li
160.52 319.026 li
161.342 319.572 li
cp
f
162.629 321.555 mo
162.429 321.672 li
162.429 318.174 li
162.629 318.06 li
162.629 321.555 li
cp
f
163.35 318.409 mo
163.202 318.654 li
162.53 318.206 li
161.854 319.433 li
161.707 319.36 li
162.53 317.864 li
163.35 318.409 li
cp
f
163.397 321.227 mo
159.649 323.392 li
159.549 323.333 li
159.649 323.158 li
163.397 320.994 li
163.499 321.052 li
163.397 321.227 li
cp
f
159.68 318.654 mo
159.404 318.813 159.179 319.203 159.179 319.522 cv
159.179 323.779 li
159.179 324.099 159.404 324.23 159.68 324.068 cv
163.367 321.942 li
163.644 321.78 163.869 321.393 163.869 321.072 cv
163.869 316.815 li
163.869 316.495 163.644 316.364 163.367 316.525 cv
159.68 318.654 li
cp
163.367 322.175 mo
159.68 324.303 li
159.293 324.524 158.978 324.343 158.978 323.896 cv
158.978 319.639 li
158.978 319.192 159.293 318.646 159.68 318.422 cv
163.367 316.291 li
163.755 316.068 164.07 316.251 164.07 316.698 cv
164.07 320.954 li
164.07 321.401 163.755 321.949 163.367 322.175 cv
cp
f
166.92 319.468 mo
166.82 319.411 li
166.82 316.362 li
166.92 316.189 li
167.021 316.248 li
167.021 319.295 li
166.92 319.468 li
cp
f
165.078 315.458 mo
164.8 315.619 164.576 316.008 164.575 316.328 cv
164.575 320.586 li
164.575 320.905 164.8 321.035 165.078 320.876 cv
168.764 318.747 li
169.04 318.588 169.266 318.196 169.266 317.877 cv
169.266 313.62 li
169.266 313.3 169.04 313.17 168.764 313.331 cv
165.078 315.458 li
cp
168.764 318.979 mo
165.078 321.105 li
164.69 321.33 164.374 321.149 164.374 320.702 cv
164.374 316.444 li
164.374 315.998 164.69 315.451 165.078 315.226 cv
168.764 313.097 li
169.151 312.875 169.467 313.056 169.467 313.504 cv
169.467 317.762 li
169.467 318.208 169.151 318.754 168.764 318.979 cv
cp
f
168.443 316.396 mo
168.297 315.833 167.673 315.708 166.92 316.142 cv
166.169 316.574 165.542 317.423 165.398 318.155 cv
168.443 316.396 li
cp
f
166.39 316.061 mo
166.29 316.004 li
166.29 315.26 li
166.39 315.087 li
166.49 315.146 li
166.49 315.888 li
166.39 316.061 li
cp
f
166.92 315.755 mo
166.82 315.699 li
166.82 314.954 li
166.92 314.781 li
167.021 314.839 li
167.021 315.58 li
166.92 315.755 li
cp
f
167.45 315.45 mo
167.35 315.392 li
167.35 314.648 li
167.45 314.476 li
167.551 314.532 li
167.551 315.274 li
167.45 315.45 li
cp
f
165.062 322.265 mo
164.784 322.425 164.56 322.814 164.56 323.133 cv
164.56 327.394 li
164.56 327.711 164.784 327.841 165.062 327.683 cv
168.747 325.553 li
169.025 325.395 169.249 325.003 169.249 324.684 cv
169.28 320.427 li
169.28 320.106 169.055 319.976 168.78 320.136 cv
165.062 322.265 li
cp
168.747 325.785 mo
165.062 327.914 li
164.673 328.139 164.358 327.956 164.358 327.508 cv
164.358 323.25 li
164.358 322.805 164.673 322.259 165.062 322.033 cv
168.78 319.903 li
169.167 319.681 169.482 319.862 169.482 320.311 cv
169.451 324.568 li
169.451 325.015 169.135 325.561 168.747 325.785 cv
cp
f
166.904 325.686 mo
166.804 325.631 li
166.804 322.583 li
166.904 322.409 li
167.004 322.467 li
167.004 325.515 li
166.904 325.686 li
cp
f
167.361 325.424 mo
166.445 325.953 li
166.346 325.895 li
166.445 325.721 li
167.361 325.194 li
167.462 325.252 li
167.361 325.424 li
cp
f
167.875 321.567 mo
167.875 322.99 li
167.875 323.375 167.604 323.843 167.273 324.035 cv
166.536 324.464 li
166.201 324.653 165.933 324.499 165.933 324.112 cv
165.933 322.69 li
166.299 322.48 li
166.299 324.006 li
166.399 324.061 li
166.499 323.888 li
166.499 322.363 li
167.875 321.567 li
cp
f
160.542 326.778 mo
161.268 327.196 li
160.544 328.452 li
160.542 326.778 li
cp
f
162.231 325.53 mo
161.522 326.757 li
160.816 326.347 li
162.231 325.53 li
cp
f
161.522 327.344 mo
162.297 327.794 li
160.749 328.687 li
161.522 327.344 li
cp
f
162.534 325.593 mo
162.534 327.341 li
161.779 326.902 li
162.534 325.593 li
cp
f
162.835 327.954 mo
160.086 326.366 li
160.213 326.146 li
162.963 327.734 li
162.835 327.954 li
cp
f
160.212 329.471 mo
160.086 329.395 li
162.835 324.63 li
162.963 324.705 li
160.212 329.471 li
cp
f
162.989 327.394 mo
162.809 327.496 li
162.809 325.198 li
162.989 325.095 li
162.989 327.394 li
cp
f
160.239 328.981 mo
160.058 329.085 li
160.058 326.785 li
160.239 326.683 li
160.239 328.981 li
cp
f
163.97 325.755 mo
163.525 326.013 li
163.525 325.855 li
163.97 325.597 li
163.97 325.755 li
cp
f
163.623 325.486 mo
163.04 326.216 li
163.623 326.266 li
163.623 325.486 li
cp
f
159.556 328.303 mo
159.11 328.562 li
159.11 328.404 li
159.556 328.147 li
159.556 328.303 li
cp
f
159.458 328.672 mo
160.042 327.944 li
159.458 327.893 li
159.458 328.672 li
cp
f
159.619 325.469 mo
159.37 325.612 159.167 325.962 159.167 326.251 cv
159.167 330.649 li
159.167 330.936 159.37 331.054 159.619 330.911 cv
163.43 328.71 li
163.677 328.565 163.881 328.217 163.881 327.929 cv
163.881 323.528 li
163.881 323.241 163.677 323.125 163.429 323.269 cv
159.619 325.469 li
cp
163.429 328.919 mo
159.619 331.119 li
159.27 331.32 158.987 331.156 158.988 330.755 cv
158.987 326.355 li
158.987 325.951 159.27 325.461 159.619 325.26 cv
163.43 323.061 li
163.776 322.857 164.061 323.023 164.061 323.425 cv
164.061 327.825 li
164.061 328.227 163.777 328.717 163.429 328.919 cv
cp
f
135.389 78.0073 mo
95.2749 54.8447 li
122.882 38.9063 li
162.997 62.0669 li
135.389 78.0073 li
.909804 .909804 .909804 rgb
f
142.066 15.4663 mo
107.714 35.3003 li
142.819 55.5752 li
177.154 35.7412 li
177.171 35.7334 li
142.066 15.4663 li
cp
1 .866667 .658824 rgb
f
142.063 16.0015 mo
108.646 35.3013 li
124.906 44.6191 li
142.821 54.8911 li
159.979 45.0591 li
176.239 35.7314 li
142.063 16.0015 li
cp
.866667 .658824 .4 rgb
f
142.063 16.0015 mo
142.063 34.7114 li
142.821 54.8911 li
159.979 45.0591 li
176.239 35.7314 li
142.063 16.0015 li
cp
.666667 .407843 .219608 rgb
f
142.063 34.7114 mo
124.906 44.6191 li
142.821 54.8911 li
159.979 45.0591 li
142.063 34.7114 li
cp
.776471 .545098 .317647 rgb
f
142.819 55.5674 mo
142.819 73.7119 li
127.75 65.0801 li
121.646 61.5884 li
107.714 53.6055 li
107.714 35.3003 li
142.819 55.5674 li
cp
.737255 .486275 .27451 rgb
f
142.822 55.5718 mo
142.822 73.7095 li
177.156 54.0073 li
177.156 35.7417 li
142.822 55.5718 li
cp
.866667 .658824 .4 rgb
f
141.517 15.7622 mo
128.608 .514648 li
95.0313 19.4053 li
95.0313 20.1724 li
107.714 35.3003 li
108.646 35.3013 li
141.527 16.335 li
141.517 15.7622 li
cp
.737255 .486275 .27451 rgb
f
95.0322 19.4214 mo
108.646 35.3003 li
142.073 16.0391 li
142.063 15.4663 li
129.092 0 li
95.0322 19.4214 li
cp
.929412 .784314 .576471 rgb
f
147.457 59.1274 mo
148.224 59.5698 li
147.458 60.8989 li
147.457 59.1274 li
cp
.309804 .180392 .0862745 rgb
f
149.242 57.8081 mo
148.493 59.1045 li
147.747 58.6709 li
149.242 57.8081 li
cp
f
148.493 59.7251 mo
149.313 60.1997 li
147.675 61.146 li
148.493 59.7251 li
cp
f
149.563 57.8716 mo
149.563 59.7217 li
148.763 59.2598 li
149.563 57.8716 li
cp
f
149.881 60.3716 mo
146.972 58.6914 li
147.107 58.4575 li
150.016 60.1382 li
149.881 60.3716 li
cp
f
147.106 61.9731 mo
146.972 61.896 li
149.881 56.856 li
150.016 56.9341 li
147.106 61.9731 li
cp
f
150.044 59.7778 mo
149.854 59.8882 li
149.854 57.4546 li
150.044 57.3447 li
150.044 59.7778 li
cp
f
147.135 61.4575 mo
146.943 61.5679 li
146.943 59.1348 li
147.135 59.0249 li
147.135 61.4575 li
cp
f
151.082 58.0449 mo
150.61 58.3174 li
150.61 58.1519 li
151.082 57.8794 li
151.082 58.0449 li
cp
f
150.714 57.7617 mo
150.097 58.5308 li
150.714 58.5859 li
150.714 57.7617 li
cp
f
146.413 60.7402 mo
145.942 61.0127 li
145.942 60.8472 li
146.413 60.5742 li
146.413 60.7402 li
cp
f
146.309 61.1294 mo
146.926 60.3613 li
146.309 60.3057 li
146.309 61.1294 li
cp
f
146.479 57.7407 mo
146.216 57.8936 146 58.2642 146 58.5679 cv
146.001 63.2222 li
146.001 63.5264 146.216 63.6494 146.479 63.498 cv
150.51 61.1714 li
150.773 61.019 150.987 60.6479 150.987 60.3452 cv
150.987 55.6899 li
150.987 55.3853 150.773 55.2622 150.509 55.4146 cv
146.479 57.7407 li
cp
150.509 61.3911 mo
146.479 63.7178 li
146.11 63.9307 145.811 63.7583 145.812 63.333 cv
145.811 58.6787 li
145.811 58.2534 146.11 57.7344 146.479 57.521 cv
150.51 55.1948 li
150.877 54.9819 151.178 55.1543 151.178 55.5796 cv
151.178 60.2339 li
151.178 60.6597 150.878 61.1777 150.509 61.3911 cv
cp
f
176.57 36.105 mo
142.508 54.9424 li
142.508 55.5273 li
159.825 59.7559 li
194.206 40.166 li
194.206 39.5811 li
176.57 36.105 li
cp
.737255 .486275 .27451 rgb
f
176.57 35.5205 mo
142.508 54.9424 li
159.825 59.1709 li
194.206 39.5811 li
176.57 35.5205 li
cp
.929412 .784314 .576471 rgb
f
236.895 74.4795 mo
205.804 56.5283 li
227.202 44.1748 li
258.292 62.125 li
236.895 74.4795 li
.909804 .909804 .909804 rgb
f
257.629 25.6846 mo
253.279 23.1738 li
243.348 17.4395 li
218.823 31.6011 li
228.769 37.3472 li
233.103 39.8506 li
243.886 46.0762 li
268.401 31.916 li
268.412 31.9092 li
257.629 25.6846 li
cp
1 .866667 .658824 rgb
f
243.348 17.8203 mo
219.487 31.6011 li
243.888 45.5859 li
267.749 31.9092 li
243.348 17.8203 li
cp
.866667 .658824 .4 rgb
f
243.348 17.8203 mo
243.348 42.6743 li
246.314 44.2153 li
267.749 31.9092 li
243.348 17.8203 li
cp
.666667 .407843 .219608 rgb
f
243.886 46.0703 mo
243.886 70.4595 li
233.126 64.2969 li
228.769 61.8037 li
218.823 56.1035 li
218.823 31.6011 li
228.769 37.3472 li
233.126 39.856 li
243.886 46.0703 li
cp
.737255 .486275 .27451 rgb
f
243.888 46.0742 mo
243.888 70.458 li
268.402 56.3916 li
268.402 31.916 li
243.888 46.0742 li
cp
.866667 .658824 .4 rgb
f
242.949 17.6123 mo
233.671 6.65381 li
209.545 20.2305 li
209.545 20.7822 li
218.823 31.6011 li
219.329 31.6514 li
242.956 18.0234 li
242.949 17.6123 li
cp
.737255 .486275 .27451 rgb
f
209.545 20.2412 mo
219.329 31.6514 li
243.348 17.8101 li
243.34 17.3999 li
234.02 6.28564 li
209.545 20.2412 li
cp
.929412 .784314 .576471 rgb
f
255.659 6.97754 mo
243.742 17.8477 li
267.749 31.9854 li
268.433 31.9019 li
280.193 21.0254 li
280.013 20.6304 li
256.016 6.76172 li
255.659 6.97754 li
cp
.737255 .486275 .27451 rgb
f
267.749 31.9854 mo
280.013 20.6304 li
255.63 6.52344 li
255.273 6.73877 li
243.242 17.731 li
267.749 31.9854 li
cp
.929412 .784314 .576471 rgb
f
247.169 64.8945 mo
246.996 64.9956 li
246.996 61.9922 li
247.169 61.8926 li
247.169 64.8945 li
cp
.309804 .180392 .0862745 rgb
f
247.785 62.1953 mo
247.663 62.4043 li
247.083 62.019 li
246.504 63.0737 li
246.377 63.0103 li
247.083 61.7261 li
247.785 62.1953 li
cp
f
248.895 63.8979 mo
248.722 64 li
248.722 60.9971 li
248.895 60.897 li
248.895 63.8979 li
cp
f
249.515 61.1992 mo
249.385 61.4092 li
248.811 61.0225 li
248.23 62.0757 li
248.101 62.0142 li
248.811 60.73 li
249.515 61.1992 li
cp
f
249.558 63.6162 mo
246.334 65.4766 li
246.25 65.4263 li
246.334 65.2778 li
249.558 63.418 li
249.641 63.4683 li
249.558 63.6162 li
cp
f
246.364 61.4072 mo
246.125 61.5449 245.931 61.8794 245.931 62.1548 cv
245.931 65.8096 li
245.931 66.0859 246.125 66.1968 246.364 66.0596 cv
249.53 64.231 li
249.766 64.0938 249.961 63.7593 249.958 63.4844 cv
249.961 59.8291 li
249.961 59.5537 249.766 59.4414 249.53 59.5776 cv
246.364 61.4072 li
cp
249.53 64.4297 mo
246.364 66.2588 li
246.029 66.4521 245.757 66.2954 245.757 65.9097 cv
245.757 62.2549 li
245.757 61.8696 246.029 61.3994 246.364 61.2075 cv
249.53 59.3784 li
249.861 59.187 250.131 59.3428 250.131 59.728 cv
250.131 63.3857 li
250.131 63.769 249.861 64.2383 249.53 64.4297 cv
cp
f
251.423 58.4722 mo
251.183 58.6079 250.993 58.9438 250.993 59.2188 cv
250.993 62.876 li
250.993 63.1494 251.183 63.2617 251.423 63.1255 cv
254.59 61.2964 li
254.826 61.1592 255.022 60.8247 255.022 60.5479 cv
255.022 56.8916 li
255.022 56.6177 254.826 56.5044 254.59 56.6431 cv
251.423 58.4722 li
cp
254.59 61.4941 mo
251.423 63.3228 li
251.09 63.5156 250.821 63.3584 250.821 62.9751 cv
250.821 59.3188 li
250.821 58.9341 251.09 58.4644 251.423 58.271 cv
254.59 56.4448 li
254.923 56.2524 255.191 56.4082 255.191 56.7915 cv
255.191 60.4492 li
255.191 60.8335 254.923 61.3022 254.59 61.4941 cv
cp
f
253.006 61.4131 mo
252.917 61.3623 li
252.917 58.7456 li
253.006 58.5952 li
253.09 58.6445 li
253.09 61.2646 li
253.006 61.4131 li
cp
f
253.396 61.187 mo
252.613 61.6392 li
252.525 61.5903 li
252.613 61.4404 li
253.396 60.9868 li
253.483 61.0371 li
253.396 61.187 li
cp
f
253.839 57.873 mo
253.839 59.0962 li
253.842 59.4253 253.609 59.8291 253.323 59.9932 cv
252.689 60.3569 li
252.404 60.5239 252.173 60.3892 252.173 60.0591 cv
252.173 58.8359 li
252.487 58.6558 li
252.487 59.9648 li
252.572 60.0146 li
252.661 59.8647 li
252.661 58.5552 li
253.839 57.873 li
cp
f
243.348 42.5034 mo
240.956 43.8862 li
243.921 45.5859 li
246.314 44.2153 li
243.348 42.5034 li
cp
.776471 .545098 .317647 rgb
f
206.412 27.8892 mo
219.367 31.6885 li
243.888 45.5859 li
243.882 46.0439 li
230.807 42.814 li
206.412 28.3252 li
206.412 27.8892 li
cp
.866667 .658824 .4 rgb
f
219.416 31.6011 mo
206.412 27.8892 li
230.809 42.3696 li
243.888 45.5859 li
219.416 31.6011 li
cp
.929412 .784314 .576471 rgb
f
268.074 32.3052 mo
243.888 45.5859 li
243.893 46.0933 li
256.186 49.0942 li
280.593 35.1865 li
280.593 34.7749 li
268.074 32.3052 li
cp
.737255 .486275 .27451 rgb
f
267.749 31.9092 mo
243.888 45.5859 li
256.186 48.6782 li
280.593 34.7749 li
268.412 31.9092 li
267.749 31.9092 li
cp
.929412 .784314 .576471 rgb
f
322.051 259.886 mo
288.434 240.478 li
311.568 227.117 li
345.187 246.526 li
322.051 259.886 li
.909804 .909804 .909804 rgb
f
341.492 249.172 mo
346.197 246.456 li
356.935 240.257 li
356.932 209.635 li
346.175 215.844 li
341.488 218.548 li
329.828 225.281 li
329.835 255.892 li
329.835 255.903 li
341.492 249.172 li
cp
1 .866667 .658824 rgb
f
356.58 240.051 mo
356.575 210.258 li
330.287 225.547 li
330.194 255.283 li
356.58 240.051 li
cp
.666667 .407843 .219608 rgb
f
356.58 240.051 mo
333.306 226.615 li
330.258 228.559 li
330.194 255.283 li
356.58 240.051 li
cp
.866667 .658824 .4 rgb
f
329.833 225.283 mo
306.996 212.097 li
318.584 205.354 li
323.275 202.621 li
333.989 196.39 li
356.932 209.635 li
346.175 215.844 li
341.471 218.566 li
329.833 225.283 li
cp
.976471 .788235 .541176 rgb
f
329.83 225.283 mo
306.998 212.101 li
306.916 242.658 li
329.833 255.892 li
329.83 225.283 li
cp
.737255 .486275 .27451 rgb
f
356.989 239.79 mo
372.265 237.029 li
372.595 207.096 li
372.08 206.797 li
356.932 209.635 li
356.613 210.081 li
356.6 239.575 li
356.989 239.79 li
cp
1 .866667 .658824 rgb
f
372.585 207.09 mo
356.613 210.081 li
356.585 240.058 li
356.977 240.271 li
372.421 237.552 li
372.585 207.09 li
cp
.866667 .658824 .4 rgb
f
375.251 246.099 mo
356.243 240.532 li
330.026 255.369 li
329.833 255.819 li
348.85 261.87 li
375.25 246.713 li
375.251 246.099 li
cp
.737255 .486275 .27451 rgb
f
330.026 255.369 mo
348.861 261.304 li
375.251 246.099 li
356.58 240.051 li
330.026 255.369 li
cp
.929412 .784314 .576471 rgb
f
310.432 218.181 mo
310.431 217.963 li
313.244 219.587 li
313.242 219.805 li
310.432 218.181 li
cp
.309804 .180392 .0862745 rgb
f
312.625 220.217 mo
312.496 219.987 li
313.17 219.652 li
312.496 218.542 li
312.625 218.457 li
313.445 219.813 li
312.625 220.217 li
cp
f
310.432 220.335 mo
310.43 220.117 li
313.243 221.739 li
313.243 221.955 li
310.432 220.335 li
cp
f
312.625 222.374 mo
312.496 222.14 li
313.169 221.81 li
312.496 220.697 li
312.625 220.61 li
313.444 221.968 li
312.625 222.374 li
cp
f
310.336 221.107 mo
310.337 217.083 li
310.43 217.031 li
310.524 217.189 li
310.523 221.215 li
310.431 221.266 li
310.336 221.107 li
cp
f
314.133 219.312 mo
314.133 219.014 313.924 218.649 313.666 218.5 cv
310.244 216.524 li
309.986 216.376 309.776 216.499 309.776 216.797 cv
309.778 220.748 li
309.778 221.045 309.986 221.409 310.244 221.555 cv
313.665 223.534 li
313.923 223.682 314.134 223.56 314.135 223.264 cv
314.133 219.312 li
cp
309.59 220.642 mo
309.589 216.688 li
309.59 216.27 309.883 216.103 310.244 216.309 cv
313.666 218.283 li
314.029 218.495 314.323 219.002 314.321 219.419 cv
314.323 223.372 li
314.322 223.787 314.029 223.954 313.667 223.748 cv
310.244 221.77 li
309.884 221.562 309.59 221.056 309.59 220.642 cv
cp
f
314.146 225.637 mo
314.149 225.337 313.936 224.976 313.679 224.828 cv
310.254 222.852 li
310 222.703 309.791 222.82 309.789 223.122 cv
309.789 227.075 li
309.791 227.369 309.998 227.731 310.256 227.882 cv
313.68 229.86 li
313.936 230.007 314.149 229.886 314.147 229.591 cv
314.146 225.637 li
cp
309.604 226.968 mo
309.604 223.014 li
309.603 222.598 309.896 222.431 310.255 222.638 cv
313.678 224.614 li
314.038 224.823 314.333 225.328 314.333 225.744 cv
314.333 229.696 li
314.333 230.114 314.042 230.279 313.682 230.071 cv
310.258 228.095 li
309.898 227.887 309.604 227.383 309.604 226.968 cv
cp
f
310.537 225.527 mo
310.632 225.473 li
313.081 226.887 li
313.175 227.051 li
313.082 227.104 li
310.629 225.688 li
310.537 225.527 li
cp
f
310.538 226.015 mo
310.538 225.038 li
310.63 224.979 li
310.723 225.145 li
310.724 226.124 li
310.632 226.178 li
310.538 226.015 li
cp
f
313.401 228.223 mo
312.256 227.561 li
311.946 227.385 311.694 226.949 311.694 226.593 cv
311.696 225.803 li
311.694 225.445 311.946 225.3 312.255 225.479 cv
313.4 226.141 li
313.4 226.531 li
312.173 225.823 li
312.083 225.877 li
312.173 226.041 li
313.399 226.748 li
313.401 228.223 li
cp
f
333.465 226.707 mo
333.463 223.719 li
330.269 225.577 li
330.258 228.559 li
333.465 226.707 li
cp
.776471 .545098 .317647 rgb
f
367.119 200.021 mo
356.557 210.099 li
330.287 225.547 li
329.861 225.295 li
339.954 214.795 li
366.709 199.784 li
367.119 200.021 li
cp
1 .866667 .658824 rgb
f
356.613 210.189 mo
367.119 200.021 li
340.368 215.039 li
330.287 225.547 li
356.613 210.189 li
cp
.866667 .658824 .4 rgb
f
329.648 255.373 mo
330.287 225.547 li
329.81 225.276 li
320.353 235.165 li
320.179 265.539 li
320.566 265.763 li
329.648 255.373 li
cp
.666667 .407843 .219608 rgb
f
330.194 255.283 mo
330.287 225.547 li
320.742 235.391 li
320.566 265.763 li
329.835 255.903 li
330.194 255.283 li
cp
.929412 .784314 .576471 rgb
f
115.566 179.648 mo
92.7173 166.455 li
120.701 150.271 li
143.55 163.462 li
115.566 179.648 li
.909804 .909804 .909804 rgb
f
170.246 91.0093 mo
147.904 103.899 li
144.813 105.69 li
121.883 118.919 li
121.892 176.003 li
144.813 162.765 li
147.904 160.984 li
170.264 148.076 li
170.264 90.9917 li
170.246 91.0093 li
cp
.866667 .658824 .4 rgb
f
121.889 118.92 mo
117.951 116.685 li
117.951 173.658 li
121.888 176.006 li
121.889 118.92 li
cp
.737255 .486275 .27451 rgb
f
166.228 88.6841 mo
143.905 101.628 li
140.813 103.419 li
117.955 116.683 li
121.883 118.919 li
144.777 105.708 li
147.869 103.917 li
170.246 91.0005 li
166.228 88.6841 li
cp
.976471 .788235 .541176 rgb
f
147.904 103.899 mo
147.904 160.984 li
144.813 162.765 li
144.813 105.69 li
147.904 103.899 li
cp
.607843 .454902 .317647 rgb
f
147.869 103.917 mo
144.777 105.708 li
140.813 103.419 li
143.905 101.628 li
147.869 103.917 li
cp
.792157 .686275 .560784 rgb
f
160.209 112.379 mo
159.819 112.605 159.504 113.152 159.504 113.601 cv
159.504 119.589 li
159.504 120.036 159.819 120.217 160.209 119.995 cv
165.39 117.002 li
165.78 116.779 166.096 116.229 166.096 115.78 cv
166.14 109.797 li
166.14 109.346 165.824 109.162 165.436 109.388 cv
160.209 112.379 li
cp
165.39 117.329 mo
160.209 120.321 li
159.664 120.637 159.22 120.38 159.222 119.75 cv
159.22 113.765 li
159.22 113.138 159.664 112.372 160.209 112.054 cv
165.436 109.061 li
165.981 108.747 166.424 109.003 166.424 109.633 cv
166.38 115.618 li
166.38 116.246 165.936 117.013 165.39 117.329 cv
cp
.309804 .180392 .0862745 rgb
f
162.8 117.19 mo
162.721 117.238 162.658 117.202 162.658 117.111 cv
162.658 112.827 li
162.8 112.583 li
162.876 112.537 162.941 112.573 162.941 112.664 cv
162.941 116.948 li
162.941 117.039 162.876 117.149 162.8 117.19 cv
cp
f
163.442 116.821 mo
162.155 117.565 li
162.015 117.483 li
162.015 117.393 162.078 117.284 162.155 117.238 cv
163.442 116.498 li
163.521 116.45 163.584 116.486 163.584 116.579 cv
163.442 116.821 li
cp
f
164.165 111.4 mo
164.165 113.4 li
164.165 113.941 163.784 114.598 163.318 114.868 cv
162.282 115.47 li
161.813 115.737 161.435 115.521 161.435 114.977 cv
161.435 112.979 li
161.95 112.682 li
161.95 114.827 li
162.089 114.903 li
162.231 114.662 li
162.231 112.519 li
164.165 111.4 li
cp
f
153.857 118.725 mo
154.877 119.312 li
153.86 121.078 li
153.857 118.725 li
cp
f
156.23 116.971 mo
155.234 118.694 li
154.243 118.117 li
156.23 116.971 li
cp
f
155.234 119.518 mo
156.324 120.152 li
154.147 121.406 li
155.234 119.518 li
cp
f
156.657 117.058 mo
156.657 119.514 li
155.595 118.9 li
156.657 117.058 li
cp
f
157.08 120.375 mo
153.215 118.146 li
153.394 117.834 li
157.259 120.068 li
157.08 120.375 li
cp
f
153.393 122.51 mo
153.215 122.402 li
157.08 115.705 li
157.259 115.811 li
153.393 122.51 li
cp
f
157.297 119.589 mo
157.043 119.734 li
157.043 116.503 li
157.297 116.356 li
157.297 119.589 li
cp
f
153.431 121.822 mo
153.175 121.967 li
153.175 118.734 li
153.431 118.59 li
153.431 121.822 li
cp
f
158.674 117.286 mo
158.049 117.648 li
158.049 117.428 li
158.674 117.064 li
158.674 117.286 li
cp
f
158.188 116.909 mo
157.367 117.934 li
158.188 118.004 li
158.188 116.909 li
cp
f
152.471 120.868 mo
151.844 121.23 li
151.844 121.01 li
152.471 120.648 li
152.471 120.868 li
cp
f
152.333 121.385 mo
153.154 120.363 li
152.333 120.292 li
152.333 121.385 li
cp
f
152.559 116.883 mo
152.208 117.086 151.923 117.578 151.923 117.982 cv
151.925 124.166 li
151.925 124.568 152.208 124.733 152.559 124.533 cv
157.916 121.441 li
158.264 121.237 158.55 120.746 158.55 120.342 cv
158.55 114.156 li
158.55 113.752 158.264 113.589 157.915 113.792 cv
152.559 116.883 li
cp
157.915 121.734 mo
152.559 124.825 li
152.068 125.108 151.67 124.879 151.672 124.314 cv
151.67 118.129 li
151.67 117.563 152.068 116.873 152.559 116.59 cv
157.916 113.5 li
158.404 113.214 158.803 113.445 158.803 114.01 cv
158.803 120.196 li
158.803 120.76 158.405 121.45 157.915 121.734 cv
cp
f
166.437 105.723 mo
156.039 111.727 li
156.039 102.787 li
166.437 96.7832 li
166.437 105.723 li
cp
.898039 .878431 .862745 rgb
f
165.449 99.4629 mo
157.025 104.325 li
157.025 103.325 li
165.449 98.4639 li
165.449 99.4629 li
cp
.309804 .180392 .0862745 rgb
f
165.449 101.259 mo
157.025 106.123 li
157.025 105.686 li
165.449 100.821 li
165.449 101.259 li
cp
.698039 .682353 .670588 rgb
f
165.449 102.437 mo
157.025 107.298 li
157.025 106.857 li
165.449 101.995 li
165.449 102.437 li
cp
f
165.449 103.701 mo
157.025 108.565 li
157.025 108.122 li
165.449 103.259 li
165.449 103.701 li
cp
f
165.449 104.875 mo
157.025 109.738 li
157.025 109.297 li
165.449 104.436 li
165.449 104.875 li
cp
f
342.326 80.6445 mo
298.78 55.5025 li
328.749 38.2007 li
372.293 63.3408 li
342.326 80.6445 li
.909804 .909804 .909804 rgb
f
356.714 16.9058 mo
353.475 15.0361 li
340.154 7.34326 li
317.007 20.5854 li
330.425 28.3374 li
330.945 28.6406 li
333.665 30.2163 li
352.115 40.8647 li
375.242 27.623 li
375.251 27.6128 li
356.714 16.9058 li
cp
1 .866667 .658824 rgb
f
340.15 7.87744 mo
317.941 20.5894 li
352.118 40.1763 li
374.328 27.6104 li
340.15 7.87744 li
cp
.976471 .788235 .541176 rgb
f
352.115 40.855 mo
352.115 75.0132 li
337.042 66.3804 li
333.665 64.4526 li
330.945 62.896 li
330.417 62.5928 li
317.007 54.9097 li
317.007 20.5854 li
330.945 28.6406 li
337.042 32.1543 li
352.115 40.855 li
cp
.737255 .486275 .27451 rgb
f
352.118 40.8618 mo
352.118 75.0132 li
375.241 61.8994 li
375.241 27.6201 li
352.118 40.8618 li
cp
.866667 .658824 .4 rgb
f
361.72 65.4521 mo
361.469 65.5991 li
361.469 61.2236 li
361.72 61.0801 li
361.72 65.4521 li
cp
.309804 .180392 .0862745 rgb
f
362.622 61.5186 mo
362.438 61.8237 li
361.595 61.2632 li
360.751 62.7993 li
360.566 62.7065 li
361.595 60.8364 li
362.622 61.5186 li
cp
f
364.233 64.001 mo
363.983 64.1475 li
363.983 59.7739 li
364.233 59.6284 li
364.233 64.001 li
cp
f
365.136 60.0674 mo
364.954 60.3726 li
364.11 59.8115 li
363.265 61.3472 li
363.081 61.2568 li
364.11 59.3848 li
365.136 60.0674 li
cp
f
365.2 63.5908 mo
360.505 66.2998 li
360.38 66.2251 li
360.505 66.0098 li
365.2 63.3013 li
365.323 63.3735 li
365.2 63.5908 li
cp
f
360.544 60.3711 mo
360.199 60.5742 359.917 61.0591 359.916 61.4585 cv
359.916 66.7856 li
359.916 67.186 360.199 67.3486 360.545 67.1499 cv
365.158 64.4854 li
365.505 64.2837 365.787 63.7979 365.787 63.3984 cv
365.79 58.0713 li
365.787 57.6719 365.505 57.5078 365.158 57.707 cv
360.544 60.3711 li
cp
365.158 64.7749 mo
360.545 67.439 li
360.06 67.7192 359.665 67.4927 359.665 66.9307 cv
359.665 61.605 li
359.665 61.043 360.06 60.3594 360.545 60.0791 cv
365.158 57.415 li
365.644 57.1372 366.04 57.3638 366.04 57.9243 cv
366.04 63.2539 li
366.04 63.8135 365.644 64.4961 365.158 64.7749 cv
cp
f
369.75 61.3901 mo
369.624 61.3179 li
369.624 57.5054 li
369.75 57.2866 li
369.876 57.3599 li
369.877 61.1758 li
369.75 61.3901 li
cp
f
367.445 56.3735 mo
367.097 56.5723 366.816 57.0625 366.815 57.4595 cv
366.815 62.7891 li
366.815 63.1885 367.097 63.3525 367.445 63.1509 cv
372.058 60.4888 li
372.404 60.2871 372.684 59.8003 372.684 59.4009 cv
372.687 54.0723 li
372.684 53.6714 372.404 53.5103 372.058 53.7095 cv
367.445 56.3735 li
cp
372.058 60.7783 mo
367.445 63.4429 li
366.958 63.7231 366.563 63.4937 366.563 62.9346 cv
366.563 57.6074 li
366.563 57.0464 366.958 56.3647 367.445 56.0811 cv
372.058 53.4175 li
372.542 53.1367 372.939 53.3662 372.939 53.9282 cv
372.939 59.2554 li
372.939 59.8159 372.542 60.4995 372.058 60.7783 cv
cp
f
371.655 57.5444 mo
371.474 56.8408 370.691 56.6836 369.75 57.2261 cv
368.809 57.771 368.027 58.832 367.846 59.7451 cv
371.655 57.5444 li
cp
f
369.087 57.1279 mo
368.961 57.0547 li
368.961 56.126 li
369.087 55.9097 li
369.211 55.9795 li
369.211 56.9092 li
369.087 57.1279 li
cp
f
369.75 56.7441 mo
369.624 56.6709 li
369.624 55.7407 li
369.75 55.5249 li
369.876 55.5967 li
369.876 56.5264 li
369.75 56.7441 li
cp
f
370.414 56.3618 mo
370.29 56.2896 li
370.29 55.3584 li
370.414 55.1411 li
370.539 55.2129 li
370.539 56.1455 li
370.414 56.3618 li
cp
f
333.665 30.2261 mo
333.665 64.4526 li
330.945 62.896 li
330.417 62.5928 li
330.417 28.3569 li
333.665 30.2261 li
cp
.607843 .454902 .317647 rgb
f
363.417 34.334 mo
363.417 48.082 li
366.665 46.23 li
366.665 32.4722 li
363.417 34.334 li
cp
.647059 .482353 .345098 rgb
f
356.714 16.9058 mo
350.617 20.439 li
347.367 22.3179 li
333.734 30.1772 li
333.665 30.2163 li
333.646 30.2261 li
330.396 28.3569 li
330.425 28.3374 li
330.495 28.3076 li
344.119 20.439 li
347.367 18.5596 li
353.475 15.0361 li
356.714 16.9058 li
cp
.792157 .686275 .560784 rgb
f
328.4 14.061 mo
339.463 20.4355 li
342.709 22.3154 li
356.341 30.1738 li
363.418 34.376 li
366.665 32.5059 li
359.587 28.3037 li
345.956 20.4355 li
342.709 18.5552 li
331.636 12.1992 li
328.4 14.061 li
cp
f
372.023 49.1436 mo
359.291 56.4956 li
359.291 45.5474 li
372.023 38.1953 li
372.023 49.1436 li
cp
.898039 .878431 .862745 rgb
f
370.814 41.4775 mo
360.498 47.4321 li
360.498 46.208 li
370.814 40.2549 li
370.814 41.4775 li
cp
.309804 .180392 .0862745 rgb
f
370.814 43.6782 mo
360.498 49.6338 li
360.498 49.0981 li
370.814 43.1411 li
370.814 43.6782 li
cp
.698039 .682353 .670588 rgb
f
370.814 45.1196 mo
360.498 51.0732 li
360.498 50.5317 li
370.814 44.5781 li
370.814 45.1196 li
cp
f
370.814 46.6675 mo
360.498 52.6235 li
360.498 52.082 li
370.814 46.1265 li
370.814 46.6675 li
cp
f
370.814 48.106 mo
360.498 54.0605 li
360.498 53.5215 li
370.814 47.5669 li
370.814 48.106 li
cp
f
264.708 94.5522 mo
257.176 94.5522 li
272.907 103.638 li
282.439 105.234 li
282.88 104.85 li
264.708 94.5522 li
cp
.666667 .407843 .219608 rgb
f
264.132 94.1377 mo
254.13 92.3472 li
272.769 103.217 li
282.88 104.85 li
264.132 94.1377 li
cp
.866667 .658824 .4 rgb
f
223.587 177.298 mo
199.591 163.442 li
216.106 153.908 li
240.1 167.761 li
223.587 177.298 li
.909804 .909804 .909804 rgb
f
265.664 98.8706 mo
262.51 97.0498 li
254.569 92.4644 li
209.636 118.429 li
217.543 122.998 li
220.713 124.827 li
228.984 129.599 li
273.9 103.634 li
265.664 98.8706 li
cp
1 .866667 .658824 rgb
f
265.41 99.022 mo
262.257 97.1934 li
254.569 92.7593 li
210.152 118.429 li
217.831 122.829 li
221.009 124.65 li
228.984 129.219 li
273.402 103.634 li
265.41 99.022 li
cp
.666667 .407843 .219608 rgb
f
254.514 92.791 mo
210.152 118.429 li
217.831 122.829 li
221.009 124.65 li
228.984 129.219 li
254.514 114.513 li
254.514 92.791 li
cp
.866667 .658824 .4 rgb
f
228.984 129.591 mo
228.984 174.194 li
220.698 169.448 li
220.679 169.439 li
217.535 167.643 li
217.317 167.518 li
209.636 163.116 li
209.636 118.429 li
228.984 129.591 li
cp
.737255 .486275 .27451 rgb
f
228.983 129.597 mo
228.983 174.194 li
273.904 148.305 li
273.904 103.638 li
228.983 129.597 li
cp
.866667 .658824 .4 rgb
f
260.093 123.756 mo
259.892 123.87 li
259.892 120.376 li
260.093 120.259 li
260.093 123.756 li
cp
.309804 .180392 .0862745 rgb
f
260.815 120.613 mo
260.667 120.854 li
259.994 120.408 li
259.318 121.633 li
259.171 121.561 li
259.994 120.068 li
260.815 120.613 li
cp
f
262.103 122.596 mo
261.903 122.714 li
261.903 119.216 li
262.103 119.102 li
262.103 122.596 li
cp
f
262.824 119.451 mo
262.676 119.696 li
262.003 119.248 li
261.328 120.474 li
261.18 120.402 li
262.003 118.906 li
262.824 119.451 li
cp
f
262.872 122.268 mo
259.123 124.432 li
259.022 124.375 li
259.123 124.2 li
262.872 122.036 li
262.971 122.093 li
262.872 122.268 li
cp
f
259.154 119.696 mo
258.878 119.855 258.653 120.244 258.653 120.563 cv
258.653 124.821 li
258.653 125.14 258.878 125.272 259.154 125.11 cv
262.84 122.984 li
263.119 122.823 263.342 122.434 263.342 122.114 cv
263.342 117.857 li
263.342 117.536 263.119 117.406 262.84 117.567 cv
259.154 119.696 li
cp
262.84 123.216 mo
259.154 125.344 li
258.766 125.567 258.452 125.384 258.452 124.938 cv
258.452 120.68 li
258.452 120.234 258.766 119.688 259.154 119.463 cv
262.84 117.333 li
263.228 117.11 263.543 117.292 263.543 117.74 cv
263.543 121.996 li
263.543 122.443 263.228 122.991 262.84 123.216 cv
cp
f
266.394 120.509 mo
266.294 120.453 li
266.294 117.404 li
266.394 117.231 li
266.495 117.29 li
266.495 120.337 li
266.394 120.509 li
cp
f
264.55 116.499 mo
264.274 116.661 264.049 117.049 264.048 117.37 cv
264.048 121.627 li
264.048 121.946 264.274 122.077 264.55 121.917 cv
268.238 119.789 li
268.513 119.629 268.739 119.239 268.739 118.919 cv
268.739 114.662 li
268.739 114.342 268.513 114.212 268.238 114.373 cv
264.55 116.499 li
cp
268.238 120.021 mo
264.55 122.147 li
264.165 122.372 263.847 122.191 263.848 121.744 cv
263.847 117.486 li
263.847 117.04 264.165 116.493 264.55 116.268 cv
268.238 114.139 li
268.625 113.916 268.94 114.098 268.94 114.545 cv
268.94 118.804 li
268.94 119.25 268.625 119.796 268.238 120.021 cv
cp
f
267.916 117.438 mo
267.772 116.874 267.146 116.75 266.394 117.183 cv
265.642 117.616 265.016 118.465 264.872 119.196 cv
267.916 117.438 li
cp
f
265.865 117.103 mo
265.764 117.045 li
265.764 116.301 li
265.865 116.128 li
265.964 116.187 li
265.964 116.93 li
265.865 117.103 li
cp
f
266.394 116.797 mo
266.294 116.741 li
266.294 115.996 li
266.394 115.823 li
266.495 115.88 li
266.495 116.623 li
266.394 116.797 li
cp
f
266.924 116.492 mo
266.824 116.433 li
266.824 115.69 li
266.924 115.517 li
267.026 115.574 li
267.026 116.317 li
266.924 116.492 li
cp
f
264.536 123.306 mo
264.257 123.467 264.034 123.856 264.034 124.175 cv
264.034 128.435 li
264.034 128.753 264.257 128.881 264.536 128.724 cv
268.221 126.595 li
268.498 126.436 268.723 126.045 268.723 125.725 cv
268.754 121.468 li
268.754 121.148 268.529 121.017 268.253 121.178 cv
264.536 123.306 li
cp
268.221 126.827 mo
264.536 128.956 li
264.146 129.181 263.832 128.998 263.833 128.549 cv
263.832 124.292 li
263.832 123.846 264.146 123.301 264.536 123.075 cv
268.253 120.945 li
268.64 120.722 268.956 120.903 268.956 121.353 cv
268.925 125.61 li
268.925 126.057 268.609 126.602 268.221 126.827 cv
cp
f
266.378 126.728 mo
266.278 126.672 li
266.278 123.625 li
266.378 123.451 li
266.478 123.509 li
266.478 126.557 li
266.378 126.728 li
cp
f
266.833 126.466 mo
265.919 126.995 li
265.819 126.937 li
265.919 126.762 li
266.833 126.236 li
266.935 126.294 li
266.833 126.466 li
cp
f
267.349 122.61 mo
267.349 124.032 li
267.349 124.417 267.078 124.884 266.747 125.077 cv
266.01 125.505 li
265.674 125.695 265.406 125.541 265.406 125.154 cv
265.406 123.733 li
265.773 123.521 li
265.773 125.047 li
265.873 125.103 li
265.974 124.929 li
265.974 123.405 li
267.349 122.61 li
cp
f
260.016 127.82 mo
260.741 128.237 li
260.018 129.494 li
260.016 127.82 li
cp
f
261.705 126.572 mo
260.996 127.798 li
260.291 127.388 li
261.705 126.572 li
cp
f
260.996 128.385 mo
261.771 128.835 li
260.223 129.728 li
260.996 128.385 li
cp
f
262.008 126.634 mo
262.008 128.382 li
261.252 127.945 li
262.008 126.634 li
cp
f
262.308 128.995 mo
259.559 127.408 li
259.686 127.187 li
262.436 128.776 li
262.308 128.995 li
cp
f
259.685 130.512 mo
259.559 130.437 li
262.308 125.672 li
262.436 125.747 li
259.685 130.512 li
cp
f
262.463 128.435 mo
262.283 128.539 li
262.283 126.24 li
262.463 126.136 li
262.463 128.435 li
cp
f
259.713 130.024 mo
259.531 130.127 li
259.531 127.826 li
259.713 127.724 li
259.713 130.024 li
cp
f
263.443 126.797 mo
262.999 127.055 li
262.999 126.897 li
263.443 126.639 li
263.443 126.797 li
cp
f
263.097 126.528 mo
262.513 127.257 li
263.097 127.308 li
263.097 126.528 li
cp
f
259.03 129.345 mo
258.583 129.603 li
258.583 129.446 li
259.03 129.188 li
259.03 129.345 li
cp
f
258.932 129.713 mo
259.515 128.986 li
258.932 128.935 li
258.932 129.713 li
cp
f
259.093 126.51 mo
258.842 126.654 258.64 127.004 258.64 127.292 cv
258.641 131.691 li
258.641 131.977 258.842 132.094 259.093 131.953 cv
262.904 129.752 li
263.151 129.607 263.355 129.258 263.355 128.97 cv
263.355 124.569 li
263.355 124.283 263.151 124.167 262.903 124.311 cv
259.093 126.51 li
cp
262.903 129.96 mo
259.093 132.16 li
258.744 132.362 258.46 132.198 258.461 131.796 cv
258.46 127.396 li
258.46 126.993 258.744 126.502 259.093 126.301 cv
262.904 124.103 li
263.25 123.899 263.535 124.064 263.535 124.466 cv
263.535 128.867 li
263.535 129.268 263.251 129.759 262.903 129.96 cv
cp
f
209.96 118.366 mo
199.069 128.89 li
199.03 128.88 li
199.03 129.313 li
217.941 140.646 li
228.98 129.602 li
228.98 129.144 li
209.96 118.366 li
cp
.866667 .658824 .4 rgb
f
210.232 118.432 mo
209.636 118.429 li
199.069 128.89 li
217.941 140.197 li
228.98 129.144 li
210.232 118.432 li
cp
.929412 .784314 .576471 rgb
f
269.065 140.344 mo
258.146 146.649 li
258.146 137.261 li
269.065 130.956 li
269.065 140.344 li
cp
.898039 .878431 .862745 rgb
f
268.028 133.771 mo
259.181 138.877 li
259.181 137.827 li
268.028 132.722 li
268.028 133.771 li
cp
.309804 .180392 .0862745 rgb
f
268.028 135.658 mo
259.181 140.765 li
259.181 140.306 li
268.028 135.197 li
268.028 135.658 li
cp
.698039 .682353 .670588 rgb
f
268.028 136.894 mo
259.181 142 li
259.181 141.535 li
268.028 136.43 li
268.028 136.894 li
cp
f
268.028 138.221 mo
259.181 143.329 li
259.181 142.864 li
268.028 137.757 li
268.028 138.221 li
cp
f
268.028 139.455 mo
259.181 144.562 li
259.181 144.099 li
268.028 138.992 li
268.028 139.455 li
cp
f
254.281 92.6084 mo
247.361 84.4326 li
202.864 109.908 li
202.864 110.444 li
209.636 118.429 li
210.163 118.429 li
254.287 92.9146 li
254.281 92.6084 li
cp
.737255 .486275 .27451 rgb
f
202.864 109.916 mo
210.163 118.429 li
254.58 92.7559 li
254.573 92.4502 li
247.62 84.1577 li
202.864 109.916 li
cp
.929412 .784314 .576471 rgb
f
237.57 122.838 mo
228.98 129.219 li
228.98 129.676 li
273.736 103.464 li
280.613 98.4102 li
280.343 98.1094 li
237.57 122.838 li
cp
f
237.57 123.296 mo
228.98 129.676 li
273.736 103.921 li
280.613 98.4102 li
237.57 123.296 li
cp
.807843 .584314 .341176 rgb
f
332.032 178.551 mo
291.692 155.203 li
331.662 132.146 li
372 155.495 li
332.032 178.551 li
.909804 .909804 .909804 rgb
f
360.437 100.513 mo
358.229 99.2461 li
357.949 99.0879 li
356.114 98.0352 li
342.681 90.2759 li
308.101 110.238 li
321.535 117.999 li
323.1 118.893 li
323.379 119.061 li
325.867 120.485 li
340.697 129.056 li
375.21 109.093 li
375.239 109.084 li
360.437 100.513 li
cp
1 .866667 .658824 rgb
f
342.681 90.9688 mo
309.311 110.24 li
340.7 128.153 li
374.032 109.081 li
342.681 90.9688 li
cp
.976471 .788235 .541176 rgb
f
340.7 129.051 mo
340.661 173.452 li
325.764 164.951 li
321.439 162.482 li
308.101 154.867 li
308.101 110.24 li
340.7 129.051 li
cp
.737255 .486275 .27451 rgb
f
340.694 129.049 mo
340.655 173.453 li
375.251 153.666 li
375.251 109.094 li
340.694 129.049 li
cp
.866667 .658824 .4 rgb
f
354.787 133.347 mo
354.425 133.553 li
354.425 127.302 li
354.784 127.092 li
354.787 133.347 li
cp
.309804 .180392 .0862745 rgb
f
356.076 127.724 mo
355.812 128.155 li
354.608 127.356 li
353.398 129.55 li
353.136 129.419 li
354.608 126.747 li
356.076 127.724 li
cp
f
358.38 131.271 mo
358.024 131.481 li
358.024 125.223 li
358.38 125.019 li
358.38 131.271 li
cp
f
359.671 125.645 mo
359.406 126.082 li
358.202 125.278 li
356.996 127.475 li
356.73 127.346 li
358.202 124.668 li
359.671 125.645 li
cp
f
359.756 130.685 mo
353.05 134.557 li
352.951 134.612 352.868 134.567 352.868 134.453 cv
352.868 134.336 352.951 134.199 353.05 134.141 cv
359.756 130.267 li
359.857 130.212 359.936 130.258 359.936 130.371 cv
359.936 130.487 359.857 130.625 359.756 130.685 cv
cp
f
353.105 126.082 mo
352.61 126.366 352.206 127.065 352.206 127.634 cv
352.206 135.253 li
352.206 135.825 352.61 136.058 353.105 135.77 cv
359.703 131.964 li
360.197 131.676 360.6 130.978 360.598 130.408 cv
360.6 122.79 li
360.6 122.217 360.197 121.985 359.703 122.273 cv
353.105 126.082 li
cp
359.703 132.378 mo
353.105 136.187 li
352.41 136.587 351.848 136.26 351.848 135.461 cv
351.848 127.843 li
351.848 127.043 352.41 126.066 353.105 125.666 cv
359.703 121.855 li
360.394 121.455 360.958 121.782 360.958 122.583 cv
360.958 130.199 li
360.958 131 360.394 131.977 359.703 132.378 cv
cp
f
366.058 127.538 mo
365.96 127.595 365.879 127.548 365.879 127.436 cv
365.879 121.981 li
365.879 121.869 365.96 121.73 366.058 121.671 cv
366.158 121.614 366.24 121.659 366.24 121.775 cv
366.24 127.228 li
366.24 127.341 366.158 127.482 366.058 127.538 cv
cp
f
362.76 120.363 mo
362.266 120.651 361.865 121.347 361.862 121.92 cv
361.862 129.537 li
361.862 130.108 362.266 130.341 362.76 130.056 cv
369.358 126.247 li
369.852 125.962 370.256 125.263 370.256 124.69 cv
370.256 117.075 li
370.256 116.501 369.852 116.269 369.358 116.558 cv
362.76 120.363 li
cp
369.358 126.664 mo
362.76 130.47 li
362.069 130.871 361.504 130.547 361.504 129.746 cv
361.504 122.128 li
361.504 121.328 362.069 120.35 362.76 119.95 cv
369.358 116.14 li
370.053 115.739 370.616 116.066 370.616 116.867 cv
370.616 124.485 li
370.616 125.284 370.053 126.261 369.358 126.664 cv
cp
f
368.782 122.042 mo
368.524 121.034 367.404 120.811 366.058 121.585 cv
364.714 122.36 363.594 123.88 363.336 125.188 cv
368.782 122.042 li
cp
f
365.109 121.442 mo
365.012 121.5 364.929 121.455 364.929 121.34 cv
364.929 120.01 li
364.929 119.894 365.012 119.756 365.109 119.699 cv
365.208 119.643 365.292 119.686 365.292 119.802 cv
365.292 121.133 li
365.292 121.246 365.208 121.387 365.109 121.442 cv
cp
f
366.058 120.897 mo
365.96 120.951 365.879 120.905 365.879 120.792 cv
365.879 119.463 li
365.879 119.346 365.96 119.208 366.058 119.149 cv
366.158 119.092 366.237 119.137 366.237 119.254 cv
366.237 120.583 li
366.237 120.701 366.158 120.839 366.058 120.897 cv
cp
f
367.005 120.349 mo
366.911 120.406 366.826 120.357 366.826 120.243 cv
366.826 118.915 li
366.826 118.796 366.911 118.659 367.005 118.605 cv
367.106 118.546 367.189 118.592 367.189 118.706 cv
367.189 120.036 li
367.189 120.151 367.11 120.29 367.005 120.349 cv
cp
f
362.732 132.541 mo
362.238 132.829 361.833 133.525 361.837 134.098 cv
361.833 141.716 li
361.837 142.29 362.238 142.519 362.732 142.234 cv
369.331 138.425 li
369.825 138.14 370.225 137.442 370.225 136.871 cv
370.283 129.255 li
370.283 128.679 369.882 128.447 369.383 128.735 cv
362.732 132.541 li
cp
369.331 138.842 mo
362.732 142.651 li
362.037 143.052 361.476 142.724 361.476 141.924 cv
361.476 134.306 li
361.476 133.507 362.037 132.53 362.732 132.127 cv
369.383 128.318 li
370.078 127.92 370.644 128.245 370.644 129.045 cv
370.586 136.664 li
370.586 137.464 370.024 138.441 369.331 138.842 cv
cp
f
366.029 138.666 mo
365.928 138.725 365.85 138.679 365.85 138.566 cv
365.85 133.111 li
365.85 132.997 365.928 132.859 366.029 132.802 cv
366.128 132.743 366.207 132.79 366.207 132.906 cv
366.207 138.356 li
366.207 138.471 366.128 138.611 366.029 138.666 cv
cp
f
366.845 138.195 mo
365.211 139.143 li
365.112 139.2 365.03 139.152 365.03 139.037 cv
365.03 138.924 365.112 138.783 365.211 138.725 cv
366.845 137.782 li
366.949 137.723 367.028 137.769 367.028 137.886 cv
367.028 137.999 366.949 138.14 366.845 138.195 cv
cp
f
367.769 131.297 mo
367.769 133.84 li
367.769 134.53 367.281 135.367 366.691 135.709 cv
365.371 136.474 li
364.771 136.815 364.292 136.538 364.292 135.847 cv
364.292 133.305 li
364.948 132.927 li
364.948 135.655 li
364.948 135.765 365.027 135.815 365.126 135.756 cv
365.223 135.7 365.305 135.557 365.305 135.446 cv
365.305 132.72 li
367.769 131.297 li
cp
f
354.648 140.618 mo
355.948 141.366 li
354.652 143.614 li
354.648 140.618 li
cp
f
357.669 138.385 mo
356.402 140.578 li
355.138 139.846 li
357.669 138.385 li
cp
f
356.402 141.628 mo
357.788 142.433 li
355.015 144.033 li
356.402 141.628 li
cp
f
358.213 138.495 mo
358.213 141.624 li
356.857 140.843 li
358.213 138.495 li
cp
f
358.75 142.723 mo
353.827 139.882 li
354.057 139.485 li
358.979 142.327 li
358.75 142.723 li
cp
f
354.057 145.435 mo
353.827 145.3 li
358.75 136.776 li
358.979 136.908 li
354.057 145.435 li
cp
f
359.027 141.719 mo
358.704 141.905 li
358.704 137.79 li
359.027 137.603 li
359.027 141.719 li
cp
f
354.104 144.56 mo
353.777 144.747 li
353.777 140.63 li
354.104 140.446 li
354.104 144.56 li
cp
f
360.781 138.788 mo
359.982 139.249 li
359.982 138.967 li
360.781 138.507 li
360.781 138.788 li
cp
f
360.158 138.308 mo
359.115 139.611 li
360.158 139.703 li
360.158 138.308 li
cp
f
352.882 143.347 mo
352.083 143.807 li
352.083 143.529 li
352.882 143.066 li
352.882 143.347 li
cp
f
352.708 144.005 mo
353.752 142.705 li
352.708 142.611 li
352.708 144.005 li
cp
f
352.994 138.272 mo
352.549 138.532 352.183 139.159 352.183 139.672 cv
352.188 147.545 li
352.188 148.059 352.549 148.269 352.994 148.011 cv
359.814 144.076 li
360.258 143.816 360.62 143.192 360.62 142.678 cv
360.62 134.804 li
360.62 134.288 360.258 134.08 359.81 134.338 cv
352.994 138.272 li
cp
359.81 144.449 mo
352.994 148.384 li
352.371 148.744 351.862 148.451 351.865 147.731 cv
351.862 139.859 li
351.862 139.139 352.371 138.262 352.994 137.9 cv
359.814 133.965 li
360.433 133.604 360.941 133.899 360.941 134.617 cv
360.941 142.492 li
360.941 143.21 360.437 144.087 359.81 144.449 cv
cp
f
316.861 125.186 mo
316.861 126.08 317.491 127.17 318.265 127.616 cv
326.073 132.124 li
326.848 132.571 327.476 132.209 327.476 131.314 cv
327.476 130.419 326.846 129.332 326.073 128.884 cv
318.265 124.376 li
317.491 123.929 316.862 124.292 316.861 125.186 cv
cp
f
316.861 125.187 mo
316.861 126.081 317.492 127.171 318.264 127.617 cv
326.071 132.124 li
326.625 132.445 327.106 132.351 327.33 131.943 cv
327.08 132.078 326.74 132.051 326.364 131.833 cv
318.555 127.325 li
317.782 126.879 317.154 125.791 317.154 124.895 cv
317.154 124.639 317.203 124.426 317.296 124.265 cv
317.028 124.406 316.861 124.726 316.861 125.187 cv
cp
.866667 .658824 .4 rgb
f
358.229 99.2461 mo
323.379 119.061 li
323.1 118.893 li
357.949 99.0879 li
358.229 99.2461 li
cp
.737255 .486275 .27451 rgb
f
340.157 129.046 mo
340.157 129.354 li
323.379 119.824 li
323.1 119.666 li
308.456 111.347 li
308.456 111.03 li
323.1 119.35 li
323.379 119.508 li
340.157 129.046 li
cp
.658824 .388235 .184314 rgb
f
323.379 119.061 mo
323.379 119.824 li
323.1 119.666 li
323.1 118.893 li
323.379 119.061 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (AKSANA) ()
%%Title: (1701.i207.022.P.m008.c20.isometric box set.eps)
%%CreationDate: 1/21/2017 3:53 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2OeZLIbe4O<g6c9ai!Qr`Yb,f/-#5b()iljIOo"rt:pbKT$p\A/!E.S8I]FrNB(0X_kV\Ru*R[A6u*RnD,G_H)$1Wmt>:
%>OB2VEk7TA0q"Le2*89Vf`1or_SYp@@F.Y(b.F7]YbdPm*(,MD<h>_VL#:sZbntn3C0(YbT[c9j[];]t=)9hLh;2><psX0C?M`jS
%(I.X;BJeFmk-c1Wob+tflrkduH6XiI]1p&4Zh#(9N>)0`9b4si%e++_4"%X7!$)7A50OK4`o[Ya4'V!3!2Y/\590skoj5E!pZq4t
%QUf]8Y\Wj5O+ND<rrAUljV[p%#_1'`Jhqo'kjpNM;(MFHs!WY./EQRe#jK`<2@ROf+&2[NIfkjKM18PCrdWF6pa>uBcP\a,O)o8:
%_D-/h^t*NkD]Sgc6_?df/^bo,K#^0`e+!58kFc_SJQ_n8l7]Ftn:2F[\1gPpL9uKgb[KN"&Sm"`lG9*.\`\NN$bCqBKl6phr]f>*
%C#L<p!BqJ[K'o+/]appE$0H6e^MMMR#+u`[?>fPV:'EHM[qKdJGL(n*Lh41Q5h`F'>YY4beY$(8Ig.<89FS5a$!PC:[kuJI_a'/T
%j9[WUS85Zu3A-DV3==5GQhW^m/c0[P*sWp5qq_*o]sT2D,\1qn>H^I>WOkXVZqWXFW]sDUGtVY=*W*[XFO0#4BV):&f6(oYOU(u5
%qYd'50kC,PnYNMs[/A)lSDn^m<bs^W:HeVu$cKd`/#1KU(OqEnTt`l0K9!a8!%4u(n3OaA*WPjuYP@#1PCpjTrj^Eo%m%>)ZhAnK
%ZWO06:P7HWT\==.Jb-;)ronY%j\]oX(23-GlW9bjpcWGWpZnA?@la`T]0VJW'u$MOiP0%#h^m[&l30ThFhj^*XZqD,];'Hf6Msk9
%pWi5NZ?1QBn6:?#7t1gAY13K%^\C("W:pR`WETq=%M4I\U,IiOY%XL+C!9Derh(>QPn2a<^h6.X^C%o^2]D/nXN3jOf()\G><gA#
%jTE8I!?+(6eU$1"q6()CE+"taO+&u_gPpN_)0VrF_OiX0Xrhaiq^k"Vm\"cd4)VMH&NtCAnY\oY\paS&e-lsJ:)a3435(k!I?:H"
%Y2?dg=4@"Aq0P*JLi5(@;3e)O2IcS[iF'Q19[bt!Lph)Ad%M\k_j,)!rq-*<$d_eL?,'SS`iMU>mod=-arkmbW:tq#?gVG1*Q$UZ
%L#50M[O`p\UOK<YYVW:"=]lVX@@5(7Gk?.aPYrV%MUh4Zg`$+arak1+3">M$WEr"8_!h7Bo;D9:ia9r"$i[X;6iu`[.M+Gf1,LP(
%]7.%[oqL<AFb:I;cuZ8"T[UeCikP=S&U4$1,1EoQ8%I.pkd5IRDtJhB(l23/62g_U5GDH,Dt7Ko"5.X=WmUXK?L(s/^db]#'J`ff
%q3_8CT@8e:?Pu]8CN:i1aWFKVaRL+<d;l.0+TlVees!tVY^98]F>!J)2BKPX/H]&+BK=h+VbJQ4#Mi;apfc3U4>$>0A#U&`4qWHO
%mA#+NXQOhMHINF7kU_l9CHXBePLlo+Ln4CUT\L!*%"PH_FCq9GUla'GA(DPTpT&`BO%^Nl)c$eg>[HI<l3=pf,E'_g)eN&-UZTe'
%Re(c`*up>?)TnSRVYh,aV;<+:O>5:HXX5?"(o3*XUYQ6f5/\9UE/C#Y$DF6gTN_kKGSlj&7@?+lnb#5"=H>eT%*RaeAjN$?p^+$f
%K!X8/4Hu=%FQT:P1ncT6jeaJk1ZtIe=k<n&\+-J(n'-KqR0_q1j<%tjQHQKPkHWf)QCGp8o2olObPg1*3V.F5Egb:BO]ZKi^BN"i
%2C,.^SqBRH/,1?&**r?Ip7LrY.qrB>r;41iAQh7Z?GBMJrhrb,CSi4ED*BD]:)eg_Q>2/fjrJruldbsbenFEIgMb@[DRD$1]f+\4
%AhApAY>%iqB3QEUYJ&Y&B>'sf`G1e![D#GHc/^?mTIYuOHrW4:n`RmT\0Ya"IQ"Lm#"?-qa]sQmLu+eOk#[21Wh0`o=S''qpa%c$
%`-m+hC>Jf^5+'\L>m?,fX9T3L]DYg/h$R=gcl2mo@L-SdYLmacqYmnlMa!QVJ7F:In:.bd%U5@*R.>J=K)//Sr%A-js-pNZER:kt
%qNYk7Y2u.B`fXB'(#_*qUsjD0]YJo-?tqiWJ%(Ip41cK]V?&II0pb?6AmhB*M,ji0Fu_#Q'#VPUC4Ge0Mu(,WT_?XILJ`<9E*tJp
%VImU^qV?JtU)EU0lm^8F<P60Hnd4ELqK/0TDB+._psWhZYES4AQ(!`"62*K,9$X6APC9.\:4D!^/ETqro.$A3FP(H1o#\h>WD@;A
%^gYBLRfAgD)o[!4Z.0;8s(0iC]^9i8/>(n^F4[VG#?a#;)bu:$[5qW$G:R10gJVdP!Jd)rPKgt*hlK%[bhm5\3u<.j?NrkZKji&-
%ND7))]+)pKL5oY9.kYo)oaaJV\"Fd#dm:KX?eu[oN+Q^N:Z.JW9eGiPY(F?@#NIU3f!MXR>CO.JK0)2jVu&8L?I.EkrmNFGbKLfp
%%*6YMiL03D$:`P`WS/rinUq4@9?8;VdpG@\.no,?#-jU;D3Y-ilY*?@ChdM55V$19X]Ee.$6&QL7[F"[Thd"hhdM8a[Hlj3r5jVo
%9r["82#M*=c`t.T4#:SkRQbh[@I%kZ,+[qkUtj=X/GA+KK^$N.%]O8(eJ`GmD,c7[g?dIj$!]0/;`]rRk&lrPQu;kgM&4XT3jP9`
%SB:Xl1*d*:B@UW[k-gVSS7O8#3MVAOZ;_r(-Kn0_ZMnT:/i_1Q4[cnRToq\uqs>s&?$h/_A7.nZb7-PGeYLQ*e6@KrTcUr52lcY1
%Ad3XWVGh<(cFWCTQ6f>O-A@64ps]826-d9so_iYsX2J4;$Dge8PsHSje`ref\>"pN`CXo/.C?YeL#*\$X4?M1H=dr*_PWO6.YAP8
%U*^+p77`BX0A_/PObM\m2`"%[nkIBe(0o(lim'&OVBS:+hPNo0/BH%-qI3cf1/7St9Th:#C]0Q#U>4`u"1-e)2KQ8Se_=&]Op.7V
%0g.=!MitoaS<7!>9L:W8[4&N$GZJ`]/P6dhk-ZW/>*ONRg<=>0VC^:9;h/mMCJcj$`2U4C\#C,h$So'J;9sP?8g[k<qs(\n[4'S[
%</ZnCR9<\c^N5`R(2IY?na[T%A!4KpmE>)V<HubK0mf6cbRPk8F;C(1_6(;`YcrIPU,udYIWL6W(@>1hN8OQ1T8?oWG3^2V^?."'
%F1l`;]k5U`=p>V`p"EZSc1TdakdBe15j%Lgm;ge[AEmF#c*c9?>H?#>[9Maoc*c81X8T*,R^s_c14fDkBd61R')_$\lqD6rcBlrO
%Q]X(27N"`N?UjWu'U'D-b?5\ipc-]WR;2M][Zg:%r\[IZ*Rt)r)@$`OkK*kP4AM@sGCsLSj>m$=]=ausWWd&.f'%lJ@qAr:_!dUF
%h&W5sSJ5hJk[#0n"d^+:e>:d5CL+rT1/jONbV)?*_Pd3@-oZk132c#MhLmX%op91S\s?hAr*.@\s46.Aq!U9A+a5`_67*M">j'+n
%Blf8Of:.6h5bL3,qV4aTNR(91Il;EJNFi$oYsgD?-d"q/W`e.Hb.(oX>sDEFbtbkUU$M\cPb._?I5XYc:mBVWU__%5-b:9t6DH:<
%)bhl7O9(,6HV-"4bR(l+)0!ZkJ1i:KJ$\WQ'V7$!f]7"]VIr$a2UV!Eq\RMMT>eapP\n();4/jPGsdoOh?kJfM]38[jR(/*"3jX<
%c1c_NqnLUjs#Ydi#H(:^kPN$crSRGMn))"B<^,e'huB89s3C@gDqo]X*FN/WcfdsGpO&kqZSgk?P51^<I*[#NkBgKXr!XL'p7L@_
%d\rdFoV')n'sFR[^msHj'6CsqY+;>HGJ2%#:GGnXqUsPp(DPUUE(O8:<5['!'D!+tW:E7K$lm-c9T(j%Enr\AQ<))K/M]qd0q)ar
%_T6;[+e*,cIZ#YE5C5K<ONfRlo*eduU<4$jb^Q">7q(`Hh&pC5K9mFVKC,\2\(CYY[i7V_]c5JPgKhQOEaO0b5F[>fE\jLIrVtE;
%KDqgY'P"Es>>@ctm0r1]%JVMbr_.#fiA=9.:(_=H[E1gP;bB1!W!KdhP@>'FkVhU^k/iCX:-S;25o!Y,mZ!bWQsQa*QuE#T!>dXm
%7W8'cM'88&[`I-.,@rn5aZT)K:V=mb0D!-*4Rk1CioZ)a)q!I4`66@O?::69-XK1VL@R"h`6/ibT_$+FFV6?kdiZ&sc=^l)84Ol^
%RHY..D*(XBl`QYc<g%$c17G"NRdJ9FZ<Rqp^MI@?E1$@B-F-mD1$t<%A1p??I]I^/0:KDeV`Z<eX7m/&qT+']gc/'66CSq7l/9Id
%)op]P'@Sh6P.?.6IY0C3[W-`ue*X_tko+r?hnCq^I;)SgqQIH-kifme[Jua];KLSfj_))GC47X^C0Z@Y5L,kZTu^DlQV+7)UdQ^@
%%\rAU%#;TpI<eN"p1g4jon#B1L2Ki2W01e1c0l=+s2Go6mr8#E"p<>oRG7R?p,k[RFV,NJ["\#_H4a\g*"!W[b2P-3$T`dgCRH[<
%7(Z#6ZbidPaCOfG-g2%P6R%FU3'i&`hj2<M?ab@*neh'_O"j!Vc-5?*gfol\aF_;lO"n&)m]<PdGogIea-\d1bju\C4N<?@1&a<J
%>2RY*EHU$rZa6fAmJDlEm<Y(EF8jutHA(*M"JtC%Y3)/!1&7Sn]jDeF?AeuWf^?9+aE6],ep:68C&&/Rh44>TT\L!*%"_M;99>?N
%5:PBn>]J422"tG/rK2qHC?(.&W=52rRCQlX$So1smE[F(as<pL^M#$fiB`ZV4,ZgN:C`<Y'gnbcRJ[deR;DCr\)#9&#,p4N0UZ:6
%PXXToQR1H%<`pEnhg/APjH;aZ\MiZK&jOEhmcgAF[%?BTi;E;4&\(O6pfaOK@7F/&f/r%N:R#Gto5@^H=!i$$Uu3a2.T9[APm)ke
%Z.F)6,t*d7af'P'r^E6Or]%B'f!Z60GpZk0]rCc8V+3>.M9"_#ql4i%Z.tEER)a7Ipo9`PF7X'_*mMs)\Tp"jN5E=aR`jV,htCaO
%(7'a3noue)]b*%=c=Oe-*mW$J\Tp.n&*N*6gqPq@ZYii(QO03#$0P@A/I:RG+YaMlVB_m`f5B3c]7(MOGh_8hg\,;HL6u@t+iEB%
%>\#r^59nLic2>6foD:9*pI`Zf]b1uHme/'4hfD*'A<P=LE9-dm`+u7[^O!G^j.LS9YL`S8f.po%Hi9Rr/6Q`8DGkMAn\sUX=[sA"
%R?_>_7_tS9<V6%RM4#_OVffi"]n6W+[2rWG=M.qND78?Fqsu#\61BVR3d]tgFf$o@q8&jp0(U#]7o_d;UD%E+`E7su;2afW]u$?e
%[S)'(.I8fhP4St71VXi=AQlbB4FmAV1buhT4#;%/q[:9M4Q4PD$u=2h?bJJ@[!<FqS.oK#%+bjj%JVMb\m&l1.?qoX:>em=RrY,n
%Fg<ojCqIm62`VIJ!Ys\(be:P9o]G;-_,Pacf6V7XB"WaIGLT4.\,Ya#><sT[Hh`dRN[EgtY7XM<Ikl5*k"a;53^n+^kdO@K8?Cd<
%G)GDcb#=nD^R!V.GCnu!m_?r6%#44ke>4E?1U,9&`%)3*U\=@j31/0S6P_P,3C,6e_.gV'eL$"QRiDpko:FEL(&`$`J'eZ[4]=%5
%f($0`+ZJ]b"2@#TKUa"%.9:,'j#A',R!.MWKb)XM*3U6FbRNY*)jImMS:0-OM](UO@tW7qo\>DnQlUY2kU^=D,&Z?[5.BiXnQUDd
%d;?U*p/\p#2YQ^5)>;`qr*lCt&)Cg,VI:fn36Q$qT<t4WaEVOca"48a2OoJd2>'FS#JTV3;3EiT>(Ve+]Y&!]9t-S$?/EtG^#J)7
%:W,tJ%F+ek)(QT[eu?D0A*#W(P&YPGVMUtPrstZUS`K(.iCbNs%XVeqYN49"fNlDpS9gHN>6u]ta1(Uti7T_,\/oRc?IW)CkFQ>7
%T2lhpiABMpXeM5-W,J0BIX`,TbOt9+o,lH$iP'f1KtB.'S^_]uEr1OZgT9Y[=R-9/PObAH4e,)$Egq_5n)Uk2D&9OL\X6)pbh2;a
%Am5p#%\XF=O$"M.rDrA<b=`1@..c&nbF`E1VVCX2#sXkOh./\5H0QW64&kcOBJei`cJOo=H&:Y-PZZeh%'KC3dR%B/Bd_Z;>5/pI
%_(5_[]P=ncTGP1LBLT_GK(F:]rQB]jo;_Dk^[_*V$Jk[n?<,e`6$^jms4O.(:g+W!_*i]RDdNLB="o+:VPAIDdg3f[>&GG^-0oL=
%TD(N9%cLc?8(UuRgrI(p(oD2g&!guMQ4#o:T'"]#"#CqQZLA*i=gggb=JhF3?bgPi8^I:+ptHkfoGq=hk*VH]RJZVFbLQS"Ilp-U
%_8nL$+I+T)I8rU\80A)dnME>s)aV4\E9%L(&K?eqVISW@?,tN9au8ir"/<$4kEr\&VRlQe&3B%J]9L\GiZT*+s+^`:s5C`m3N/ee
%Dt+k(=sa1GCIIf/#Loq`MXD7<:OmKT^CThK(JgEqM*Dtr78sS5^Rb^2!4S?J%$R8Aq3r!)X+gOtoWrhsDI?QG:L-Bqkbo*3UeC+?
%TF!5pamT=k(/@mV!2UT`NS/u='.p\>)#0(1:brAlLNrj>gMlO-s*WViN;d<53/`3bR\H$t7k8ar*3/^^Wghm&as[_3E,qcY>rYu7
%d-@2"iHKY7A'HAX`]oCk8&O$PikNc$WD;b2I%"hu%4&:aOraf*=%&5\jAMKI:*KW6aL34Ac@T`)?+gZd?@,'rO\L>';#E?tY&mPW
%:9sE$Nqo#8.jGFG-dMYU.ttAqZE".F3upYJGZG'_I_.TDlL.22FKO`$T8D,:'MWaBr?p1@dJ2FkIsO;fCFT#'rgX&cScMRBCXfDo
%7u\H?bF9'Y88ic!g=`(SV3r`mmnNn8Ng83JArT55dpp$IOm"g^aeQ=S1+.!#L-?BfZ%^L\Mk<q"QgWs@cPS=$@k48K*2Wih^h9_(
%^'^L]FrrgU$s328p%.^q8=Icl7oSGIOLF6G=*h<"3kPeRG#L,VB$g9fi,8LJa`tQ_R<pfRNQEGe9'aCqKjD]=@:f`aV*QJ1DL_io
%Xe;.FkQ\_nT2WU/Aqdda_QK5P)>#P%LOQEKFR/t%XBk6Jkd;@^YZ;@#\eb0RJ'dWmqVscf"GP:d=7KMX"91L)*OIn\Na*f#rF"8u
%e;dn:7G[Mlh=Q&\a`ZJ+[/7sgI\YaunXrJ(3q^,cRK?H*2nBU7$bNsdT\g6A%$KEZ>*:>Fb8(6/D'6uH[iHYLU2:nVjnFBI\@%R6
%(iJa&3dq=$f;gh8%:>g.*n&Q]ol24ij*1$D2[ioo61]&aQ>Yujdb+$^:YU?-QD;Y$F#j^n#SQH<\6[\2cFZBP0ZH$=LA;&.Z4(Mj
%;l3<1Cg2#l@iIpZ@(,#4@8eVP7DJMNh`H_Za^V?I7Fh>]a;kM8olJlqHJ^rh2sPg*bsUr4VpR^$)i$^ld-*o'[+oU\*<]Z\F/iUI
%,M3#4Sl!jXqlbIUd,Tu5/M]J(CA!J0cpB&UP"S\;3J+ZUcZ-C/C!s-Fc9a)aP23(GJm9De9ke>m:&S,-SqAo`b=/n]m(AWcbA/^<
%]B)>R+c6.5V@CIp^Q)1p$0ujN1nOSmpq5%Xq@-D@4_g'rCW"_RHI1J"`S.>A5K5r%LJHfR)DQR:DYl2rn>7CJ6N&+6Y6R5u7]mC%
%&N%LL>]%tP+JP5;p^9L^*(V3!G9V$eIF9G7[.4H@*<[<lc)7ns<t<]AdbFaGk]Uq.TU1lRd!S"VO#m%J#Mo*qQ=%<FFHFf0G.6^/
%qAAJ!?O`HUUU"+C<i'qt>`@DH1$s5G2nbkTGp31;<IKdcNs960otRZnp>i'")8s*ZD06[Pl`JliX!+<o7HRE\#0X4,XpktMB`TXK
%ej.6,L9IP5,S<h8D,U8bDXmQb+iZ4.C:d[XC+2e(\,*,\O8iK(Op]9+6"n<p;OWBVoGlN#SZZ>#U[dnZ2;p;qkp5c%._&0FHhrVA
%jj7*!Yuko@i9:#in]rtLG&<j^n^G[S<Za/`Y.d#Uq-Ja<<W6$(;5.EK)R=l31,Ajo>,<9uW!eJL(ECG:_,/m7Tob:D$:u2elo7o&
%W`l)Sgtc+]bOrtX;P1n]mO-OT_C%dDA1%eo*_.+)B1C>=`oCbHD`<8-]MV/`L`Vc@@B+t3C.IPJ=)X5T(NiQB(9ecr2$u3B^UI#1
%e=kc58=*tV2a^r&b_%EkSj[*gcXWF:0'f',+O"D+aX,\a_'!oJ!M\'adhKGQFI:*X,&pYg=V"dr,kPF?FLQDDc7)eC*2,kslEoDd
%qIiKV1^mGYCAZ;%o.kfQr`f9d/C2cMdT%=@^?KhpHUI2La<'f!cjN+FOgca,YGZbID<?Bn6+tg`U1\-b]nL4mk>a'5>.4;E+\Q;K
%2JIP+h?Lmu2+1.VT\",CCV2<``,LP)I^-FsVZbFL[-cA3i!22Efk8^3NU<!LA48*!.+d^*7D#U&%#r38;K/"p.QYpQ9pduuaC_]i
%EOsplX*PHO6bWSp7(/E[G%^^]H./oOrY>%cNFT"s&Yoc@FY.h61KWj.][IlE?MJq!Ao`XHW$Z4:]%)%gn]okJFT8l=P3n!j'fMgX
%IuKDh"hjbX.kOhaWlIn(EcA\2DkGQ!_3i'LC$9Q%3*&boq([hKURQ2A6IO@1eTM>QhT(T$<OBT>TqOWG.^:KBGAI"t(L9g$`G&#S
%49Ih/U>>cT_NRbR,I9SR5k'?No2eSXBI((PR5V>gSK\Mi)r'kC0pq[7SOW;8("0r<<Em-eAJlEZl]##dCBTs=Y_M&W5Ru32.KmgR
%"r&XpWJ7Z\%h&08'OY[qe[;\:Y%S1UhlldL-'[#`OX;/,4?B/B?$(e6+4mIFD0O"-63"+u:=6Rp?)=cHm'rEa3q^+uWu)[t>K0j6
%=R3\Yf=8i#S]Tf..5T)m>-W;3)lkbd>=W>.I_OAMU]#G4:A:hQS@M5"lO?U9aa?g!H9FMPb"SWeZj4;t]#Rm]Ba*Z`Afe-nKjbJ$
%M7kW!KFPci[)Vah@+\hNO@n,Gd'.`Q6^SHj74i<joJ'"iK)%ht9'n:ZbXp:^Is(>PHsF&UOD*2cMBXH!P1K7f/`908.*SHLYYC=j
%W$+rKNbJh)n*3b)q<Q)]pCT"3Sa'2nLKa>Q@R%9!%C5)0&g*/(5Tk[FA[!$$ltk%K?6q/8OiW.HY)^N$Xl!m$LH#$`RZ3:D+<XVT
%aPr]e;*O_,36`2m&5(PpT,3RFm2p_)Pl!fi'q&JuVg<j_:q@cRWkl'2=0\J&gHkeATQ(Nbc[rNi8,aUH9*fA!SOQFHUb2R@FC&lk
%2L9c_lp2KCb,Oj</ot,YT8TWC_o-sI-.q`lTk[g`eCpfdm\!MpW@YFCm7s9dTAga)^%Q/XTDqJWGWCe^m_Hc0V<p,dpN)?uTm+2]
%<L5Nk*#3[A?)n*MWR:O,"nUFHK25,Zn")XHpYRXm)%ZFB[Pk`Zc&9"$et'MFS`RhG`O_]1h7)9(hmW!UD8+\KqU0c"<r)[_j^r^5
%FirJ896YrTjulH)Q+iU1QaQ^[lX07E2`I$a^!5CAI2.Li>d)rIb#WlfXn1_Z/"7JiE)`o'H!2f]o+00&`i@NP^jo1Z]WgOGh!(0>
%J(ZSAXt1BXm7Im7Tms?>e@mjiQd#?q[_=[A^4TidBA23VC2`hen'$(SqU=WEEA@K:oVcN:[4e!gQfTliCV>+:WO0;l-nk#<c<qK`
%=8CUmrh+B,jdia.fPJ3-457@1(GD;>/4Pb?%n]i&q6@L#m,:%_&PTc;r-J@M%6m#N;;//>hUu(P^Y^[aXk[^^8\Fe5!uT&T^:7.u
%Y$/"FM\kNtqF4o0Gd+RJCAHW4B(=iLE\SCnIen6VhSjfKl<iOHoqh&^aorlUBretsXl'/e<r]a4gM/9%HaqL0qE-0*NZS*`"<ME_
%mp-baN4o5ab@[GJIFqeNnoB0/BmtM/GF[4?R8N0KGM1F+)@O0YQM,WCJTB&R^j0R+[C(=#eH[G-QVSAuQ@l;oF3ru-I&JT4(3__*
%^"Zle/3IB@gAPR>Hg2="?^E\-eip5#Vt[o%^JA&AJC7BnnNCF+-i9J5\qQr+\omhi?4d88[T:f.Q[:AYX8^+knsuV<>o^l(5CB;6
%W!Nm-S_i0[l'J6EjULb/`k1US]R=dFq]"uus.Jh4"M`QSSj(t:ek=?7T88Na4kWr@I=LpT\/ER/qV0o5j=nqqCG23pQY6_Bn];r_
%$;?%SGIC*k7.*t"HY1tRmI/TBEU!?ul"p%3O)<d(G^mn#IIhdFH0OC(iV9/$0-&cN^+:8i#)Y[^q=<JcHrU!QrVkQX5tE:S]J4.!
%H5ZD<2Y,\eP%c#lV6cra)Nba1ocGbK]sn!$Es[2J@CAtadb?AFrEacUgV%iAY.]5WN4@qPor\`DI([,!eb6^(W>S33-+tQ=B.e?2
%_lPLS)(_(H%CW,#=_mN1*NdUKH>9(\2qO,fG72H<rP:0F'AQPX0=h+sHO"!"W7-4Vl\-U`#)?M]?@:+F<4oFG5Am*.)imWX\%A^F
%#>`pgR;e%:jJ_DZ:A,OHgr@LG1+q5rq9n\T`tqp0F4EGMd<ngDs17m/>Wgb^2>6%:<\Dsl+%VTmn6ot1@6]#RF`-q(:HiYZ5JHk;
%0aS[$jq6sHFtOR4)!gi!.N:`:>C4sCSo:o?'n0?Smr[uhHJ[)]q'n[ooj%h[MY1<3-IoZtks0`?DteO1f6X[pTF#E1n.?#\bG?S5
%+8=ipkFY&<)=Z73b2]&l8Zc,TqR0I/XZor>o+'%e5.:p?0AGZZDi],@o!\Gl4Ue[%UhtSk.FQmUDSOWC&+$^u_"`Ji?+p1+5`S);
%V;ZJQrSZ/B$L#V[%h"/Pc==9<C]?Dn_M>"0Gk!b#Gk'ak"iD`,>rF[q4E_e4(Fq_1=j2O]IS`'U4T$*R$&@X5aeLp6KEs!a<WGe9
%3_fNPM?#QEN*.4`o>b6>GM:fpa42P&aOflgM8-g?o^muWcsI/NbF>VC^&GTtaPFZZa/'S*T!+A;[]N'l=2O+tEJq:jI_!"ne_&@A
%aKJCe6?V'rouH4WgH]h]O0(@pMoFg:r2[9&]jS5Ls(Ur>'+]P<rtJl?V@$hrGhc0l82U"YQS0-#Mt5'[nC&WNJ3K-gb7P$"s0^K.
%6b?udnC.+EDh<s_(tRA@-]"nSNbFel.G9J3rU>`Yb?@J2LX-9>#JKV8BJP5iFc!jsg,e4Id2V%5_r0]L.Z$_-O':3ZlHh67jl31N
%b3+-Mr=*H5jr+*_;aI6,Du=`V&p!$?63L'3Nt5U>?G71!Cgu22K"ooF7Y29nRueNaSK19TR&Xj"l)>q.N$>o?oIC^r&g&)S2@5C<
%aNun)=kH&#n=Lt4iihXN36Wf@(ag7Emo39!,'b&l>T.3"]f=8n(m6'Mf%;sIXs>+set$h0cmb@QO2QQW+7\Toh\*euT#O7=ra8^N
%RuehAQoJkAq63LU9-?^XOqFM1cYso'U+3Aj2H#0CO?8rY&CoZ&jT5ndM2t!k7j%9oG[C;P_FUEGQ_uS?NW.#UQTl'SL^;$9<qhMq
%k;B40mtNNL?D1@Y4?J#n%d/aF_L<2ZhnEch2]95\@<NE0:;C#;(2_$#)8';..%g-m+)e;t#BuKBhnFRmD;33]`Q(e;Kk)$s[Y&!:
%DW"8!=QLhTG[hct1bZ<(LYrh0qD9t_En3HUap$hrrZ4K7EKlb;I"5Y\p7CD_Y:Q<6V&.I,R-HA0-UH^qFnDPMeDG+\03)$hj*tp1
%2nap*N&_@i7H#++@JA7@O2??cl[V):iH7"f["0nG]sB]$M?i.B=5Ou5SBlP;V7l<WDeU4+XQNr6$SUAM7NYgXmENN0:2`A\$D4P3
%Dh0A;S.@uFr7.L[eStc'*&=n:hAk_'Qf(<sluhc1[=7TO,]iiQOZVTXIeV=AdF-*4$&2<PV+=Dp3?F!k0C5#uhqst=leh*[os<et
%3Olea)3EtE2odq[[;g@?OkV-DgnVlUW%/QqdG+$q4RC*sio"P8I-&a35/M*qkr3S>p)b&'Q9H!alVF.S$%Bib'an"o62L37-sB)O
%U[mC%3O&QR2==n=Tu(AJaJ^kX;)-+DVd/#PF`?i_JUp<**lMOjAZFTun=g1:eX"A8:7cd.SIa!`7.&a?VXKm*PPr50oB:6>L(TTW
%/I2:K\odXXBh&P+b9d*aD4<1I$>8&_@aX4.m-DZDb>ITK.=_<epg/6X2>F%%GYM7s^rGsDePE>HXmBo<51g!S4u?W'7)7`u6K.U<
%UUT@5URM*J,kLC.RWCJK4jYZ3:-2;uSP2fB+"ra8`J`&des;oqS=E.GqN;(Ak$Mq1^0C`[s55G3]PEn"q7:^J5IhI++\W_dCUIbA
%"&WX5OPh4U]Ee^q.AQq2TujBmdH)S?jBjQ'HgC]n,9/e7lRtHWKb3k8:;$2s_U2-G47MB(=5SCHa!3bZ':p`boDf'`N;e>gmFapH
%5b.OSK8P@k^A?3sEGt`M_bN/Bh`T+58N#==gg*,`*.0CZ^[XP(#\smOr-?bAkr`;ZF`fIiJbcZB\U?A.DHPQ`=>"*k[uAM_La=4J
%?HJXR(ESf9c/<:%10/"=bP3%\]):cbZ!K%c+8)J.+20iYmP7-f5j>bP/E<kTaT[e@H1TPB)jKoK[?]"E=5PYuRrrQ)/[pT]Rg:4J
%deV:nQWE"IDb?0V$s#$5YMYG;4YaR>dM&<Lh`\6ko'9N)rMO>[@d_;fF)-85Hj"I3p9p;/gLlBMMkgjeb.`AoLV(+jmRM^(m.ooA
%k1]^<g(i5s4N-th0b97EHt2u)rL>oMm($f0/ODGSY6#5!Y*XacIYE.Xqd.7SLG6F6iqVWkBRJu[UN-d/n(I[,'<Ur(FEUp+"S)2+
%qrOJYD&,<P<t?41&mggDAtCY\Jp-hT3ka'FD[XUN9jEb9b4,$^(,riUhOnh,\GBd=rma.6Y.o=B]MZ<_DP*N%K%s<HKA5tm:&/>u
%@Pp0Grq&\o3.66go>e1P&H)Y*2(5u4Sb"sjrcVG[JBd;U*T-n%;I40dNtQqPVj1ONl6A-r39aKp>E,M'#"!D,d=/[8s']u^j0<%R
%6p'B;1j.U*mDgGU;3SCkmI\G<PE.4?c27:?>R]uB_K!\1>7L=uX6IellC2SdY8bD:<S7f&'('R!WP8B8Ml63QE-T%k@ou"aonrDi
%0701(jTXOjB#!4P^+-jF(:oL6Zo?9"^&"_8><P+$1>h?p+msinG6a(`p:@oHpT3@;s'4t"#?``9&*!<"?@Qt0E)o$7pVh7*3r'sZ
%8bL,$=54h7hTg^2b20%U8,!fp:rkT(:KKc(ibgcKRsY(kr_`LPhLd&gE9ZuffC/YfV(IHo]$oP#h0Q^>_lUOV1-QG5O!!/6M9N<^
%Yht=/C'iRlE0Vu(rB*D=T&2%7$X^\ngt]m8@(EXlCkZRm5%!caY^Kbq]Yeg:r3k,Y1q0iS:!bNf(e["qBe:E^DVGg,_Ph+6Ri>-b
%\4s?\BP@uTq?XM^+85H;bR\pT4FcqTI$b4AiW$lC=j2Am@4lb26$T]k<YqFBfgbkKLC$jDfJ;k\"S'ltqH.7qSQFoC*tJ.$(EZaR
%)>2+0=1(r.kq0r!4CE&bT_.t3cQd;N<H@ukKr$?RE:8F[hkaEAn"hgYY>I?/>[QtMhmscg6DJ[iEi9;<5nUmA_6m@`e^('.0/ckA
%&#[0+=t+BrZc2K=iUF#2lFTJ="NRS:PB,XHQG(YM9"TO^@7V+j%NYXn^)WkVc'Mc'hCYJeN3B%:jh\cgntsu&!QMTDbBG!\1Pg,0
%i('@K/'.Jilg^CDoP6QqI)H+`kLfS[\%ag;&mKU4%dW5qh.FL8q#'D`\TI?3W4^J36-m1Oc8U`bO(PaIKm*Ya7=H%i";[N&Hc6'a
%n+l+c9)_]a0\G[,%ORT.6`Y'6Gd6):/=;?"DmgI/VdE8uYU$ohhXX0G!j(=F&#4n?Wbgp\cAkj#?k<!H(g+O$ZnM+pX.e'D99uA<
%$js1C!+Fa`'C?nb^\!\=[.AQU@HWOV6?>.`)YYcD0-C=cpW5XnX\SG\mELuor;OZi,.p_=j`^IiULbCW,BEl0NQh[p=fr!9orZle
%ZhN=T\>m)sB6niOq/-o0%ni@+aud#;o&>QJ:ZXEim-E!ln.1Mqd:qd&#F)fJpO'#efDVj3:n,cm5JlM"fc(jlS[%-8l`^$n$:f_-
%qQPOU\u"4p]a&^sWsM^@f]@$)(VJ.%_>`-m-6\:#CR'824I;(_la9fpgSaH%.q@9R5Bup6g]+^/GH8:H5dB"9Ua\LLZWHUHh0#P(
%+OQ[a!/GM^"*8VeN-tX"#Irg+Y<jI.b4L&TiVW1u5pt;?#?q`H5sVT+maS&Ck^kk?D`>,=Im;R:mFGV<97)STA_^);jZ?7lL>O8;
%BtOCQpPp5>&%>V=r7Xc3F"9B.m_'N2hf@]KitJYbeL"4[oA6.Dm=*dB81Y.*%Ce"?j0_rq:C$!"?hGa<RM"u4IoHU:8[,$n"'kAd
%&e!FT-a4?S(JABO3qr"?MuJq28L(tg+/]$[q&DBBHgIh^>rohCV55GUN(5H%S-7:oQk(:I4ne<_C;J`jos"u-*5,YXrFYNGqn&[@
%HXD5dJrQsX,Gt!ei0t$bqlBmgjR]CbG.R\rlf\&F#LV/pkN.p,Q^..(_r*MgUM&&%&^!S_%0p:C2chV:(iXb5kG*D%H2I6Dn?-kN
%4fB_b=fB97rX')n=':,,gVaT'I_`)0il.gT+6CAUAnULBDpXMW'5dUOo+"FDU46<l>[OTo)od'*rUF]J4%s?dP9X3,7qK&-I_f=3
%ho2\=%V[Ul["FFbn[I\^jjKeegRGC_%=,H].^oa<_4hu8g:CPH=:oFDU<@USG"72F>#YpI25BC-p"_4c;&S\9[VKZTF%(5/#06H@
%V$6\O'Frl_Dt_X%O"Stu)TfYbE20_Pr+51(I&f3$PV1>kXRYI7'(+qEa*XZ3pVA"(];Nu!5+H`/OhqNnd0T#m$keuI-_Sadb4k8j
%lfZU0+aO>"qo+UJRT#SOeR(!';5uP@2[?`j=L)k2b6r+uU?gEdbGDm6B:=\[DqndpgE1&3Z4Q,OMR/W44D]t><dsQ.]N%".Ip&L6
%;ek;rB`9S"Zc^<MK7)itiPii-DBo9c;XeY;3k5(;h1';^HcGX5HMM+Im91-lYbU7GG/BKa48Mu?^F2=b4`iV@l*,f#]i/VEkcJ=9
%aF<AHrPQ>$ep!nsf(T$N0-_+JK'h1J)o!pggfZ$iDh`6F6r<@?k=^.ppFLIN7fWI2olR`6AI7htB*-l$qZ+0VJr\VU/4]]Yfj+Qg
%1+4+YSJ-fQCCl<*Y5!]o+Xfjej1Q:fL%W^`05n:hf'Y7CI6%>%@p\)lZ+2?2"4_BfK8!Fb!1[P*l?<!>:8JVh3p#fmnD;mm?N&YC
%?MX(fhnHG&[<g6#q=hSoG?pU&F1``+M\YQ%5!?i,Zh1d(USQ^QBp$NHmM$a!#T9(T+W,HF\qB7u"_R\ie#5Mc?BSBaRpoi<L<5=c
%!r[Ajn69&AD(^:kD);Gr8)NasIb3O<SGPUOI)9f6_2Ae,r<$B=M-h=2)ti^u7X>q-Q:GBp0AEUPoqL2Y#,V$c/Ug(GcnXh8HKXVM
%9JCJgnnnnj9R+AXd&-#Npba#`.grn!8&sG3o-G1/B4uYMT*N!51D%Hh]X"ZPrA\lQ/bS2Y<O4XncIE5.7AZ`WUG$_m4>[Y>a.[PK
%@.F!naIMk66*>\LjM]H_>VG:cV0fa;07m47Y8RD'oNO=d`Zt=T8hQ!%cL9^6UV^,Y`D&PjVFMZE^O,mj=N<Y\K3SWa,1g_o!mY&>
%#4M3>YIAQF(B6"baMDm,"qE_.!D9nO)`t&(\N6:Up2^\8J+jU0j7,2O&:Apk;/]:E^^9J<8p"#blAUcT`WHPX@+O_OBL;AuDU>u5
%HfO]Beu;o'cuZU!mu46kQV8jG$@*GX^9%WiB&GY`=1d>#bg871HCeO\F9Tlhm&83#olAgkM?^JhB4)>u`!PMK_HD^*h-?f7Nqtpf
%r,+KJe8l6We?2VX=-512&&,!OC8qn@6Rh?g=BCKAmm%Y`K/2EnRB'(#KoDr$Uh,oO.#'t@h922Rd4K\b[>mQ2O(,S(NRRJJ<s+Gt
%D>YD8=)hQ6Ze\XsoDqc7B%*nhQ6WK*Ul%@QR\e-Q/tPKaS@6=V:=iuGA2^`\^d>H`55"dfs(B\Q?8H]2bUV&9#jp00U=<J"kge5i
%M"I/^<jbh.fNN+#C3715[g)3$T@Li;!A]Ji'fRaNX]j`&)Hts,f3(.eY&T=J1a:mY;uBTeqF,m**L5a7^Te2C<K-(*A4$[:6H2J8
%N_R*,mt/;),T.:*(iaLcLa^m%1!3S$`n`Qs^Ca8<r)>kihHJ$71kim,3PQ`^H)4Tdn'=7V+%KC:NqhVV45d8F%gd$LaO6>3&dS")
%_=>L;H.qiTN@\t]==hM8c&!=N*q3`t'$':jorDpYifl-nm)lQuBQ/j1D7B@s-pnlCKQPgV9\9@Da"Alqckl]"[7;q[35[rjLTnpB
%6\uUk(@[;%4?<.Cjdd>G?i9F<-Jgf#Ilgtsl#)NQoZ:5AXdoCb5E"#P`ua=l/IJCAdaRXRI^<71n=$gMJ^ur4f1r"7S+%ITSEL9n
%5"*^J^&R]=ru'2`ZWs1KT68:4c*hJ:H:W*NMdANo>gp.FV5(]$H*1bVr4jD)69Olk0/jblhK,'U>B+d^EJBfqrqAX[QF@]i]YZKQ
%Dg6H.!]+=ihK2IJ\)P4d4J32bD>;cQXPA\MjunV_#TN%??t]N<cPoVlF]KDD).htH+6D@o,P3i.IGJpcI+B`bGqPjnQ!@%-FT\7;
%E_R)E@cRLI&#SL!-N6GHSuoOP7.:0idkG05fLRAP!QJBr,+,&Y2s4=h_Zh$^\:B5:5N%;L55jOThPOl:\HZH9=i_To)HqF,1j#B@
%;F#:/!c2grIpb&gms(RpM_g'Jnhr0V\)KAma46,Rg=.$/0gO4:*D8opE!Gt.'m!Um#`j9']47<?MMMGec,2a`$pd8]VWi@rB+CVF
%0iKHi@4!$dG_f+Kq!H_T7[LpsY!F`Hkg#-#U6W(q3H'IiO%FRh`7@&W28c,5!tBC.0.S:JB9mDFY-&,3Ht(=)o=AX$pSJ1seJZZa
%!h+?p8XOA3MSuK^J?F\"1@qA\]5dAJ4hs^3,gasVLRGs'9$.tj"V'X4"0-T3r/.W>/I-6LnSOTD%3YKSaLYen6n]M2LIWIhR<HmH
%?l:p>!DHn+!jM6]$VRr9LaXq]FKfaFl[8(Z)Z7Duk'7)[+O7c`E$Pg(CE%L+\rD\SL]7j'QA_VQi:L-SW1X/Y>.2UUWXD,r59c%h
%YZ-,uRK\;$!#$V%!mj%l5(!WGGm<?SL"u`_R"\Wf8QI*W5(5jLhG`!K,U'q8Z9o[:p]6HdjTGj_iVHIU"kg%7O9l.`DV?iE47Igh
%&H=nZ#?l_L35?cAm5,rV#;\se*BEIkFT-:-!VPYiW*0Vad-3PS)[(nh0%>!\,=k_[J.Rjq%#IM2]839Q5#(,#no3(KnB5Dui>9Ga
%IT&*W#!)eAYA"V)j>q?j*]P7t-M?MOEhUN)))GM:eXIf@O>L5^cpNKl!l:M)$tht7L>dF:1gOf!/Jl))17"@T,gs,10^q@:*GEej
%l``*[aF@p+`=;^+`GVQt@E?W64`dE9:NHTui^5q!f>p_g;791d3'Ocd+W\Aa6fK?&?t<dR_CRJJ^B-?9qGl-tb7O_T/?f3[3J(E'
%YteY/#329sH5l@cA%R\Kf0"\]*sRL3B[U^6<$1=<l5h1#@=Z9adkbEY0N9c]#;Ul-g^*P^/:rhK+S\W_'s)-)O4@P,7RIG+&]6WI
%J=[(RM7Naq*W1+E2b^aoMstY0H#gk5:TjL$P=oJfL#)lD.u#^m&Jnn*r]<:YM_"tNS,eua$DL(=FZdk.*ALq@o#rHD*?*U;8p!<L
%@\?/(Hm?sJX993ucEiE=1IP,s*eQ^D\CcCI!Wkal;FqXX5]Da"hFo^nN.S'`ki.DsKu/Nfs%rH+;hQp;*Z#/ffBdUQ3)_]@d+6IV
%X0"l/36+9:!mK4)Z;%oCEWB2PMd%iJMuYP8%eYKWi:6l8mJuVT?u$OeMn3Vdon'Tj>A0<QXd*T]I$-P]P$9GKgD45W\e*m&^bI9M
%7Jd<^9Ef+,jcQs60JI2n)GgFdT$<7djal&/J0oq=ca65r!!Ye-_HMOW<\5OI$pE,rT#I$s_Y8nM!l'g-J=,-2[kCd(@(iTs6U^_S
%&0SF`S3fpc.U^.\]Q=qk,VW.@c?I[9l!RR8bdU$2TBL?2!e&E63%rKNTZlst?aDW,!.M5(AmhT`":mNq+<XNDf!e>:JCk5?ota*W
%%Y!^,Gn\C963pqM=;Iu9&aSHk$#&WcUKATdW=-!Ln5JWE;G?P_`R'R33"H*S84UVFbQ^XGdD9D5re(;0R7Fag.=gmop04cJ1lI&a
%LY3Zi4Ne<8:OJtJqeK^6UdL@U:5:IW?Nqht4#'!@/Pi;M_p`E37-dDPc4p=]\LKiLX^ZXo"-u3,<l-(G):KHC8!IU)`Q,;E7'g9u
%g^==!$"mkD4+it2'U7ic*.k-oAY-EK/>62L4uUH:CDOef%g@LA$%Q2KS`&bN>8+E/a]&Pe*I=hm\O8\Y1J#.!Y2F4,QJ)lNs.Qq`
%ii$LAf&hOkk)cr#_?5+CZ8,hB@(tE?MnXqM`5QA,i_kMnNp[0+),ScW)M#Ob)023)qFDibN2AFuZ3a1W08ABk@;9+9Qr8V]<BfRY
%o$9qL08I&W)]i`'"0AN!K`Rsj>\UFh;/?Ne7]qU/ILHM>\/qtFba[hf`adkYI;PiU,/r_co[0NqeS;.)YNCpBjrc,l'7her4QO9p
%g]ci&YA7l*GCRCMpFmoqqdJu+*]UM]!!@FM7)'A5o0<L&-HZfaJA9TtNKFdsd04-?%p]G#(^-9S`m#9rcZBYJ7HEQpR:8jcGqoX@
%8D+iJ\U(b#iF1#iCku]m(^hT_3dHIH"MkXC7Tg@]DS=4\9A,kk3OE#u/T2sM:<]p;9Ckg>2<H&-YF,R;)*-cf\q"IQ6=e6?n..6U
%jrlI4:6kn6n,Xk0%+u!<!A`'L6kat':'S[tBeqqWf/###1&uV?C:_V7rb1*G`W-\5.0]k0A*UL5=TgT9qVcEJDP`J#kVb`Bc!cKJ
%/OErZ]@-@rm"A=T6P([oB*f;EHF*GAp#[[?@r!p,Kl_4D]s*4Ld60aH9F@X[d.2F9Bo<7bF<L#\K*sLb4A\>"7K?LG`-2cZ8df*Y
%1WX4+R:/]h1MBIL^MPq?Kss+r6PD1o4;@p[+7>G8'+t<tN1p;]fpI(4'4inMR#WcPd#."[1/Aug1WD3ZOjUIW2Ss-u%Cmf&%thhj
%$Nj#L`FZ"$b]59V(JCNer';T/9oJ'H>RT#ejc1R,85--66;+^B.4R@g`?YUZHm<L,7eUd]*ZXVJEeLAgnk1o`mX52c+:Oi2rWpm)
%eSSS1)a7oYp,H*?NO9WQ*Y9jVdDEPID.oes,,m&+6WL:00S+5Z2\#BO+N*F-@E\`&Q[#QnZiW[-Eo-m#%?%Oi%$M;JKTRJt4NQG#
%Kn/!=,6p8cGqQ3/&5XUql&3l):f\JjLWDa7;IoV59GctP$tR!/[NV>)M@*ffku?"t'_f4&.3WjMW0_Jh^pKp"F<#pdR3]RE,p3E!
%/BiH$#uMIdVKu.-[`$9+Q=nl1IF*$Nq,TaI7^I:"oPL$\i+!\LE(5(NED^PL9dD?`W"F%C,Gd:u^f*3KS<FnJ1_ubldY%Bg,?sP4
%ghdsa9+]jn3XJDko!BA=Sa6q'3:\L\"/X.2>WmjX_Bo:XSP1pA*N\e2`.0&L<"Yad\OWEt]1rWjobhB-ie1(Qf'V>tRLo0Qj>p]6
%h;VPRU,4EV_`W^r\Q`Sf&P8HR'/!Hp9U+kM!?gZ0OGO%WCd%TrX@=*H\<8!AMrc]@\IkFXPIjNj_X_n1d'd6F?3(sPq7'm25"@E4
%Ylmnq3H:om>1DQ\ZooJ&H`2!CJWRoG3HrBH3R#o<_E+P@`)31[&ImjDM0kP$-U23Nj+TgZO*ifd&fecl:%H)MPb>Z;mtpV.e+33;
%E)XZk-JK\:LHmPZ3J86(.j,Z]`ukf"Q`Bu$#cR@`_O`00*#h]VQ^GF!F_[AA\M=?.K-(6]i!E7YN(F<C6c:,*h"'jQ(_A8-p@!8n
%#f4lV\RAq]ZceW@`P5!WE%]p5oOrkPo#3@uIc,i>RcFkP<<UfK(XkhnWGI*8BoPEoIh]&]!e_DSku'`65SH#/d_EVH*G$,noYu!p
%/MUT<@Ot`(bN,?$r+&qkD'(`.=PaHF)\n0hLjGdS#m@+\;n<GNcigo'.K/!`NAO$]c9\b<Z$FfEj>7#f=KF:f2^NDVgTs".!r*E0
%9EB+Z>NO@u5Z!`;i<nj=5h?0nXE4t(e"BoV(=:'AbQRS=&S?_S&OI>6bReLPdUipIcZBe.bOG^giT:I89/b6bY"blA,S9^,2%k)[
%4`3V)H7m3'g>4K[d;5VT+'KAr`^#G%n_^L"9caO\*K%D#-3qt"2uuku@24CS$!rdi)2Dn<Jj9?+RrgBXK;M9*T)fu;'fF'H0Z$3<
%E%IQC&-t[08/Bm?&GRsiEL8'Heg1n(oje7VJl1a1FH>S%aUQ^.JpPY\@OIjGFO3Lq(EJ,>+n!S6XsO-C#^eYZYTU;AKn.]5]GX6^
%LBpu#EHujqBa)0?GWf1<BY%SKPjZ@?].QD1/@;@bE5(63\V?b;\/?2#bokA&7gmqE8';.,BmL3IEC>(j!XQt>_`4<P!*Z<7UAe!r
%BdQ+YA5a1FCuV&,'c@"nP9l/rU"Y;E<>0<i?m18b`A:C^],hXHP<a*e*&0kskh-Go/%Z%Gm"1[,AcZa&1DqDZl3gBeGM0KCVK8Dg
%\IEZXQm%od*j?ppd5@W?&4kY-d*uI3.=)XZ!N>7mked=M)4lS`.H7'lfaWLHJo'+_fhH36XDt.t(mJBc-bN<jF\g(3m@""X["@5>
%XrDONf.^M<K-o:5I+#iOU65S(1>3g<!dOLPjpG^fQ6XhMM()D7A3-A94kC9q[Eug+EhFQl(g&L5qfTT>X]GKLP.O8W#oHKun\A"U
%J[(mdb.]`>p9..Uj8+q><=R'qJR%YX_Aq#'K,KG(@SK<GL6Wa=d&I])1bDVHZ?M&D3b"9aF==$JeRE><7lbID=L`8\=VKV"<W[m;
%OLQUb_GE)oUa2Y^56gS(rc/nq-#;Oq#[k`$DG:66o=$3be@?5(_(aFG9)p3(-k-Q$*5r?(F;RG!d+P+!FppYhO]I*Q2,$oAO(t/=
%>eEa+5R^qqhBO01W`0Trg*'Poa%ZQ.I5D=0e?\qt&nKR0QhF`BdkPDic&G)hjGU4>#jBDLf,,'i6gA"kgZ.'[csiAQA+M5+HE1X!
%pD'';_a.5C6TfHSKe$E0I]O*BC1=_o+<q21Zsek8f$H8TEJ26t0qkSaAl:'Z@R-8m(8Cd/6@2VX1b^d1HAa-:$M.3T5[K5$:^=%X
%Bu@lc7>_N`g>@`P2Fgg9XLM/0kdk9G*[<)dF_)*uCr:@9_phUZEAW(PD@Jm79=KUn5T(4tWMF;2D6,-0!#(uMbRl*7NI\1=PuJ>\
%Age-We2o+&gi-4QWJR(\fW6gm(AJf>B1i!J/4,Ae?D0d3"N3"2E_QQ;Wfhh4,ba;>.74)+1T761A>Y@K:a-jV>BWqmo:Z:&eEBe3
%Rs_UDN%mUn*G5inb"$FWmGFoTL>.bXqG7/HkpV`\.aYs^Dq%"o$l\VK('qa,\k4&B0b=TLoFYQ#\ni/^*K[_K,Qn\/W@(Rm.ZddO
%9g\JI/d@-n&1Oao8DG&'_"e[#ddW>"kDn3V,Zd@s1)HKDl&\`A#U#G93lEb'iUT[)$8c]\4k>gJFXs]t8K<VmWG1STH\0D3_=LEH
%>0rs]^!JGpSfS,upVf-5!Bj.6$[\Ve4%tR6m(""j0Fb]&Eoeuj,](!uF^`hT]J`Z=HJG/9LsgDKZ>>FE')Wa.a&A"_dhrjg:f(,!
%_7;.T92TK`5uPqM30p3[`"#Il5]88e9oJY;"M.I,S]`O8paVHsIg!^W.bu$J&q=2,U6Qk^l=&t5aX2`epe*VA%Q$/JF?Z'nZeuG=
%3!?S(*.&!6GtDfuQ1EO!"94[%BcUt)YdE2Y=ITONNe%Qg[ph+s>E0ka:^lceY*^+SrB5T\bS*9uJVSr$^+2(rBB@k%^V"7VpM9n0
%0a<rd"1<CX8!>,pE-MZpNeq/#M[e(#1CT$D0`X&XfYN.C<s)umDgpD$Q<.H]4K<#J@JN(O+9O.O"kd.bpW.R]Nu!(OHd35V+RDss
%3-W:i%>*OFO@n6FDgG&Z+TMj!01IasOP`W+JC=INXij?rE;.u&1Y%/]cHk#I&l@6idXZ$Uf7P+b.Rq<1prO#?JdksqVPJg@-^Z+?
%oFGggX6anQ8W8<'eaf;G)Nsb-kaP[[_g!pr&e\1?3`#^0dY(IZjp8+?@5JCLQlFF32TNtbf(uB4FEeO%#idbhbt-.-i#7j0<i)F]
%U%Ak<3=S(!FP;Rh%m\r?Vi[>kr1GhT#*q<+_Bp"to+S$eGRlhG=t6NM:4+FR%WPX[=H3fK#KKg\#mu@6aZVY63ambFd0>V];RRC7
%AmR:2=G%*V:^<S%fu"i_N,O3C9HhS[24>i3?lgDV.]VS:4-M0=Lt?e(PU9'jEUd0E-p(g!Iof5/FpaUI6C<LM=\(L"k"Q>^8;!S"
%P7mJr0qZZe[7+L0<Yjtt&4k,)6HZo>%o,r-LCipiZC#T6L8JoAQNb,_.8,J-[7/IqM$[Z%?W38'446:_kQiA!0i^aU4bR3_;B1@P
%;,qu]!_q2?n]jft-+)s9L<Hp'nJRdaVb=Zsf5`m9.Mi\M(.L43N?edfiMuh1#\l*?b/M!!4Qbd(-o8F4+.A.#4+-kNEFd0<PAr0+
%CMf0;r(JS,_7$jACI9L0#LBM"5ua4T'Fq?t)S?Qb&r2(iZl*Mh*(8tZr5rPlV8I!'B^V]4_F)K0gnWDqMH.=<7\^XIfMHX*4TPWP
%L`B"i7E18)V#hZ=>_s]F!/g#c0J\?<8e-a)?Wj`[k]0ou/4?N<7h@WS8.12FJJ#bc+KT0ZSt:t8[c0M@:kr,!W+.f3cJ$@Ype(Nc
%0e!18,?4p89mVilpMG@Ed'e$^$cF;#1*+](*R_2hU9E\CTgFlY;(+<9'''lJ0Dgh%e\KsV0nk9Z]$$'L90ofI$BAOuXXTp30TD<`
%5R9#/-]h*!N'KEWY:]<@,udi5=,*BH6'O)\IeI!:$[R8j`Dr.T7sgV*+eGQ06^NC'C<.qf$,Q[49ZEoeLWK.n*)fU%[ah?:65bDl
%%k6T`_G!kjdH*;Rm9$f=JZt`2HSB'!Bg;heFYI(aEQK>Z6=&H0dolq&m]Onb&upXsH3t?^&X\g5%L3#r@64<U/MS3Gk_1>!HOOPI
%27oG3[%9g!!#.8ALWAHn@VgjDGhb:`Z##J6TgKro?EqB%V*Z"NA#4[6ol-rYKnM1?LQaYC5'Y;RaV!_/ap@*!N^ZA]-Nti#3Cmlk
%WY#f,PYdPc$`G>EUaqZa:a)5PH7E8NHn?[V^^+N)"0"$bTkPA&l$BK]W*u)p!^u.0U-FtWlUYC;Oa3S'/KR`-angc[!(c;-,Uuki
%VMWh]7)Z(W&'*?Ydh0_-G=7l>8=G/XCZ?HWq"7b`/D*\I9o9]Ojb"MI67$?+-57114X'*f-iA)?ZpP*1`t<],Ak;Rh<7H>9lrOEF
%?]:kML/c1(Xp^Ym@j_O+j!,IgH3+4Ac^"nlJhfil1?),BE-2s+U7&[3BJMt*J\%OR^'.;dT]89[S')'!-!`G9_?>FW9E_2f7O8A;
%F#*#'R$"gt.?mE[qi11T2]?/V$t5H5W2>KAH!UP_iBc&)28_L%4LshoK,U%bbj[`S/I[f4$%T6p/n)u.E7/@8Ek*AsjlcbM"lr:B
%,(ef,MWI=I9L:>e10&+E+O>(K_fQb^5-2BH6FC\kS:3)(DG:\7Mn@.kGf33%2b4,:6<bs*gp!'+SdMmp+KdbYbPb:\/hS3/&4ZpZ
%Tr/:HRlYDaih8"m[\N_6'F5`I'QXjO0>':r"r'771k6td8tjDrfgTNj<p?:b'"](k4@e2,+N7cY>'M-B_jFEh-IN<@A(#MQ&.>U"
%a:P51o&.AsMM>$,=5m&h.FbSCarkrp)&C(=Zb[#V_B*FR,[nQM<B/KJ\On`)odF;cRKT16FK?%3K5C/cW5f/N4QC^b3)I*kd26P[
%"XlZ+e[!4,0O:@bR)UY@#ti8'k[4a'6pgMg&QD#oJ)&BS&PuI#[M`Dr&OFN/MT0U'78o_cZ5Q3/VT2U:JsuUl;D*)/I5"SH6V.%4
%j\,rS@OG>fT"#2#BkVOX>"M%49J<>s;"hiQ`Hc5:r'm:m1/?4$4(Gi]ZVMcq($\L'V*hj7C:K)'cE"W<#[O\pM!A?*i`cGkq9c:d
%&/:>.l6%3@-MgrhCi$9IWa_![/&&u;<.sbIhp`-K/O6$B-G7<&A35if\4RB+\*L"\GeB,"Kea>!E<h8O+06d)`m`.`=hM8/#8qRJ
%8]TY+=*aq8F[2$3OlS->%-4)!/-rCDnL)_TAA?A\((Enl;G>;r=`QgfArn5h#j-CD@YGBK*/]AjITAZ6`')q$B2f!j9U6!'^;G>s
%KSakt>j2YF:ksff'a_8OPQFO/(bT/3:>Wn+'aW5m9A"[;o>6b^B+K[[G7DZ=WXRs7c*g/eMX=ZU&==JoK:)%O;H6;e%5K/O#-^Je
%o(gE@A]ZFO%8XdXThGunc4]ObS_`JG,^1,GO/shMf_-SN-J(8BQ/s-iBiIA.^[b#o6:,PWJlYe&E-5>'R1-/crgOCgMk^/,Mms5q
%+j:!2o%G8VX?=5mQFrVab+#]AVhZ!Bff'Z+RtZS?mn-1D=cld-C5,$KWd>Xb<1mL.W+iMG'#$hkj6=d^bs8g0C(WWSG)qCOfAg)#
%dFnDj*V/i^cHHQjmc0A^35<iJ$K*L;W_*GKXtf?D`@<8Qh2LU;$7HbJULuXX!fF5*aVI^+47LJ0$;cMbPh`WX9#6,7MIm?!\r!/T
%YhT8Ha8MW4_#m!Z7/]P6cp(S#J0Wd6k/@ZKP.8md2,"B2&[p^7$QKTsI1:DscW;Y/$h/UlV.,#7@M*s<iF68@>g-T\<JLXU)a(;D
%neplr(3Y!Tn&<9Bs$R_+QSid81'A5eRN&Fi5SS$->cJH'8M#!G_.:sZ1mB2oQu&G'Jk'Q\T!Q9I\PuF]5dE&.(sibnEg4o;n-JT(
%T+g,?`aW0-/YmYq@\:RRf`Qmn!%j8XdWJ4d1j$H=N2L(JEZ#R)\f)<7GcQ[2E$3\b-9nE0>:".U/EI+=j(B8u7BAK`"[\S;_F+b5
%.F,!4J/5"CF9.Vu>Bsfdm4m,R`&Zk72a_8M-3S;IW'%C,MZ]fbLIIkXkprHAo9'okQT(^>b0rFo#*4I3j;AWmF$*K3b?D0hkgq:F
%TOTdF,t<2q3^3t*JjENZL5/)PYpRha,nWHdhK+YfK3>JtBXJ-*ig&"7<?/r-/f$uG>uB:T7j!U#WPk$n^kelM?ijPAlNn+CE:c!T
%92HSO3Q;'-3;0)^kTV1X)pcD7f-)nCn:7LNZQJAiHFsXh$"QWmMqSkHe:Ra[nS?EH=Qm2(C5'-u`?99'As#7k5jZ?".RF<u!N;rD
%'Oc+*U.M#Zg#>+q1gP`8E,\"o%U"7nTc92_=Q42hhb=p5[7A!DSh:o+6.&%U+irao;l*h;mn_7='2(J106[63,.(T@8Xlm[6(j-=
%IQRVil&NP!Y<sN?'+iV)f*d6sIVXWbW"oEuKO3.me]4^iUB;t)=I2'e>O58JJN2B75p0GZn*qb6"9fc8k7GfM!q(rXc`*>jJ`jS,
%#P)*3e\E@XQi.#e>gAUjH&eRknOSaY8rErDJe6Zm"e0UR8Vt9ENcH8nXlH*ca'l9AUW4Mh!pehkVZ\2d_P<V.&8UBlrXH#LQ"_*5
%1mg82aun(qn3C,$`+JR-/00[:`'k7De&CsYR\q?[9UFlA&*lX>g\eq:@:Do,Kire%L*VRQqoBV/PmpV#1O0!TFD(sUf(fad7\m-U
%EiKrZ!:i;_#t2G6n1(RPW*:1r0Hp>Fq)rfA/9L5Q*cI;7jgS/cD\h4Q,9R_,iN[>_2M2RF^Bo_Z=RtlK$,cld:#<Q3JQOZqml\\Z
%i?pZc2afOr>TV2FE[<'lQk7/(lZ"'79%(g(maL-3ABa!DW<VQ'Za`n#!1iU^UDT*h<Vja&(4O:t`'eln88R92]c:I0h[aE5`_VB$
%9OlNLd0pb!nmdgAlo&,L`*C=N9<1UV?j>.p.K-#=d*,aRMf]`HQq"QaW!U8'Z?S;9QX>]s`?A[G(@oX*NP@Pafn-sUmDa5WD5Er/
%_*@3_e)O",4BmDu"qb:cBuDKBLL+,'`M49hZrs?h!-flTCC8lf-h"QkAVOH"#$rZCk;[Sj@JmW^"JPZrY1P!2+,]"%D]Hj^;qX=,
%@(N/IjXbMVf=6"S%9!PHJS#uI_Cd&#L7NiS\lA55B](5A-Y<qkFl&JKh%43DLIdPVoNUF;B(4ED@Ko3;Mm$SZ75JbW6?N4L5hmL@
%1DZ";0M"6#6R_p!R"R@t+i.AM1mTgd3o7t+b`=*8,>gT6n[Q%F"-VPJ8H:oE:EqW>)P/o0VT,S+ns%H9.o\&&IVt02q!85l?=5Pq
%&bjI:&G!?L<<saEP?/,_&DdJad7"5EGK)QePpnDiZ2*2W]#K#U"nDLV+53LQ&<#G['1"`ma<UQpW:L)Q8ci[9XcCgo4q=@R\KiJM
%dogsTD+mH7'j[F#!\kAB=Ym2L+qe2XpH$(,"QF=Pau)2p[('G9gjYAuR7/X"Rk"f<JVQ:]hAm+[FXDp3"@-L9I(lBX*+=S4.CD[#
%%5WsS/'?FKT"8t3Z6D43Ed>YloI-BR-'8X7TfT[Oari+tT#3(9'@]s?ZAJXqh8;hMk_:cYRUOQ;3coD!dfOa:@h@B00gPq!q,9>>
%"HZ#Ml/*2qAg:oV<"9Ti,N6MV6`O+I_aP!?U^1uu>poopFWCLGDA-\F?1oZb@fB.2cY5uopZdtdkeNAKjl.hf@q!>5i_@g\5!J[T
%H%PFh//a#--gUnZ>BGt\Z5oq(E)0;]:f4MIO5pWjeg.lu8?N$4aXd=*]SKm^#3PM?H(Nd<4@(q>B7sBuCh5=2?t/fVmGN@-U6X$u
%XXeCYLM0/JPKRC'\RAB0Hj?9]$Zp3!*t2(e7lQh\]ad]pa#k-+Ef4VM9Z]]j+ib^5Ns1Xj+QI"jB=Na+N^;Pk"-PVX'2t)rH-u_3
%<sStS@rr4^_itL`i6e\E`"oOs`I[g\E3(Pp/]ob%-G+2WQS+YiMu`Ct/Ui'l!b1A(72IkLNW@N#_Kb+9k6XLLFV/^qJKl_IV=>KD
%4O!cp9IL9E']MiV6<!1/SMn+b<gS,>[h965,qlFh&4##3$5Wn+csh-4i]N_4A:,1D$+(+.#a?PR$k(r<,N3X]KY_uF6H!sqNT$gU
%jWQ!A:DkXs)n,6T":1@.j04W(0nN29K:_W1r4U`(pUEAn#\[Fi6_]apj\>3i1O9:p?Tj`:]%ioj<:499_fPQ7.gnZ\fGN&qiqr>?
%<I*8@-#H+d:_rK@la2:5gRt4+n-9%89UGJ6>n:!crd[,lqq/D+aq&PIE#Uos.]M@FEb1B8:6km\q]54bAdG2q0l_S=q&Yc`lR%1W
%dpXEt*@F]$7`;ghCjPNuOE7<F1-ih(GpNs.q-?UX=9fZn8$e9N)Nl)$<9YG?31(j)#2g(O5!odOL:0*'SDZ<nU=4^7+L60SF11l&
%Y/Hk#NBqo)cFE&'R%+>uEJB&8^fX2pFjpi'TX9k,UEmH@Eb(5ti`?cMCURja!=`g4rJ8nEiGVl=a6&0-P$$19X@UXR@9hDYZ;:*R
%IW4"I9+9+?7qH1_X0ns9#IYq=@1W$WXhD0Z0@nS8-83MF0lXbVjJn)DdD=i7'pBNo%>4p,dFRR[/mbk40'g<n.9sb&Q!fR@h:%U;
%-X0H#0?EX<64A7(_;dJkl\6a(H8inGj)88gFM=-oJ[t\*D+(#L4Og:;ns4WS\oa2=V7S]c;b"C`\f,]^XP:)jNhA#1EC1"0H(p.n
%;G=ehCbUdF,WI9B2h[(PpReLgM0"8Rj^nqDkVd60LDE+:!_r3R.^#30aVi+EfQ[l:[4?7*4&jR1aX.BPK:=I!;0dcrncKR5PYee4
%M533H>^fX"!Ao%AUlsGIVE,[4eA(qd:4f#DM&APDT3-d=_NZW4VbrG_LPNFNDhC`\Ld`"fg'Wm'Op<Rd#(WIb0F8I)b:;SXq2*D8
%.`UNP^Sj8+]%:"m^JfR.&J7[kJg)Tj%`,dL^gD[3RRM.s&VB!h+@8NkpdR&*WB:lGY/?t;*ujL;d9Uc``tZU'p<t&%NUmj'USk/H
%io8S*EBNS%4L!:a>&T*W0SQ/M:iR\%8>[8K!#4ZVq8Mrj34mH!q[>f!H6Y$kqQ8*-`486ZZo6r@`7hXDJYZIo=S.?XOBdLFE-ie*
%hsnj)AEC)3r,92@#u9fT\0RD_#epfrHrb=m65/-njoUB2<gRR&Fc108&c7uD/CF&UKf%TP2)NWtpRSNR:)>RY&pp&K8>jHp.*gS4
%39l7?Q_.Y.pFLD,Ma2Q5350u5n,Djc2SWl5hc8,"eZET$\/sjS@abU$cIMIP3kF5e?]l$f"8,:c-rO+6$.96\U^\F,!X\V^D#)%@
%e5hgNo62rAn\-%m!H)!/c<L9C3DP.3PQU1#4]?/e<RU)RV<7SbopLn4Ht?(a-`WZ0cP3Y"'h.(NGU3lm^TL)F1<&Qjir6EODK"/>
%$E5GagPj7@at]D?USe.>h%g7k+t-_L.%XItH8&08R_i1J_$o.`2sj)Y"\e^Igqt\0U,Y!_0fJV>bmd7T7B8i)TdeP&Sc=bQ#[BGj
%>p#PU#Z\-fH;FkZ%2L0k3dK1W0g+9SoXWr/DL,%Z<t7n-O+Qs$FT-6F!88(S#REW'b6unOn+A*')"+dekm\)J-A+qn4t:F'Nl70R
%W$/)cMQuCmF-Ag+XbZ?Ge(s*qIl?$=EMS+oh5#9&eFJbCi0LlL)T,L`3kN3g:[bVErZEQM*;E8H4Y5[X@UN7_X]-]4eft^t6p37'
%;GeaJh^RKH-(GoX)LNQ8eIe>e5aZN6ktu"Qie2Q&N[:A'k68S\/4"A>P@,\$//%uQM8pir#/=4,M7tmiJ6Ve6M8T9T'G$Cs=t;7h
%-iCDr;NM/P*CLETLj=k*"B:K)_mCon<e5jo;0t+pE@uB5PQ+TUcHn8H&8@J;'X4OGaN>[I&ooHS?;,lod<?R$De6t9,EF4+/s@fT
%Uri+]DCmZe$R*(UCC_82)#O@\67mY'11jHE6hpO[fF#(s@M#Pu/+W-3&??k2:ecU.bb1oJK2c>(KfT[_p[*k..>oQ""P`-4)fFG-
%C?\G5U!#9!XW@_pD9nqH#o0jKPpDTa)eBT(bb`Z].Fa/LhVhQ*+OCl7r/+"L#]G0%4Al56QB-Y,nTqJJ[DEm6i_[4q>oa%NdPZ&b
%IaTea#sr)1[g45C"\V@AVi,mjoMUo@0:3n/(sUdo)o%nRDF@%K&;AR=#oQ$ONHZekd.eOqEN\T<)r_hbilKJ!6X=rHG(*p1LJAZb
%Hc!QXGgg&a#BQI_.'&7=:jT&r1l]$,5`a:^k:NqZqOK*,kLV@%q54iTW\Q%YW9M^Y4N\6-pp\F.jARf'3[@G$TlAS[_d?]ME%!k`
%78UQ#_pC*]E5_XmoGCdPj9]6mTGH\b%,h[d:ji2V_YJk;!!r&T8KhMY*@^U#,?]W2%Y*ZkoXJBsQtuU?FH8Zc('f,>B1Yu.-pC?X
%dj,:MO:iE@@Sr+sN2cH082859\gUNUP0%iai<<(>]eg;s*!Ruf'dW*M'IZ!#;Y`dYLsQS0[28ug%_h<MB.K5T(/lWKI1>"Wd1_!M
%eWUAG]Eh99S9gbZTEZiLQ];?.G!o.16Mdi5^9iT%d*3o&,S3<1S2('OOMrAP+pc"8a/WTpFJ=J^N248N>G<*jFf5UCW*Vh>b(++c
%E\7rghRchn5nI@9P<tRl=$Y.XSQ;*f#t#q"i20)((-8%3;Fh^IO*a4a$;(BYqrVl07=\D.D$4FG-a>`nLgq%keT"/KMTIm,N?Wu:
%7"5]3m,jA7:ch=26g/t`_>adSR@O4Q?P_q8'Z*PP*(m+62%60Ekc2"%*"'9qE'6c3NulP39<=8blgdQ[Kb5\n)Rh/4iAOiuE][`]
%WscQ->#LPFoWU3^"!3TKiGWB#FtSna"kehV^Jpl'a02G)ZG[`n#%c(&K&W$5G$H$N$H]!Rib0Hp*t"5!a@<`T3fh%U72QB*j)<Qo
%"O"Si&CZp`7fm[RilUp/%V1E4J%a87/HDt%enmnJ&ja4X-FUnlK1[,`nOLSKYmr>T,\/4'gL52QP;B'*KE>ISUPHr-ShA'gji^:H
%<9%:]-.[X"-h6g3;"P['-@\C^NRGGKA1oZM4krAa+lXB&%Ee$"Q@q[CpC3IZ`0ttqonJ7q%+e+3Xn.m!P2jnX?:c:43bE=MT7muU
%+j)K9$7-0>`HG1]"*oClE3J:+BDa*h`8Dt]hdFRBc1#o==9isBDA#LR?G1#0Z!;d"D<%S]D/,Ls4X6GbkT,q"7?KMKb.WE50J;pn
%LAFW>A=l4;d=#dKhK6^Q"5$J(cl,GN`XaHA8#=g9e+P#Lk.dT21M%(ellMthpI&41-JjD.'YM>.`6>RMZH=G@G:J"g9Bhf5VsF]S
%aOjec2g*I2m([8hCsA*5Ua)&:+dT]`QB$#I*pGb7WOma@F:hKHkgmQ0S2_V'g;DudRS""aokYO]7D=o,k]LKi2l3;'#fKGAN>r8Z
%iORB/>-F3,Q[o"bVmZ"t'u;knQZO@=0)TO,Da`c$_Jnpf9/fl@,;W#5&!SM8Nlg81po;:PH0G3C199sa*bP":5KQ[ArG!nF[6.0n
%)K]O2;)IE"Eb>i4(,JAla:c+C.2\#s/,SE;dPrDk@Ns4heg\Md';SIo_aLeT)oZm:9rKdGLAO\8jX+_9;Addq:g/ADet3XcS+3Pb
%kg`Y](<><OF4[Y8>D\U:Moc4SR#%dS;hZPu&oMYYQj.Yh#rj'f;%GrEraNF]D\8;@a.HP4lRTo2LnH#j&K^I[8*3U1*;sHh5[fWu
%b!2?HA68uB`.bpje:)n:E?1a***8ZjUb%bLI8,IB6+O/f8T]TO%A[bTS?bZhj-2t][7,!V3skQ-'c(("Xh,gU?p`)qLpt7L<TY^k
%1e?t-s7V@BjhoB>G3Dud-AOXn)nNI?bYY!XhNZWfnfGkOfbcb"^f\&ZhsmM#BH0a"Re1tsP=&&sdL%BBi__8>,!qVjko,!OV'C*s
%l7e>h5U`0M+=J8V:@oY=i`8sTO=>LRpJo>Xfsp_"?Ya3E%]^"eR(NtoJl7gZ4HHEG]SM`-GLD6CSNN8.DC>G[]1a8&3KuXL)f#Z6
%E;&5%\cPf/>ka"LS/^7S@aQn@]U=]pEY1Z]Dn$&,O>_;r#$3T0_(b`BU_GKg"Qg65MUHH^Nu!CrE>5UcnT[gP2L3T=5_d*c6[V<R
%%Pkska>#(`HAHd#DtV&(2')[`H$k?YBV[oJ$4pM+N5(h`huXp!!:?1T`CBuAUYALkP9N@"?)0\QO3-c]dp2+U30\Y\,_ChE]Mck[
%_V,\n[pOC^8im,s*>*c-*#ml@1iX'_`S2XF'H\Ha$7(4<4;Ft.JtfC#3H[7&,<4)pd0>Hu$G)SI0n_^\ckE8ae@8Y)q2P5*#iSJU
%8KdPmGG]m=Y#Mt;EZ#LSTV2-J5]#kq;O\YE;$CZD`m`jTDL%O#8:`GfW?B3!!#Lla:lFeM=-?B0S59Hq\A6)ZC>a*1@T!C=>IZJ2
%*?.!k2K$[r*9lHC:ImFXGf;tO>Qf<4?1]N`>&JF(Fpr+n@TXKNR>Ah#EPBj?oYjcjNq<c.r9,$SN$@k!Rd_Qd*Z(enknS/,Qb@?s
%(dDON#>m`djPL:md7DDl%#PQT6t:13eB(.#5mV5#.f[q*Q>!1)*eHZLPU:=)M_5LV3[HKs!C`&>S9.c)U,1Xj@Y'kO&(>'P)@n*c
%mo,l(,3j+a>p[Ic*.(Rm);cFm!fr6G6&$Q7JBb'P>@!\:G[s*odL`82'N]#t:cr?GDdl+e?n*2ko9J!j="Sb-B9$OPXpjagXta6D
%L+f"R]*rd'R3q6$0HQ:-Cs+YGNtR?5bf,c^0dtinW!n8,A5)`qcr&>?0b!7Y1-oL10]Rf3)!`ofQn24hpjt7+l(/H'__`Z&"dGNO
%SOn,s:sp-%+NR0f+YM&GdQGLE,ab8Zj5"46JC;gM"M'sGS4+oGLkBNm2._g]C@T1aQ2fasS+Z!Q-!+RE!q[T*76ifi]Y3LEIZi,r
%^q^2b@Jd`8TW;W)Uh#_Tg?=%TZW9K\iLH)WlS=[GJl#pY4Pq2hcS;L\UBqioV%U:Vn_i.kf::B/jS8]NhRi2r=VDcrN$'F,Dc3T:
%['hk<clpT#Qp%K\`E5&FLRU:_V<Qrr6q\);d+"DDE.HWpPNOK>*=(b_cqdA=T8K64?EW"A^]iJSO)8!#-coWo3H6I>=,.6B[LQBg
%I#^t#F0b19-$AYPZSgMFF\<4llYjh0.7qVeOT9*J4OhO-RYeHiX>(+8F[MdDd&6J)1q+`:bD:^73qUm`"uL%Dm7aOK*HHc>1btsR
%%6&B'4h[UV`FY;K8NaI=VT=\dFJb>\A.OVc,pqNc\b$$T\=@6dNKNXS6g9B?<`+S%kpi$$`.oV*D/A^8fNL;dRk>+)A/!+k;;af<
%<,E0[GeE6Y'g9,im_13ojBcUJ7Ij]dXXR5_I?L4CapQ5V9dDUf#":/"%>&MQ2TAQ?d`^4/M8gr*!O(b946DO:9'0u(dBJs,d0+-K
%(-CQ7R+C#JVW[L8WN0JX6>l3tkf;dP(diHpV)7$;L4Y:;O'BLi-"5h38JEZ5[5CfV+$5[JRom$NI2p=5:%ENQlP;$!Nh2j;%Z8@K
%@]/ULB@o0cD>*I&d.3YW<;7t#'q&=F01%cCn>#fl:tPg;m<pfD9Q\GkBcIX/Kt9U`:"TKM+$tUZg8*ib-?&jj'!Q.Ns0N;R;'rcc
%#:'6LI)d1#LEJchXsF@`Hi6dq32%mpZ$*q#Q^BNT_qF(/Q52o6j@(@_$g0^\[U%\0nbWjlTC\FIm6qmV\(moD*D8+Ci&=+Rf4#ie
%ULJe9>f*pu7H8CF;a'&n[T;MW@[0@O2-O2tV%VP[Aa]\X7$N@8oAPHJS03__=A^ahNlEUmo5H@*'Tf?fV]4$2\Dn^@qbjdq3I)RG
%&ESdS8(a6"rEcV-Hs.1UZnM$g(,lL([AtYE"bl^$>$R1Lg9k7X,qnF.`ot(+(2@)>-HM2e?R3k^.e4ES3($DRe97'XjLmNYib-Yd
%XQL_[EsUT$c"8h<d,X!L<EZr-1nO:m<D+2MU`o-^WYtn`$L@VMo'XW;(Pt(Nh.XV];WP,h`<E&Ni5H2FZ!\oI^b+81M.hSoY3a=L
%c-ru)Tp#2BpZ-)3/$MUdHtp7k12^p`PFH^#1qhHu1OaYGP!21Z?@*?F1I:MQ(qs^7TIE5P`=(>[lEHaga#FOVJb<G^59B)eDAU\L
%'@aDmWDujEaQH!>QF5r!r,DQrQY%^pf=do`WU]C[Je^EVC!<9O-54Knc(idVnI89gY)OL*"d]:&Rn;$\2>/k!2ABMZJreYZO="3$
%o1]8G!QSFiE"U^&QnP>/QLqI2-b3r9bDO^/>]l&ZHb1,^/b<02a4kmdqT/7<ft1aNVk,(5Hthd+k@qS4\seaE@bBm>`I<294.0o:
%h=SXVP.gEE@i-$OfMV2QO033u7<X@)D6Y2?eQ.H";PS5R<#I\gF<)hu2$;-60;4:%lZ$.shpBu!*SE&b;S32^*?K$+iba^6Kecl8
%BT`,g31!GXZd,Q*NuqQX0!ai7GRaCVIJ(G@]db/)l1=oA1!&kXpj?;_kO5^*+6#ob\L8A0VD]a_M^4a]qUB>[V&\/]E1t9%C/,6\
%]mcpRnTklY97KrZ:%$o+%\NK6O/&_QIR^_umh,,];Sad_)jah%_iuMg[W's%Rbj!(bfU;A>WJ3DT!hD.([tkX@c10`(Pr'\AE@)\
%jLO-&nTCQYGVOhd,u!Q\)tIf>dF9m_i2bm=BfXmUbO"eY:-qB=K;Vo+P%^V7LhT?'=K3ce"`^J=%.041="6d&Ve@?jOlL%-?$h[&
%o-WR&]'^<N0-Ia/WPB0dLI.>0/jZg93@\[rNXk#^--1AXGMb<iUc(EYZVMrA\C&?+l`Z4\\@&JtcaDUfka8nH';.!lP3dj_1J/G@
%[?>'=SLMi@Xk?c1r\8caGD4Eq$Ac1^+pKo'#QO.36t@.3q(WDq+;PN<q4.BQ0..:!A'mlZRchbNONIlo;$+'RK47t_2)iL74mk]8
%LqtU]ebgD>>k$*7$o@\&T;+mfUUX3b<fBY,LpYa5Hoa/e6ko]]7D'=bVC(^;AA4dIO!=+o:6-i\ZR/LnTd5@"+HW[=VGe&<1%iWX
%+T&8h`>_[r`?!),[Cg\BI^6YX-h/Yo?Besd9&[L@@I'@nP!51k(fg<*Cdm3)i'%!nDoDZE;.T5@dA5#n+U8VU2'k&t89:hY7^nB[
%[[^q54Mm(>l[H"lNrM3;%nhUj<%,smdUT@[l#@U4%6d2#,&Y<`]:b[`ia7"1m&PKiS,3`NcsU:e6!sVgi>O,1X3pQGb'^jekOAGQ
%K4buuFs"%XaeL97/9Cr`1Y#$@mroC$=GfP2^"bp,3O2P!S\*dQTN9)bkHuW>Z+iM0h'?@\MVd*+=@ecM[%*BjSg(:'d1l1KR4K2X
%?!4ujH(0UN,>#QaqVaAR[##Z.d*P`<rA;;>)p<dR$`I9*3U_f.2L;#Y\Y!B_gnTaac7(6.b,KoI7'kaGZFAb]._Fa@@We.&Qo(W(
%Yn3lKM+LNjKW]"`9llf-"Y_B*329[D`t&dN\YQna`J-A0!+l'/d:iHM<P9r[X5cb7_V\!(7qWWl/kM"54Mqla/0S`QJ=AHEI?[JO
%`o!-N7BY^(i&lW,Jt\3\iRP/BU7N_k:`NknaNC1uee:B1K2;'e"bhDK09%@-?7l*n?d;A.%fU2`Vt*GVQm)i62_Q6ocda$C@TPR@
%:]O($;+lhfheiSgER&ZB9OrdV"SCoTk<+T?bG<L9%!,1$;A0Rso_%buS4=Ad4OPYA"\^/Wb`:,NH`;X&8I7aC)M<;`YG7rIaP'j7
%gb`Cso8WoMLL\dbqAhB`XcOVR_cF,Qg?K\)otjmh\di"7\@dRjeoT+$.QC1G?!B9'J0]/W:_r9uOBPB_BkSTQ"$9+Jk$!ClV63PW
%@R#,u9n8m<*5%l2%L&LU\cRoh868[H/gHHV.&\%lrQl)"mY[0\6'd(%idRs-BcC!6%DCQ>muKVahqc_0h!fgB3s".<^Be@38J83q
%5h+Zs":si>ipH_6IVYl<3j0PT8.)oYiPYh?Zilub@Ws%rGSMMH8!>#eAkGC\,HsMFcB]<97c`ut#&Jg*,tZCBZVWi+UT7igj[:kn
%hm"8]SO)DB\isQY;l<DJ7rIAFNjD+3GWnQMKGH_o`Be\\qf!l5fhnVm>q,l-$P&f*22JiE_A5$KT&@S_[k2,e,V:!4#)WN2_Zq:'
%*N@*`UO1f^8L<)K'f]&;&mae</d3KtN>1!hDJOaLaDmluP96-%3i01O2="!X<#AWuCls[`'>bbgmg0(H&obLJNIr)fhEIa\q3)B;
%'rTYfj?&TnG4J^T0fJHO+pC@`C^AK;W!iht+Cl#!6o[Fb6S^,^aHhA:C`1MZ@R=rXp\ik%]5D@`o('mTP_>D<..bn!Fc@VLChEeY
%!q_r)2FJ$NDF7!U;0h*_i]18Pej,Q8"JVJk#!qkVhDAel(nt]WffBFArM#tA@?Dkk+.'kI;Nh'*93@n7RSK9%P0Zg'aU0f>nkqtE
%K"%Z2')Z\:]Ch]A(.<SqnjCgonj>D"T:k>@[7!k':Ltj&hTu6<Whg=Xb;c-?@_)/N[B[U$_/K0lGVN-3GhS3#`Z-TBkr*iN*F>BC
%:i<fYD;l8E<!)V<QqBhHe?6QY?9mmc&UFjP.CKo.S&mY'"RXR8beqW><k;WK06AJcA(5&[MVs@?[<*3$Ih/2O!=10MNQil3'ctO)
%U2TLYr`7FT]M^[&gkfem9t8^(egQNr-Z,V,/:bmC.nXJDW7?-E8F*+S0shIcT,jcSVc;)D?l:T?2mR]Bk?r2$M,1.G'R+_b$]B=&
%P1SKLEe_F5-/g'kRMZ<-mBf3KUKpY<7IcDfCa_A;KBuJB4NiBF@G2WE:Zn1d0a(Z+hM@U)lLCBU>'6Ks.KMpY2>PU?>F?&8@S7eu
%\X5_q<bDc*%H[0u&.Nq"RU5_@E]bH+UB`)%<OW+iJ09.hjs4S`FJ^:8SoBIPTZp5R60UaRF(q@?EeH'1^p"+KdlP)0PD`A2UBa@*
%h`Q%$M]bW!6lsVFUSC*4$b&LQ!851`'4N6cD]Y7?M)q'[%F3Zg69RVGZ&C;o/?+W(I@'!g+72;SeWM1b'0Mm19AB?WMO!VVgq*r$
%B7Mc+^FM]5,hr/!79kkmV6=Qt@q+$*W0\tQY-nLqP=4lpL>f"#Zm$eMTe<5]P$#a<_@9f*U*um/&hgR34cU@BF/0<<cF*:d,FB#9
%%d&d)0+K[``8'aCe!Vn?](^$q<0G:RTNFpA!cJKt&4!TiFPGBib(BJ0WNkH_4SREQ3D3](D0/2u4&pR##_Mc.LI4bH89mYV+Wl+O
%Vq41de'i)sVX++'R?."N7Y;u.94[Zmb]YWn[)qrdSC*?QQIfgu2_F1%PmJm%R8i(R18aiO$gCD.1ij\?fpN@0Ci*#SM]o1m?0Wql
%o"(A>'5\BPB%L?9%cHnU:Xp3!/a)tI(Tq>;:L[QgTN^toMQEKQ+ZRhdaZ4#V$X>sM6/?08R%r(9U2uPj6I@jN#<1]49j7_D'6GLK
%L-`,#3/hXi.ZG*tJZ97X2X'DE"n];V6#)+Rh)SbC$lSpd>'XIg1II80ncGQp3c,O)hVS4o!jpm^$tp@H0TIi[=:S4T<'eXuCO:eA
%Nmp4QgCe+fUTc1V^GL$1K#VNml/UWOb`?Yo>ttQ^QQ,p)WC,`P/6:4aVac"XdkQdF!GIU2'&n\3SIu)GD,#>)883lo0D=FC3c'7Q
%o<E^(J*ne&bTWLF%tBfVcTQDLl#86Jj1C27b2VPPcQ;+A^"mqT/p/#'%%Z`CCC+k]);UPSnU6,hMqh>(n8IBl,4;%9$%813%1OQF
%oif5;r;AIXT$%!NqYH4>)jmp*Y5tVi@?U@5p4.mfa,XnH^;m4'XQ1b\;EoV8@@khg2)D=C#*P=04Z2E\p"St?`(B_![Y2uaA*/M3
%F1bU,=?FrT?I&?t.aQ.qVT$3^QB6adc'NH8?HDU>:"h%7O,m2`@Z#s=0ge-C?c(ODo*Np=Iuf-K'FJ1BYu"7p;I8(9,>Di2cFk.>
%@A++ZPN*M)@dr_e!@hU_U><%%984<Mou#fh$[EXVqn0U0$b00p-"MC?M\i:d(Me6B[oOPoD*O8V9nKW`a@ta91://;l><O`'P4AL
%W>\jfN->]P(X[FaCS-9ifg44"ckL)8d$,8V@K>+;V,)K7e@%YOO<+]XQeXWh*I!`daL.0\>iKO7n>:#7EM?AMW53'#CUBAYeaaTa
%ahq'1]gAF4Bab^j7#[EAEC$(iqcPD"_F0>K6_8C9:i"EXNdo7oqGD.Ha--Q/?$$GgU.%0S4H/,24^85OZ`q;2'7P*Y880>t_V3pr
%W@`Z3f0[O7p+bXFj@/4;+@]L>?R5?.\duBgH/h_=a.oR&dYs^!8d1TPEh^ogPr+dJ=bI-i^fbMq5iKd,#7YALM\:BR5p/#=n&;=T
%3*9c3]kj1V5sK7VHU"RfcMps4meJ\rYUXEn+S0Smq*n*AFchcR5Tq>FT%lcQ?!6en`h3U?h9bNe=Yp1q'9LTV";a?-d*;^([.[fk
%n%qkJ)G+'cL*7B*&/8^Xm2GIg-(16sNe-sn26/h%;MOFihY.dfK`"B'$djZ"+?='ZZgHrb]:Yk]erI5rqbS0:3o@&#N@u46.NV?6
%d6k;$$*V\G"m(PULuu,#=#\jBk;"+=a;(iQ^Y`XF"VpEbP$24.Hb:66nLGR;h/`(6auXYXU<=4t,`3(8K1#XlK"g+I9g1s<S3(FA
%+2K+Wqu-2*9/4]OCMeb7c(\B[pU'h(i3eR>]tL$UbNYeEUX]q`acMF+7ssZ:(*hkW$4(DEYjAXH@R'e8JJbj-c&Tfb2s%_m/M#P7
%g)?YfUhcl(o*D[U`mVL^`t8?@ipP#n:t8Kk$'q4GV@DG49)^Ga7S).1ie1gBSs`GNXBa$%Gm0DnCL)Fn5$O*&;La6`M?jko6RbfV
%,slT7X3]J[J&5tNW$Q=,T`E,0W]"tad7G6(d@YGEID2"TqMUh$I!q)O"306!3grgq`c.Jjh]ggXc5^o=lJ+7Me\R`0)o3CR6j*'/
%rTQ]^-+'!SaaLSJ8mCB"hE3,qeLnmAea_*Ze*&_8LeqN^:k0`UR6;=mG5Z8->$=='To2T.P"&F"NQO%[NG0),NFk5Ve"S"pPe&lA
%Q6B.BB20Tr!+$gPZl$hD:jNHA62`N8&^@6VEuWH=V(J'bD%<$nqj=d:1;X`1^uURc>t!LA:l'#O4%*A[Q>!5nFZn"uT2]SP)XMJh
%`%;[Jm/Yb=MO5)k@QDJ098`<j]2b0H"Zp8G`>)B3Zc@g;\:sW-Pn`ohg4ttLH9"b'mqen\asnWk^6buDpF)TWg%^j[`-;rjUf(1@
%dQYriJQMYN$+Ad)b;4qVpWKZYs4F+Hh;&BVIq`5!JBVX/+MCF>LG("u+7oOa0^nGV,k[`WA7T]F/"4W0>"'!7JYae]_HT3<q]od5
%l(Y_ZOTA+M?XhHU:5G?CD2P#igo)9,PW;Oj9!Yrn?01X>)]r=*MRf]gU(f;r<i6uQ,k?BiH>G]i2b;aT$Y1]td?=l(TP?sI@_AT0
%6W!%18LletZ7N,CGiS(ZXmleVmq=^e/ZYK-*Hj[?giL>RM3G-DB3c'p`"aak5sIW1oa^]JT4jBaSYZh_=ldc<89#kU>h`&@=-[di
%6";,hgcGN_&h6`uE-2ell-)l(%quqcL3\,7&ZJW\3mB.RU5%OFejX'qSio(4mYkDUBbCUS!iF8W+.#=m/dc=j$Fsgq#Qmd>L@R=!
%8s;=$TGK2im^JmdEV&9mN8MD?^$@SSLRmd(39n6aH>M+m]QC^S9[cV_2\Pc*<*K#B(TQjqY37F86Bs[hD^2ZA5XP2\:>njO;*6^I
%I5.I(%2e9I^fT9Q6dXXEj=&fY^.#eB+BHS<MOC-(TVKOFNEN_jXhouDo@am(3,dC<@j"`98+U9cQ%Vg$SI[*(,])0M6\DW15L-3o
%h.0Q,5i&97)nEUJrB!Kl1\pM(4?GgjAQTEfDp66P`-`,oo?8kSXVH!&_Qd)"oTh>gie2"DFJ;Y"*k(+PM5=X7r:r&<6C.F,UWh]+
%QL?+EnO4e.8?Ur/NOF"iH*iHa]qC3-b]US)n6leSM!q,UrN2f3+^%sqR\Kdd.rjA1f>]dICOX\Yp8/0E#.4IU3Ntc"9T:"@m?T\.
%0BTFX):a&FD$a?C2-f55-=5*T6)-I8;Yt%G\nM$"*`MYQRa*4[Ec\I-9(30NKk`<[gi^eNY1@P/6q-lj$n9h^Z=U"d8O/O1E`##D
%,NM9UDQn(#[:/X=eaVZOrjk4W8+7$AJf?I$!?GQ?HHWLcO7E_P&q7YH6<3W)%:m\sM"#ehO7q%OCM.rFqL5*l'G':FoYV.\iYCaB
%fP%#KTur[?DabP#[8_`TFC>n2fl1F?_AjR=`NgNK?9:c>CS&WsW5F=de<uD^jF;?Kf;Q0=itNROUko;#nurUDN*q<\;/)&Q%I.>G
%,K9+9dXTF:V<YD79?p/an6qP\03Kr`<9`OT:(R4BWq4W2+De`D6?P_r.pV?>,^[pP9\(b1[c+9J,f2a6?7G_)mhbriKUA;u>GETO
%G&&-Hk!X"OEaic0oDmGEr?RgBGDPBNT;/hDCGsUdg;?]_3D>_@+)!,JUC`nT'`&S?&<0mDE^RN"l)hq`&57PdA_8PZ3B*'TR!MLI
%:FDEG$qtZ8+drHY;?F$5N=9uF9sc6-6>(;L`6Y1R=GLRskLdUMUVcXU?ZreL2!!\UC?>R[5DpuBW,Fa??c3\ra[8RrGR@aNs'iMI
%&CbWRK'&5H#qE!2Tdh?haF#r_1q//W)/_MZl2"!g'MYn"HRfq"[@*A:_CE`OEAX0Z;7dhrCD#7)#^+n"^$B<EAt9hg2MI5FU=E]I
%VWE@eN0r-]OmG5G0k"*3Sj7Z=R_;'nMr>NeirlgmUf&VtIF&^-\f[f:jNVmpTfR:$_<gOMJ,Ztn4%b;A1Sn[r?N#_LQ'2WJHL)eH
%nOsn0(GOTj>W$ZSP9oD8NoKY=IuqV.FG2>eYr$8#N7Su9\]o$;Q[s/A<cnin#,k:HS1!ub10"d)f'A$_k>C,CjtC,r60$L:X<>So
%mq,nSE/_duVM*WL8IpA+jfoTs$hQ3q&MUD33`E%4-S\\URAqTk,GG^TQBgB>O*KHGq[<$28O\:-bp?)FK-AK7UC9IeFm4L4Bqo$-
%#W(0-[G8NjYO?4q4T8s%!C-,WNaRk,DEO'n%FFob#adi[6]$(@oG8?FO?OALQH&&P^P*M@o;Tlm4?pdh-PX6Q"ap<pgqY?r4[Wn7
%e*5r7c;/q[0MSGYc'joC0>Y`5DT_p&)2%9?HTQ]9@,C?l]Z$R(s*Xg1/A2i6"alAen$E>Iquu$?3`pa@jH?70/@B_7%;!CpM-e$#
%K_A(G*id(>5c@6c9//<OqH]3HJB&NBQ/,>nQ]UL?0rfPIZ%eas%kg[i%kWa*6!eZ:Gp[i4G1CEn%.W_&p<[Wli5VY)U.K1QXJ@nJ
%I'$Gk.<?-^fcE2#5in0^6^a'h)Zm15SCXG6@&h.i6B!a[BT\L^N6m\%7HV-):'"B#D"ahkm:5I:]krRhIIb:gXKIjoHpn_6e7^"+
%f(fW7/_S@AJg,`KbuAZreQcRY&r^AMoR5l@!qun-QadXf+#A\$Qk+;[,dr)TdudSL"!!KFF7ajm=Rk!_Iqp&848<)rJe4:T^cqaV
%Le%%<4;U#d[Vu%-^U`qlr7a"[l^<T,j]3J(UsjdI?[L1U*b,/cOFh(GFXmphR#XbQln1u9#hHR:#qtu,:P7W5r$,OG;Aif11kt37
%-UIof<QRu>FiZ\28;FVRI)NI+ZDUQGl>d`0h5T:YDBA4J6$c][p0"sVQ_&![hrs@q?k)Hlm`cQ>;_B2n$r3WeQfMU=:$.<ON]3_K
%?g6tY&VsMjBg9(>a-(rgS!4B/[X^HBdNS:.,'<g&o/k9TM<B'6g.NO%r:#g(b2m7rLMoi,e1(RmXtrp%k@GB\b5nVKNMtGX%*_&c
%h0CPP\2p'3^pdD7<%#>J]/T%K9m7#jA3*!?Xt+Q8!V&X'@mcf[CbBRJ@P.4bNZV40E($S^:iCm2fSDS,C2!cJo>7j;Vimc'K-j\G
%;rXh[Fh:YYEa698BjdOFQPSBdWB6O`dJ4>0Ek'QNrOBFI86pt'*W2B?&aV.jm4:p%AmF#OXM&Bf'stI'O#BX3!#TV0Gm,fjJZ$sP
%]kiV*WZH@!]t3+bE52(2^K)N6H\O\u2;MDpC(FGteX7C!1@]D*g#j]lrE;'W[4=lSrUqL?'r=B%D#&(m`C_Q&rR]N>2LP>.Q+@ZK
%<2QL8U#C6NL9YDqoEn(nBQ0W%G3YW=q>"iCib3o/3sl)_!p2d'JJ./s#B4o,>^ekZBXLJu*SQfLaY7/@D&>F]WY.K6m$s8+MJq$;
%V@!3hg0"#l^QeQacc1k'+Lq6_jWnTX[b8nPBnZ6#K.1elg.c^gIb^4a$Zr^J]I$+_Wu_6]@]fgso[>Q`!_1;cqUg6;Ka@?k;rfUY
%af9OJ?=b>7=@V(iE@S"ng;GhAia_k.VYflCY/F[6D:[Xb!lH\?8/G8[^j-hV@MleZ5'g7+fg<,S]B&MdA<@ruRa(*MgXVuokA5'm
%oq?;qf<eT=b9W;GoA.a-94LH"TH`,kGA9UH8.D"J$&1ce_49!DV"McM4Ze;Pq=G%c[VEN!1d6"U[u*%/E]*4.#\*VBI9DSGK.8*!
%5Q?@nZK<tr&?^G+'kfC4j\aiHHn$Qa"#&V.&q*+GP5V@).3`SP7$8[Ol?JG"da)l#pG$gn9OK*4'm-kY/FA87E3DkXVZE2VCTa!(
%]Q5P7T90$GGg/409_04Le7K(dO!gY92*_upFV-6.$ciOq_F;lu[Cs_!<JmnqmeBBXl<TT*^qn10WS=QP\A2rPeR[IR^e4Z_+,bhV
%_1E6"V>)ZXZY]h<<p,Gk3V4SU9o&_k=B>rDj5s<f#m!#qGcjS\C7(S8*(KQY\q2rYI<QA9*G:>3nDHTuAKWTlqdUPKh6m.c+#\B$
%VZLFW"ZM>,n=[sH:7=Da.ot"Pa"XU?2nA6sdGouA[P#Cck\uXLb5u9!(jk%<rXD$-%mOHf)E$4'X5.'.(?N^;X\NPlY7Bl"Pa-0a
%V`Z6"X:tqKD.<5]l/A8Ja#dTLgIUac^aLZ^Pq"Z,gDn>GTN7bMo&Hn"%ocP`VC<IUl-klBq$J\p-RMk6_W<Ur]LGbd4Qe+,XT4Q^
%(O7?cLlNYV5tLKNEUAuX2Sdt%p[p>!$?^AjjdLU8a-;RXV$Yrj8V'T*1T^^(;6>ACT=VK0*S$cds%2#T6'7ub]@YbdoSW(Qc&Xi<
%J=@t?51^9Lb'[iuk'\T]Ge>o'hL@kWS1^>A<K^,T:`nO]F`a':ZTA40])[Y]AZ!<L"k5EBM^6[uc'd:dOOJ,h\mlgVJ+H(;ME'"+
%oIgZ%?R=Yd"]8WuJg!\$BInuk2s?&/"g%g9'3s/IV9khpdQsCrT:'gf6Im;p8\^c\)jbYj"\Udf\=jI55Cs=i62[cnRad'!Y\Bt7
%W?%\3aT'Y08mIhW'=<Es7qaaWnnOZGF]n[qRNsC#6>H.OJrQ,(WX2Xg6M#3!k9l:4K*N(nS"eu>d`KZ\a_)54.@8Al+jm(8NXB`S
%EUG;tUj#FKJ;CG,H,CVd5XeYm[7_c-.Mp?+$6pV[g7k2oe<eI/q+@+o)#DH5KK;78m%Hl!7McFeKIC#!jJ(u!H8:m"O3[^AJ,N1C
%pm8bpci<S#YQ+03s8&Y.r:d,h&_MR=\Bl3KTE"]YTDjndroIMdoq.lU_a"+K5CWJ$qj7?]hu<I"I/>"XrWdiH5N0@pca)H+T&i--
%bFr[n-CT5D_Ych41ni1tl>rqJbR"WI?]KH.=TR"s`k$ete.:.:"S/ZrBfuc7^Bd@8_IkWTc/Y=6)!km6F!R=kFF-6DHt;9AK>0GJ
%_.[uf3S9C.0T#/(5JBLY&8JQ+1R%rD!^hMon;4*3.OL%NVWNo/"[Ij,S);%Zl7XhP>r&/GnQ_TEc6;JqQV\]e)JhS$5P_+8`BZDs
%4:C+I1Qb=:!"<A^k?fHm_*iLMr9JuV)CYTT7'4.`>Z%"0kUVu"dokni3/!t5$h!4HL7P`JF@(#KN8-LgnQ9IO@E2soTCuHP":f;9
%bN^!=ODbPXaKYu'frO2?j5INljk,Qh+Y/@&cE4%6?%0@WjPp<ofp6$'[G5%,_ZTJ4!tA_iUen?DSc_T?F?iMk+Wk;+fa:TGoch-c
%'H*;2.^`_<;TMl@@ssnA!,2`e?`R\Xf]\pGW2W-R-ZCO>dNO7iE8+*]j<q(NL+o)Z8t04T`:As&891b64sUl([I\Jb]L<^I2?!=M
%aWsLq3Z969Ak/JSlaN=OP05p"II8FI!ASd9aSjc=j!KcGJ(=TJ*]*Y,+&6hk]psjAg)43sB1FcuQOS,EA_$VLi0#9Z21/!Z8XIc=
%^24+m!n&`0<cB/b3?u#lXKh#C3D8fOCZX,Io7kY1Td@fh7ahoNJ#Mi*&l)1BFGjWaFnr=9llcr5LZuZ!]-0A(0f9\6"q<(u5dWI&
%V1VT&UTDk!KKMV.ar8M.K7r+J5_2f99*eS<>n8AGpk/a#p^6XE>e(Lu_V"_;Z"%XDUeu:M7GLmNlY9SW>[e]$FL?q4\JA>`c)fjM
%2/`Kf-Rq"X]21=H:10=DNm`%ODPJ"O.4;r_EkH"J*-jf[0B%p$KT#sD5g+!HWp<]M5Z&`S+"IOs`$W7JU&tnAr3Qph0d1[WS-AWb
%$Y6q,^X%V1nYqWBDN]U1-D%d5*`\`N*7:9ur!XX\3t`fTC]Qi)U%dphA16,/IR4,(qQr']M7<qG4on9Y't&/qYQ\":U)'C^0bZ*G
%*O3%7fJoj"knQs7l00[U&!-C:<]7=fAgNt43]o7do4IDa0oBIHZ"$5,2cNfHUCoJX,/dbUCfitWTbLE/5R4a?3#>mrc19#.$BQ.:
%#XSbdUoMrn`=pTE4lV?Q*7E;::@pL]02hStYYMRg\6-n\@nP$")jm>+N@#=-Q[,oO7='`&\T.>KF/""Dm_P>RRSn'5M9]Gb4&EaJ
%()aa[Z&gq'Uqbl$fu4u*Vkt6,TOq!LdR9)N\c)79Lb*`2MBQ_]:)`>SUJA4[ZjUj/e#=W'lMsl4WJ%0,]i^^R-R@mZC4bN>>m.]q
%r0n5C<Qk5Km^#t`ld22h,2"(?S7&<K`-jJmA@`R#N*i[gG?X]5O^D,%rOC:#)S:m[=C?/m;n#:]2Wtp?h:h<K*7St<H=Lj(XNEtb
%XZG]?Y6qEI=jFTom6<tY#5\k(UP9-Nb:>0,N_n?R<0Q]l3F'`)W]gk!j]9"j!I^EjL47Kmh(<8I60cB$GE]jgTOHd>5j+q%aeFWX
%)Kn5;JE!,Y0<D]]6]2`lgcWPtOF-*H0SKD7mJ:;8HF:AkBCnVQpMB*4SW33cB(g3KD<;,AQ0fGN.pYH6<DJuTlP[\BWi+Li-6<E<
%fVXP+]nPt_%bH:2LLm8?4I&#%jB!]-Es1rSmdYX:rm*N`,6LAFC1]SmoQ_[lpNk;k.Rj'9_Jn%'@3pcG((g>cO?e5_<E>dg_5f):
%[ED^i0%@ip5V.YeOor6R%uA%!NT.;t.#]sUL[cWMTh@#&]aJ3'NLo#m^&L!fC</#-"RPZ?o\pWT'IclhM3aPC%R^lP3sm]Bc*LA+
%1\W%'0:Z"&gL>Yq5^qdeIRP*o@eE8(p^HTuAed.2J4JZcEG*]NEPI5bF?BBYj;Fk$NDgq=/m0O\%Xu&0e@$%3?S?E]9_Vec:-L:5
%8%"f8-qB+8%*3tG/@/S\Wdt_6.$XbQU1VOs0']*d%Bn$i]Bd+d;:TM-$M?kV*@a@4W/+Xf;;P\g>+g*(hWi:eZ^(DDB$_XPeAl+9
%prTI$E=J34+UKENTS;Wu7a`pc0qcR'`;$/g;JITEEnP(BM=]>r74\4D`dSZPbDj]J`un*\Yg8enh+`g:o+GL#.SgKHcJ&j+8rMe0
%DA6s]\N2hE1cIIQNI:![5,EPUY*JsMS`WX0'9WG*#CFIkDf6sW+1#jZUdrpgd;_?i_e!lbdiph"dE$glKX^J3d&8-0s&'fkH`;t(
%BnBP&I_n22VDDSdfefi7C5Z#;]nQ2.c+T4Q1+RT5*<5hW]anR55*pZt,dg5-I0<9%HG.AHRfntj!R1><9op/LjP_Mu]3J#-E;T?+
%Ra?I)D(7l&n3t\PVf",M00sqR$7PVjZ4O4sim+TMGaEFgR22k,VPk-<BRZ,62LJF>o_U8d,)4r/85[e)%,ueVH%QF\\TC<1,S,4V
%QMX;a'3#c7X0mg+cW8Z[0SQTV<I<gkUb1>_Y+fRGlS2)GB0n4:0Bh"GI!qAW6O()aP*t\E7:J`C7Rn.R1JLERHlL%/Nt=*f'8"Ei
%3n@0\ks"A,<@\X4)BdOJ&qN]O+B9!$lG(CNq8u5)U*fT)5HSrc9(=s+aIg68$WVG(Zl*E3PN)E^n6H*c@lHaM31#:8]3;g+8"9^R
%$6&P;D!Jq2gS!6QUS^I-`3ci6T'_P7.1>eTjqlL_E,ulbQk\'SJQi=p7PQ2hV.77_PE%n*[ud]H2!]pc9`8C5;O#,&9-nglq(*(?
%*onirPH_L.c7I"5rC2V6cFaLY$;:DY*+.RpSg;EK'=.Ol\?h^K?d>UjJV4LkO;Up"$l%DcTYORneE7ql@^OI?"s_8i++QnY/0BIe
%EeeV+IZ^7g.f,5NU4)BAQ&*Jg%X"c)#Co"PA*VPfK2m4=;b&Cq5[+T_8`V!=V>;!ZRR.>9m4YqXI,@Taa8&GK??Re#Tln`#-4:/Q
%.D*GbF.U6d:C_SDITl,`!$Du;K9YH9gk:'n#,som99";Cj0[o/,2//3SdTX(U6-^1LUn.+"[Orlj6E<pSL]T(4ssLj9K3##+gm?;
%L?CS2K$DF"qTuG`0d40M*l;^n46S<'%+hm+0tu91Nm\[S1#'q]m0Y>IY)>BoB3[.=i=J`1RM;/W<HXdP5)]r1,W6W-B%H,8Cf)?F
%K*^O\eWDT=<k"aK384gcrYu!WF$M3p$F)X+9i!,#39O#cO`Fme7]_B!$D'ZlWkB09Ad=(ej]6gpIpKh$]*IdP_6g'J6I\Y.MPbD@
%D`4:M+F&A:@_O1?@ar@9jCZ]REp=%J9;R(V-(76iR6Bgj^fhALkuW6TI^0?\IE4M*?CY?DJqh)TK$@8-Xb;H5`eX54.iY$&Z1m,:
%C3R<r1`u/bZ*lEDAc4Ahe-8._6d(8hl*i,,4T%H55Z%cK)1;)IRH\*J'OcNBMDlqK;mA\eh/*:sWf[cCO4Hu]Jm!T*,Y6(pF\2fD
%S,Qs9'suT"X%J^in'J;T)qfV?<sU.P">L+D-,sPX0&*q2A6bdPNd2IG[ppULi:)m^$8Kr`$3a;=]Z>#Po<mnHVj*e=[ofk'IVtFL
%YtnQPC^hb=afskRDa3*4""ZTo#GASiYjRf(lGk%VQ>+icgB.A."S.5ONZn!AI?Jd.LI$/(V79K@AA,A)l4$'o0\WWBC0VRY_sgCn
%^jEVL#YB9iAi$4+(IQ79;j4j%H$Z[s.&nWR(!Fn!gg==hO2)3N"2WO)2kcn>L617g<'6Z,nCFt5c)[=t=Td>dl&q=j&>]IHQCr2Y
%E]aM7(+6l;D%kc-f=n<9WAaPB=u0VN*qk<")=g!@_q2RIY/Pj4n:)JM0&G<<=V8Vkd`(_0?pce"K,r3kk(HY03P`WM<<&8T&@jtH
%4-qoJ.8"eTJ6eA1?Q8Kum(bieR_LT=^+MLF;3R(S6Q!QbNuRhE>I3kshLpB5+,g^rSD^"AULKJ?/Kq5B2/5;_PK<oc((m\c#e=?e
%OE*p%l8+0i:".]gZ/`Lm[en59Y<0#%ASa=-lllNT",N)0OsO+&DKFS8Kfkc/LKYb>Zql.Jr]n=W.dMI_[i[sVho\,R8u93(,Y1fD
%m%lVO""Q/RNjhWCVA\q_;)C4eM=-pZr&htkp687im(X>`V?@,qc3W\r2)E-8".2+!E%3/1b<]:]$#[`=ReGUXG@L-7_n-`_kob^s
%8[E<MEm&hEi6nF`L;W.!r96JY-r<DMU"5Nia7bci;NikjF$^Tl(S6dL#!)LZqDdqR>a>dSH[G3Orj@7AN/5!\GM.BV8BD%#H)j.N
%+ddX&,*RX0*W*.D^6M4_Z=:P\1:(=l"Lj<TFs6iD:1>"a+!RC?BO^LHC!]`;40gXc91T'[+-La3/C*V$D"94A0<^GYm9%+Y0CHjK
%^[:/a3W7eWH#M9H;a)<#15:KS)/qJf3ZEg_k""!C-3PX;G*>rKO'b5`!!naf9[rLdaKr#+V*9ZN6N_Fr9-'u<46Fs.Gh)T=/<*Q'
%/dfYCjQXuIm2r!uTOlh$02T+,F=U=;)OWG$8gJ2ScST!dJr-I1=sjLj_U__L>l6(j/^`J0JXggsPJi<?UgVK`3R$OlN$*m<U=Usa
%'B6)iE@M;oGFgqqL*B&c&TMP3B$fASen7Ws[J%D&=A56]b4#U,Nt-u'9L9?&`"hj+gg&t*,"kW!^G,fd(!Wn=n;`93'Sof.I;jIi
%Hb#F%X*`CCfDgD*?h,Ih=u*e#oHja^M4gF8R,S#+%765D*=Bj/.K(9#K)/RE'fWLBVU?EK?n-;rclT;\bS-r>aoas9<J'En5AW&'
%FGt?,61i%BegQCnig-Z4'CF"+3%@5or8&?Uc%deLR0t3NS_CU3l#7Yu^(/*O-I[&O)Jq$=`>7HEHP$CHN#aBeg%hF.*GE_I4RJsc
%NrU't=Y4:.bGg1((Ol:qjoA"B;=>gY73Y#ATu;V'.o_R85oR)(/Q><R0oOKqIMU-tBDP!N8EGta0PJ-A/nc'nZ([STL"ECU%/eD`
%W/ABN(@"qM4LCSPE0<Ht/OgE^\k9M6+CDB)2a!5ENffT-Dhj?gQ7eSV-3Q/0Jmg<e;-@3sRAhP@Fj!nR'1JQHpBo-CUs7D:e5.")
%0(7o,WJfTo<ihWR<]1WHYn!\TIio1<5thmoYtHoH5^+*#D^tcL6Ha=/4X22g+T+]JY?hdaat$iA%T+N4k2Z10;C>e-5"+.K7b5'/
%KF^2tn[YNu4)/7V3C.^R\gbEeSn6jL;s*ZU0>"7YSA?AMeA5sB[`g2P!bRoX%#)"/qcU4upcM%s6p,%+h7)'c/R_lmnMg!4j\7:@
%$@,GY1*dm2+0#2UoNCeje%9V0nj04&%$p/Q>41Fg[r,nE='H=CL/VGFeIsV'pG9_EdT>eT^+OG/bP_V@$4`Q^Q`H_'RN@An!(V4P
%"beagl3rski&=][)4ajMO7"OH1W:gOMD=3RY%#QGiWGN`X:.h<=Vds4!/.WS1T7/L%6]-[c8O?3oGUO`=52-@'GMQJkr4hBWlMZ'
%&?NL1EdrXkD:$(CBp1'\=^OO9;+?J^Y+PH,Oglm55qV$dGGY:k2)I3/H3]oYlXb)b7:S:Aj:sPPY-ip<FdUd$IfUDlFk>SdPfd5n
%WTXGG=aNC%h\Jcns7s*Vmh,+2V`Au6WYVBm^Rk'&0Z&,3_O(Z1G#hqg?jeWY7,cq6M7B>]fJE'8">crRL[/S4f"2Z/(iJf_,BbLX
%'*el:V'3>fK<F1Pg>)A(<g4R.o.I!<#i)fF6uPfp*99IgdL+sa=nMg.TOfH,hU!<#fjPFD&5k!';P'L,\>B.n*Pgm9AFfC9Oc\B!
%$;5JISFP[*6N,&[P/K_d0Uo6q@cPGa;6Y^)FWasB37.D./Nq(:1smTc`n!PX5[AV/qOWl6=5]DNrQ5=!EJ$m4:acgsfE)eA?HI9,
%7jUaK`YN:JWuRDFrZ]AN=!rBD8Y#,uAojW"M`Pm_`A/;_?@OZ;*"NF=F+M"F2Cb.;TJ4-/%tV=)S"d6'[MCQ6dZ&kdjJId3-Q:`Z
%KNN9I;*k[(If-]-pNjZ*,F'K@/rnYH)m;H<EHNFjg`S>=+Ph8oET[1ERL.ZnAWD['k&]a\kWRW9BIdn*g?4JtFY(rYOahq:TDIm6
%e^rNO`Gd>Ok9e),-\]7UOC9X3gq"\*lGmb@=*ah[Ig9W4>#2OrZ*HMfTMolprV':d>u6j`c.`%L.IErh.S<W6Z@]nj6#FBG?J^qC
%XkF;2]()d<'kO'RHCVc-e;a(oYV9D'_b0n(;tfOXrC?4Q1#S`;1ii]IY)EJk&et--I1c%HLW3:#-%<>)n.G+'7S;1jH)G,aQMJ!m
%:#A)$^D0I0_n0.#cu\D7Rq.6E?#HW\eWAMmr(ilo5S]+h,"Z^9_1Esr_V:0J-bTu\H=KbbEm:&Z<A?`264LGh$/Q_Y^j"p!ar43H
%2-(.RA@eFHr*@\YZ]D^>h4G\99ArCCN$=\Mej*SG$eVGn0t%+'d0CXQk+Q#_)f;r1a!?V!dKapW4dUENL%hhHmaChJ/iGu`]pMeZ
%H:>Ng6/-Vi,k#4MK#Ze[gP6l8GFGap'1F=t1q[ju;I,L2Hu5J29IXaVBp.<718TA$N-=[N!]<HYMK\I3$Ec^[M2g[*iaL@A3l.OI
%/W[M1?bI*NbTKaK@q$g-qQDQ(`Y&uf772Y3$:;(r+V^[O0VN3Xd[O-!r"0`Rgn?bM6oXU"qBB=+?LoX'j[+J";,cW;'Qga)-^FuG
%FB=o?J3mUuYQAAFR_K&,V+0*C.fZAtpNQNbOj?_#VLpF3A<=+i8N5\M!]!b^<e!I722m&[IEF2hrW;,Cjd@d_DsH'fH8g.@16H(J
%ep'o`Pst5A4Vp-^cl[";$]&$BF"r9XZ`Lp=n+,MAo'a>qr2r9QbW=8lP4;!'"Q*S'=^715#H4"qZ.V0k#BYlpPRl^n^-N?'q+pS9
%"f5l-<a9TLMOX9bV$,UXBXqXSqVmI%'L(9U;%&p:aJ0?!\0C`.&#CQ[8@.M\'H%T;1AS^^:G`5c.%K^2Dh-YX_?fUt+%R/?e(6+t
%L,("P-"Nhm+6I&th]_-=H]d1m$B@a'B=39kV!#&k-GX[XAC;19^*KijZdHjJ=k-fB9[oLgo6BSYi-Plq<\0$U=!SrE7'b5T49eiI
%p_@9qat0->5+L9.Z<Pg(ddW]JH%n'D.?]ga&3V(NX5nC;7/<h*nLQTo$&G#(26k2Z7W>YeVca*E]!:_!))]?RCO=H&&O:2a3&(n5
%3am+Rm0+*E#3;lQ"5$SW%'A",oZLaY6l?Ob*`c,@M/FP0GP@FcdJYfEaLaN>6um2NV94Kn`"rG#bRe/p\%sc#8bO!0]HN*4HI:UV
%#3"3b/7?JN?&F\`Lb>g&`a,=aD6G)g_HnF.N8S?))-N*'OV]:]GEPphZ2`MbrNL<r/>XFOnf^,$7IbAE)C^)fh&eT;T$9>]g@]jK
%:!+_YVof;O6P(M_,3SuX*/B?'7SWB^]b\4f/E$'Ta\PS*!T?idq.N2.5+\+K^"<m3)oOfeik=0Zk\#In7g`THU3Q`@o;sAhbHMBb
%K5<sof&;-6b=4StPg*9lD-P]ABV'9PUpm/1-#5Ee&4L0`B(r"N&jY#+;g55%"?WcBVFDD)QYbSQfpMcs%p2=TqNKRYMpqtfdGWGI
%M"Cq8-%T\EAc.;D&km38MhEdP<CmR^&$aO!-Z^'\&A-6)QGI@eH?kh/p[;MY\6kr33E6q@\s7XTO>2*X7!B3pn]k1Lq8W3DFb>NA
%(rHf[.>KBnG(SZoSaKg@LH??XJCN4/#Gu)C]f'?4<.C6DaeZjXe@ON")gjZBM,Y)idA-t+m("dPLp7(V&5#iKPAd*e;OWm^$U^3-
%Zl,;u6haPp9*c^f2%]5`./HMOLpo(N$-'e#\q*%lfoNOgQr$t8\k;#E:/AD/:lnNLr>`\6Tl0$iO=XfZ@aWsEo-5.=#.>)\H4G3D
%_cp:F^SGm2L:l:sQF"NI1Fhf`"gd+0G2u=(dLAT"Ju/5bhA'*hge'-f@9@>Y(A.hr7\EB="^)/GBjls.hiO'KNQ2*H8L<mdJI%uq
%>)EQ9mW&24>(Np4^kG3RZPetF%tK>S!l=$*+jdN/,8:O'eRf&+^s1;[,fdDei[V06^$gI+nbsG-3OP^9Bth62\nusD%F4W^9b2<h
%a7PZWd@T""@lO)/-1<oYoT.QJ:(PK:[F[eQ)3lS7qON45plNKl8I1,kQk[TW-]NXF?TeE:=PChGE@l5gpIF6L?I=fqGs">23?E^Y
%.XcPZ^DS+Y_:`-`N)@]mDKXe]J\Z>S&NGM7q#@gsGt#7b@9+XUPd7M?NOZW>AJ2_Da(tPN=7k]1CJ`u@Yf*1f\'d.@(KOtPjM4Y;
%iM[HHl>5F\(Ql1_,0=p$]F8/-ok'l)`7?5kKlg8dLIa-F)(TXkSn.]&*#fHYT%Z^LG3R:uhG.;FRotPm,Jp#SNaeoq7DrAk$j>=1
%St-V#1!!5d:&QqC8t(P';W:[Yod7uh"NcJj\S.j4d2:gHO6d?>%R$_AE5W?dSGDJ[fsNF952OX94:CUEAA5O=OX9tU>*-;h\2UP5
%_=P/cn^]$J^,j7b1eC`V<)I5pn+@H9^L-:l%]+DbMj='sH@s/Nm.Gto2q:j?D="XqY=#APN3U<>e9gQ:a,PSP(QS`0I[KeOd=lCZ
%^a#fFO;@WilI8b]S1`S=:*bhk77[LZlm#G58Y3:iQ*"VjkiM=7WkGItr:lVabD4t3XQI$Sa9;iO'pU>ogg8I+?0cfD6PV'bL)Et3
%*U\i]Hu`ajnY&[J39#>-e:>i`WlNen*BBC3s2I-Gj1JYYqgbFCk6rT'?'Ka1n@IZ]&j/<5f[f*Pl9\A7PkGS8!i+t2$iNAROh<.9
%nbqVI\$k)t4O>Aq04o1f9(l?A>ocXP&T9h1.;j*61(41)#XOuDOo&6U7!P6`Y)+,280#TK\\g<L6](kj8+3f?K-86j`IIu08h#sX
%6g/'f<M4V?YH<4q9"YW'!c![Smc?ru*m$$75$meE7`7BbI$IK/=."LTcU@NIPC2T08>kX58W[@"1jS*OXgq#)nO0-7ED#A8OjC#7
%p[WV,CcLXjPIP\tS]"4s5(-f'_L,6+pe;.9%K6TR^$P>hZJHFA/<8V^Y(Wk_165-0Bck<PS#C;E&_3t9=<E(t^sqCB0U+CPYk:t$
%1NRsf@:.RO=SJlagsUE'q,q".l<9^@.@XjY1"4C5CF$A&\t!lo6=4$Xn*cYU?nQ6SbmXPMfc:ZH9Bl`*<9#'-:^5@t@]1#<AsV+C
%Z&asSJ00hV;%YVX]8Foh5Tss?+2#pp:TY?>)7";m>'-8Kr0C43MDAR6:jj>N-!2SD[0^3T\B2OM)89<O:X,>U)4E/pdtk#ICBa<J
%QB6CfrGd6=iIYgD^VCBa]L+98%$?*e(1k$F,#ft+3]^pd]*/`lf1)s^;%+X$;);\18LiH<e\J2u"FIf=[,Ln#f>$Y?9@CL<KcY&!
%EHZ=jfdea53k;2=H9#kA:P=*r`%d\BK&krT.gbh`0NFtW>g&"qWV=t9A'lRI>6@T^!ON":ASGNi3.=VVBJKiB0Qr8_^-:e"#9!\b
%5QgT5TJ!(3jRR<Q]jM$lDGRNt>u)\>TEB1[j$:,,Uf%DX;J;:O8IOWAaUYmK8'RJ/F.`fP8U_*E6t=OukZS4'Gj>9BBhZf-2.$!"
%K;KgWUlRurP*H^pOPNZOLW=5`T^F)F@mr9Ai,M3o9FP\_>s](*;VY.NY8uQ$r?@f1s!Bg'-UU.@'TrP$qXtr0+UrE@b.Dd5j'sJo
%i*Ll8Q&m.?DW4'K:A&76G&Xculapg5H$P$o)c0q>:'P;Sc>/1:84$=FL*fLMrRfNXg4L-L<W^E_A4>@p[Rq\6N>1h7$QnfXJF%22
%O3,\J1f?_Ocqp*>T>E\nZ^m5+'QA,b+Kp&c(Gn_ae`26jk?I5-_Ss2H-;%>2:\)u5Z05&,RtTih$)h;'D3,WK<j[r?q/HUI[pQ2O
%q:!71NF4qjj#\$%FLnc:C(Z=/$V`tY#N]/nW!Jh'iFCSBGYlM;cohZqKA:s:6_`7#YRdK_3]t]$E";2I<W][HMGJ#'N`Z'#4"50X
%*6Jm5JYn8L4K8;e8o4,6P4,(0g^nKCBmC&_j5<V+3!J:<J1S'#"X&AYnkUH7\%Sp6UpF,'qdPLd+ijjA"(HoG>`?N_,;VFXBTb1d
%$qkY70sleNH)[RT8D'O-@3lB38WY(1m+$ER>g]^<JH\l,?>i.BHCc-tRPA5>Q%S%87MuB=<WX4LI+h)U/uUG46N$ggmp5[tC<gi:
%U#&dN;N]pD5_iSk5_Le\$ma^,o8WrOZqm^iM:l!5C6dIJ\lqkQ_@8;\Ro>V,ba7(mX@=(l9LH>60-np>U8[[l!23?m<.n%c?62#G
%'tnrf1^kb`*K:>9=t;V+i7l`7)JIHDZ/.D]1tnRF"[]aHqiH0M$<`,P'nq^I-K*]V%qj=uOsoM3NGNJar9K^R+b2ToB`ZAI\t*1/
%XNTi:_$AtAU]mGHI%4'c@sco[3A0k!%.\El3LsmR,1>&pW<?slRPtL?4oTi)*ES;6QcTu=le,I^d2+3RDFF)r#UNi6D!s*I#\s`M
%7lbJ,/C9to6"\UVjW9o!g<ds)\"a@[=tB,"Q`Q0tj+uib#?m*D#F@[uP(cTDF8Z6hm8htN.'qT0;^Rm>-!EYIGMF.BI)!kCn,((3
%=*>h_'OP<W]l(6;j#o6LRX&8;og(L8U="WVT0lN,'Qr+2aVtj^ic2KoB24'I+(s*6+pX4sK3^=S93[MW+m(].Uf:<Mia#.9E0'^/
%D`F,05c:Jfjj^p/&7,8$Gc(cHT5C%.Gl\MM=QOEcP%c&HE5/s)n9hs2p+r5Sc?E-P,F&\#,k-HsS<4A<YPn[DR)b]4:ae@t(^Kt(
%]B9eEPoQRZ&hdU5A3hl5VDLdRWobO73bfQLJ^OdR7l3g7.1aH,m"E"_(>0"dWfBj]I>lK?,GO:F_?[8*163`iO"GYT?Z,!#rC?e3
%H-GI[o%4)7.WKto#8Cf?M"4YU&;Y_dCHk1*hlrYY:_5.dilB>/;4)p$8hcNH5LS*_JkF1/rZHCipsJ?7'!&^np"@&FV2o[g;9TS9
%GHM*<7,:`IalN-:FHXn(;rM`"(ZGrN,REG9UF/9iMWAbGd)-r=e'!SE9EHY*nQ*^S[Tr8O$Q;rGY7d38ncYK5l7@3@[kRMqf(,mT
%Yipb']]"NIX!];=K7Y+J"/TMh?C\1fZX>t_$84)\1$A_Feo?7A&>\EV0QflA?8"EEKm8^'.Tp@nM<'&7@OK`=\&0i\?)4bSA_:%;
%<sW#7Q=6ZD>n.1]jgRPbNRdS6795.,YJ*=]1VGXmLutX'dLO-t<Mko\S_B\<.!^1Rlb"D8BY=fE@AC"`+?KJhOFsOVDTIE=IjjD0
%<?6U.RNQ:eOVc+om?tma/LSd6_kVu13G/$U?8!%PIX'Y6+LRAJ^Pb5cg+RH?7F@9sS"JkX4:tXJca5+&R1fO!Je^EV8V9_cOAI'F
%4]]13_bO*QZIRaY*k*H><`=JtFlF//AOl:d1bqn68CX\WoNK%T]*3MFqd=WP&kt<%,W0SJ8EJP?jjQb#q&6Ys52*FD;XDGnHR)XG
%%4soqHg5>`]H1kc4`rTZSgmCtj0mU$mj_M0MbT4<_XOj]!gIB_I<="9GcA2]Qa.5\JE1]Sm`5(0p#-"*LTPeSF'+(](O/%,>[:1m
%%!Bd0.fj(Qq1<@lIm[T#EG2-&jn/u-Ch-cE\lgbRjDdX\D>H4.:krZS>jTKAC_%F_`QNq_U5:B8Q$NU5]T%;_laKa(XZt^/nG.D^
%i37&&EiYKWq/+WI7#u&%UaWh%D<N]]qQR>e&u+N;].*L7L"qot>0`k2`o7RCB'eBk1UqqV\AAW2hg^]?mo0V0>R:`n//4;YqK7<K
%,YXD6@=D4LMu]Q:1CFL1rm_FOVaRL\V<;84eIU3ns)CLsOge:&KGA0;NN+8KX=%=5`Q;-&N2.nkHD3AVOp8HY36D016Z>gC7ab[^
%7h"-uS5EIsV%W$%Q:SG'3GqmG[0K/(9*;%.%.V:,C11.K#TkL124dWB;E-u(&Q"NmDXbP9Wb<&lkHtrTo!OW@\o8ZOb;0MpSXE'3
%_GjTD'E(C^k:s%c4m`OJr+73KWWfBL%F`Z(;i7<.Z3j.e=#O2:%:HC]T4I`;Cnt/4_7.Rp1DVpZ_Qn/F1'/90%<k!UX"514r_R]Q
%:/4pqFu33-a:1V7jD,@%^u8oAa7^?&i$%u*^36Ddh>,V"E2KYa%YMEr_(#VT`L">hc0at+6>Nd"VP1cni2*Gl\D6K>eo)8Q&f@k.
%UqQCRdC$,<;?RSV>n.N:[OH:,*X*NVHg5UsV-[MNDdk`0nG))VFJ35%T:*iMV.Rj(pt3tB.b)LF_D+M3>Ym"rbe5rkEES1&?Lf\=
%RLKbU'$nfTa)P#&%7Fg=>l,8D4AL))OSKp"I&W_'Dk_85eR+H#r)/"UpY3`*\_jJ1))"?>f+2MBI<]QV,82[eFapAsMu@8\n>=Cl
%mN[N8KQHh2NJ*@>#sR+emo&T*obdS_Y!F^*kVWfUrlV]CBG+:'^+jema&[.g[GhZ(76K,rWIX^>#$"j5f>7tNj)[AWCdMc,/-mo\
%M/Ee");FuD7FUY;g2>$l936:$RSD+BM8&J*\#cA1W?T[Pmj.(n*p](NM/[9ua8JiJAUE%6g<L%H^0e^R"GH:*/to6l[rSoHmki]E
%Lg6@E?;W%'-Q9"FlEpY"D(o(ZUR/LS(uWs,aH_itlYD2_5Ks6jZ40U"N/MJ::oVr;QZ%2*i=\#jIIF=m^3\E-)0m0^(C3!;Nn0:L
%cVe*oN?to9HIsddL]D:_%fe!Yo+LJ[P<N9H?Ce7<Nnrf,#Y5OE(`fBoM?JSd+r8i7,h=M>BF*<%Y3<\I*7EdBUe-l)l+;*[#E%lX
%!D+df#VdB)CT!%(.:e^62J-lg*RJ\:br&0*LhJ4EZ^+uJTSSWd`iQF@iWj+<;2Ah%?(VDH;"@Ft8&kudEhd=_^(<IH6Z,Fa^itpc
%2ceKKE1'J3<BLd;i;M:G83o_]RGNrE,Z,NRjI-*'0o.HAY"7'X9tC"(Go'6)V4e_4TsZ5)EFll,i^:&W'X+-=CQ]Aq3_/6o9#ImG
%':7qd07810n!!*5<n`5=KBisq83-S6BrfI=^dp(&4^Jsrj^jM"N_o!IjZHNeeT7_I]1)]_23mXI6J@TcWSskJSToniNTq2Y.MO*5
%SnO?/s'[2f<S)u<U0G/MY""?-NA""19$`;HJfY0&\&F_)qm/*5MPc^@h*WmbR&U1]!/8LW$H$JWL?&#IohpCiCBM;"6^<eSSusW/
%3,,/L6Ee$J&L9<[@fsCuZTRs=HcRY+d5nQHJ+O#_.[edZ^H"$*`7B_B2,';L4GUPf=/<rH4jAX+k%^i6l=)GQNT]3:6a]_\aLqc7
%s+pGUIXg]HC63+T_ZBp[(["eo9NBsWTM1%i.)l<bAQj:ETq)a44eLf5'?*`@[$MR"0cGDH,\2-[2_bKLg*)V4$O/7hP!J;C0;?#3
%+YkHpOrmH+Ua@0e=VWBrDPZiSgnYeHSkV!M7faPQhDm&J8o;BK$S=Qh$JmscMMQ%pKd40))g#=/K/+KC["/-Vfddgp)EI&\"1+J]
%=/.@7K/cq=[V!EugFFiaW$9aUZAOta+Sn?\pO+6@hLptM1KGa=<"su!0In)G71ZY&@[c9q+g0=DZNIdH<PikR-;'7ARCRZ#P8I1M
%lk&RB0Ci=9%iHae]FE1TWUF+B@D7:6(2;d'kg%UEQSbd.$K[srdon"5(tMbfh7:RB&kE4(6U?]<<:@Lp\GI=[PhZdB-(/Xi:]&K[
%"6Q`3]+G"0$N&XBj2bu)D,MHe.`Y7A"Yp9;(EmOqe\&)cE$qj9nUq`Q]S]TTHFRhU0uu[+CKg!QG1<?GJ>1I!(?;5[`'hke/*UP?
%W;5:F&<kBg\"obfW)-9O*JM,h;?t.%imnm/bXZ\/+3/'G/'2f2*Am-T24!&[)J?K#](IP;';V;i@omkk6aC5_HBFh'^?-an>`To-
%:bKbcV%*W#6-6Jj#%9@F%F..O2gkRp+#Ja9'm7oA#XfiPUh^`BJ8VP%DJ:[@Vk'Q9,fOe@TAZulUauq+>"8mnE50P7,;`\qT9!W?
%8_@f$B+Zf4BT.W(T'TW[.&ehT=lE>IMSa>ggYhicZnT2G;F`/s):rj;E.`X#9n?hI*O$P26h,%=ae0^,?@4J.M!'C4'SV,oO<P2b
%,"%XkAuPl=n^3&gD-3iWg;&UP^OO^Zf.@KcB9M]9_8S\_R_383nsr^V>&#p*ri03_l[Hbd*8HX=P/K):/s,*,*'7025[73C6ih>#
%:TYK4kc$;s8c62:PKmlj7c4pt66pi,X,uq9ks#<'jQ`s9g$'cP?l:s-GLY_*^U?0YT-6j+YYY"2<;)X,/IMplTk<7W/_)Yqp_c43
%%#(M;a<`N;V59cK<-c)_jmicEkrN-'2h*m50\0>PlZ%TfK9A-kJ9&Ao:U?2(CBsY`=mO.:JD1U@%&udH50^Aq\To.ubBuokk8cU\
%dlbkh77NY$8-:6n8r-:?Om/CZ:H,"n7>+*m9$8]-]c"6LZ-YsNCfP@caU,pBTTp1T>`+0k=j]?j)Cq8pHXs6(bu<G%P9`eOb"ucO
%!'9(jestmDZH?DCK!_9(n-KjY9f9i-!_1l&X6.'VA<a1R,*b(nnDQhdbX/PC\sULRcKS>uS2thr#ARg"LeB^I]T<TFLFpO[2"MSY
%e.#(7Jel9;1caC!&hm.*4HW*Ci)\:[i.MWkr"P.cPDKmA3nPM:TH<*U+p$RAdr'fD"K<5>D<5Y<olPZLBOiVq#Ij)h,`UiD#g_\F
%[@ZI/G-"3?>gn7`kH`)r_>Ck.8KZ&#;`4-uNck0%<cAkOENJK8c)/^`Uh\?KD-W?'I;OFbRPBeCh=Hp5HRpdE4ILUr,CFKD`'pG]
%GJi5nYIp(J1USO,*6U5*&/NkCOh_r:EiH_,M=CD'oq1i)OT;586`nWS+3n\S[N]?^9mk18+b:B.as+*`V2O0iECQ?WB;q]B]Pa4?
%Zj%0O#G5l/_5d^Ne"d&J9:1>q3*3$dI>r-9MILn!135fUZn5W76"fg(5)JF>"+.QDa//r+:ZjBSX.\IT_TBh2(L]<Ooa)bs%<!]T
%/Hs59'B6X#\l_h]o$^cEJmtQ>XgP#<)Rm./M?ZNRY"#o>B3pD5O!<j>EdCTm<6+K(Pbtms3*kB"P53bWT#`U1n_:7g?YLrF'L]An
%B;olOZudZu/_"F,Jq1@&&",h9*]>5p65Gn_me]KC`#H.<F]@FtJo1nBP"[dU%sng7LoKh7b,]2A,[qW;*fIbsl=qoAd&Lf90.=Mj
%32)_\J<2VOQr.28-I4Kim`,rcJc^k^>Yi$^`(bZ8plr#[Z(U`eZH)N](qs^-T`%31#?nDk9I88h8d"*-FU6l5e`5S-=+Jd,$UrVK
%/."tq(X^S[ZQhY8$=D:QVE(BX<Bk@oYbGbR<>)L7S`DajX.5R>I"UR(\["*4QSgQ5S4^#[RtMp-Asmcg05-nM_6&Oe)qbFNhY6U<
%nRTPp,e&<Z^gaWLU=IFeXY?ZLg7#U+-H!eO'e?oHT\$TIr1Z-HrW;5Qd<m2smq*OW4[%.kHoe`$+CZdlq\f^OlqP%*5[W8JmC;2U
%56-)6HdTt!MA[?\)MPESZ'Tu_5Ui4#/b^(FCIGm*s.mAUDN$)uMhtU_eq.A-GMW41$!#[M+1LA2%=NZF$OGNZA$^MI+'(uWm&4m9
%l%=nCJ3MU)BDqdR86lT$pi2"a6<!q"IX&2oRa\^F%cd0[D&2EOcaP3Jr[s+QY]iP'U*+$d4>r+ja4!,=8St2u.95k<63u+K;<-j=
%kf&15$e//7,Q_bC/KT`\`V*R_OD"Bt[OM&g$/Zug)bgD#[P$ik/$=s*]?4@#1OWj>ek9(C[3(BtU6gW/#BaQoBY'67[D(9_Z^pgP
%N\I^h>[C&<Qop1n?eU+dEUdYaX(Db6TaXk+$q27B[:Cpk:pYngU1k_T;QF+&#1u<]rRen<KF!Ks)-iAn=6V3LP>QG1rKo@Xm[St&
%$_'F`-NI5+T(3JB\3"4(&k!Z`X)Wm*19I:.-C@'ado$JlC4eio<0&gnm@nEc<Cm#TZe*Kd4:%$pi'JJFD?pNs=uTS&l3=*=Ni&U1
%<N?5MK^rVFP<KJ)o_BcO5@tZo/VqplomPD:.ZukaFnqJ[BL.8]ECL0)fI["Z7b@`>do<q9S5t'i;_]m3)5u(2XsHuJlh(Q\5o:>&
%ZD'rP(nm!^]0aRRRH5`;73=Tp`5@Fs7!!Z8#4NJ4V);B]cr&fNng-fNdR>PM"<rY4EEl1jH^37,XW1mR\<1amO1PIb$WlHiBomoU
%;At0%Clmp!,i)25HI8pKU_JF-Ohr$#9cjgo$IF;illcLQ;%SaYIT?md(kP:Za^EQtA0c\W\AB&)Wmn:]mQri$fW^g(Kj'ZOJ=Nhq
%*meFem2:o:+I=rMnq&n/;^S<#'l\GOQN)J_lc)U<,[hcNdg%*F-Jdo9BCIH;!HfEE:Nn.@2fa;:-fN%()Y;l%-g"WgkBiQ]47DOj
%hB3+<F+SZeqd=J^TW?(Be[N9;h.Zf/?<mKK*uQuTiC&[<TjQ(no:eIprT[*QpoRoJY#)B[+nF<a-11G]qX/8oaI;+!YDr@(+1LXN
%(!Xu?>Xmip4nos9eA$$\HMl7Ls4op;j8YSJl[Socs6K3Qs8M2r4?jq'5Q$j4rUZZ]cbKDB?U"Mc07X"Gs8;>8qLAPCoV[3;f73\`
%TDn]Ms6'1+dm*loci=!rJ,@E]TDnfhrjVn<#_"UZn.5QgTDuD#jmW6;rs/:,cuK~>
%AI9_PrivateDataEnd
